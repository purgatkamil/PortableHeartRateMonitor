
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  0800f840  0800f840  0001f840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801018c  0801018c  00031450  2**0
                  CONTENTS
  4 .ARM          00000008  0801018c  0801018c  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010194  08010194  00031450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010194  08010194  00020194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010198  08010198  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001450  20000000  0801019c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd20  20001450  080115ec  00031450  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f170  080115ec  0003f170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdaf  00000000  00000000  000314c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004689  00000000  00000000  00051272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00055900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b1  00000000  00000000  00057510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df0c  00000000  00000000  00058ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002645d  00000000  00000000  000869cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112b76  00000000  00000000  000ace2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008748  00000000  00000000  001bf9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001c80e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001450 	.word	0x20001450
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f824 	.word	0x0800f824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001454 	.word	0x20001454
 80001cc:	0800f824 	.word	0x0800f824

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ec8:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <MX_ADC1_Init+0xe8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f2a:	f003 f847 	bl	8003fbc <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f34:	f002 f964 	bl	8003200 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f44:	f003 ffdc 	bl	8004f00 <HAL_ADCEx_MultiModeConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4e:	f002 f957 	bl	8003200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_ADC1_Init+0xec>)
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	237f      	movs	r3, #127	; 0x7f
 8000f60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2304      	movs	r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f70:	f003 fa3c 	bl	80043ec <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f7a:	f002 f941 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000146c 	.word	0x2000146c
 8000f8c:	50040000 	.word	0x50040000
 8000f90:	04300002 	.word	0x04300002

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ac      	sub	sp, #176	; 0xb0
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2288      	movs	r2, #136	; 0x88
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00c fb3a 	bl	800d62e <memset>
  if(adcHandle->Instance==ADC1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d146      	bne.n	8001052 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 fb7b 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001000:	f002 f8fe 	bl	8003200 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001034:	2301      	movs	r3, #1
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800103a:	230b      	movs	r3, #11
 800103c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_ADC_MspInit+0xd0>)
 800104e:	f004 fb11 	bl	8005674 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	37b0      	adds	r7, #176	; 0xb0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	50040000 	.word	0x50040000
 8001060:	40021000 	.word	0x40021000
 8001064:	48000800 	.word	0x48000800

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_DMA_Init+0x38>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <MX_DMA_Init+0x38>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6493      	str	r3, [r2, #72]	; 0x48
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_DMA_Init+0x38>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200f      	movs	r0, #15
 800108c:	f004 f8c3 	bl	8005216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001090:	200f      	movs	r0, #15
 8001092:	f004 f8dc 	bl	800524e <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f004 fca2 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f002 fd75 	bl	8003ba4 <HAL_Delay>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}

080010be <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f004 fc95 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f002 fd68 	bl	8003ba4 <HAL_Delay>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010e2:	bf00      	nop
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <SPI_TxByte+0x30>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d1f8      	bne.n	80010e4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80010f2:	1df9      	adds	r1, r7, #7
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <SPI_TxByte+0x30>)
 80010fa:	f006 faf6 	bl	80076ea <HAL_SPI_Transmit>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000ebb0 	.word	0x2000ebb0

0800110c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001118:	bf00      	nop
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <SPI_TxBuffer+0x30>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	d1f8      	bne.n	800111a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001128:	887a      	ldrh	r2, [r7, #2]
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <SPI_TxBuffer+0x30>)
 8001130:	f006 fadb 	bl	80076ea <HAL_SPI_Transmit>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000ebb0 	.word	0x2000ebb0

08001140 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001146:	23ff      	movs	r3, #255	; 0xff
 8001148:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800114a:	bf00      	nop
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <SPI_RxByte+0x34>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d1f8      	bne.n	800114c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800115a:	1dba      	adds	r2, r7, #6
 800115c:	1df9      	adds	r1, r7, #7
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <SPI_RxByte+0x34>)
 8001166:	f006 fc35 	bl	80079d4 <HAL_SPI_TransmitReceive>

	return data;
 800116a:	79bb      	ldrb	r3, [r7, #6]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000ebb0 	.word	0x2000ebb0

08001178 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001180:	f7ff ffde 	bl	8001140 <SPI_RxByte>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	701a      	strb	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <SD_ReadyWait+0x30>)
 800119c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011a0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80011a2:	f7ff ffcd 	bl	8001140 <SPI_RxByte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2bff      	cmp	r3, #255	; 0xff
 80011ae:	d003      	beq.n	80011b8 <SD_ReadyWait+0x24>
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SD_ReadyWait+0x30>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f4      	bne.n	80011a2 <SD_ReadyWait+0xe>

	return res;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200014d2 	.word	0x200014d2

080011c8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80011ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80011d2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80011d4:	f7ff ff73 	bl	80010be <DESELECT>
	for(int i = 0; i < 10; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e005      	b.n	80011ea <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80011de:	20ff      	movs	r0, #255	; 0xff
 80011e0:	f7ff ff7a 	bl	80010d8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	ddf6      	ble.n	80011de <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80011f0:	f7ff ff58 	bl	80010a4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001208:	2395      	movs	r3, #149	; 0x95
 800120a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800120c:	463b      	mov	r3, r7
 800120e:	2106      	movs	r1, #6
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff7b 	bl	800110c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001216:	e002      	b.n	800121e <SD_PowerOn+0x56>
	{
		cnt--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800121e:	f7ff ff8f 	bl	8001140 <SPI_RxByte>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d002      	beq.n	800122e <SD_PowerOn+0x66>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <SD_PowerOn+0x50>
	}

	DESELECT();
 800122e:	f7ff ff46 	bl	80010be <DESELECT>
	SPI_TxByte(0XFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f7ff ff50 	bl	80010d8 <SPI_TxByte>

	PowerFlag = 1;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <SD_PowerOn+0x80>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200014d5 	.word	0x200014d5

0800124c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <SD_PowerOff+0x14>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	200014d5 	.word	0x200014d5

08001264 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <SD_CheckPower+0x14>)
 800126a:	781b      	ldrb	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200014d5 	.word	0x200014d5

0800127c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <SD_RxDataBlock+0x58>)
 8001288:	22c8      	movs	r2, #200	; 0xc8
 800128a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800128c:	f7ff ff58 	bl	8001140 <SPI_RxByte>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d103      	bne.n	80012a2 <SD_RxDataBlock+0x26>
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <SD_RxDataBlock+0x58>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f4      	bne.n	800128c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2bfe      	cmp	r3, #254	; 0xfe
 80012a6:	d001      	beq.n	80012ac <SD_RxDataBlock+0x30>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00f      	b.n	80012cc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff60 	bl	8001178 <SPI_RxBytePtr>
	} while(len--);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	603a      	str	r2, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f4      	bne.n	80012ac <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80012c2:	f7ff ff3d 	bl	8001140 <SPI_RxByte>
	SPI_RxByte();
 80012c6:	f7ff ff3b 	bl	8001140 <SPI_RxByte>

	return TRUE;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200014d0 	.word	0x200014d0

080012d8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80012e8:	f7ff ff54 	bl	8001194 <SD_ReadyWait>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d001      	beq.n	80012f6 <SD_TxDataBlock+0x1e>
 80012f2:	2300      	movs	r3, #0
 80012f4:	e02f      	b.n	8001356 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff feed 	bl	80010d8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	2bfd      	cmp	r3, #253	; 0xfd
 8001302:	d020      	beq.n	8001346 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff feff 	bl	800110c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800130e:	f7ff ff17 	bl	8001140 <SPI_RxByte>
		SPI_RxByte();
 8001312:	f7ff ff15 	bl	8001140 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001316:	e00b      	b.n	8001330 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001318:	f7ff ff12 	bl	8001140 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2b05      	cmp	r3, #5
 8001328:	d006      	beq.n	8001338 <SD_TxDataBlock+0x60>
			i++;
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	3301      	adds	r3, #1
 800132e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	2b40      	cmp	r3, #64	; 0x40
 8001334:	d9f0      	bls.n	8001318 <SD_TxDataBlock+0x40>
 8001336:	e000      	b.n	800133a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001338:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800133a:	bf00      	nop
 800133c:	f7ff ff00 	bl	8001140 <SPI_RxByte>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0fa      	beq.n	800133c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2b05      	cmp	r3, #5
 800134e:	d101      	bne.n	8001354 <SD_TxDataBlock+0x7c>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	6039      	str	r1, [r7, #0]
 8001368:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800136a:	f7ff ff13 	bl	8001194 <SD_ReadyWait>
 800136e:	4603      	mov	r3, r0
 8001370:	2bff      	cmp	r3, #255	; 0xff
 8001372:	d001      	beq.n	8001378 <SD_SendCmd+0x1a>
 8001374:	23ff      	movs	r3, #255	; 0xff
 8001376:	e042      	b.n	80013fe <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff feac 	bl	80010d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	0e1b      	lsrs	r3, r3, #24
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fea6 	bl	80010d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fea0 	bl	80010d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe9a 	bl	80010d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe95 	bl	80010d8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b40      	cmp	r3, #64	; 0x40
 80013b2:	d102      	bne.n	80013ba <SD_SendCmd+0x5c>
 80013b4:	2395      	movs	r3, #149	; 0x95
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e007      	b.n	80013ca <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b48      	cmp	r3, #72	; 0x48
 80013be:	d102      	bne.n	80013c6 <SD_SendCmd+0x68>
 80013c0:	2387      	movs	r3, #135	; 0x87
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <SD_SendCmd+0x6c>
	else crc = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe83 	bl	80010d8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b4c      	cmp	r3, #76	; 0x4c
 80013d6:	d101      	bne.n	80013dc <SD_SendCmd+0x7e>
 80013d8:	f7ff feb2 	bl	8001140 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80013dc:	230a      	movs	r3, #10
 80013de:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80013e0:	f7ff feae 	bl	8001140 <SPI_RxByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80013e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da05      	bge.n	80013fc <SD_SendCmd+0x9e>
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f1      	bne.n	80013e0 <SD_SendCmd+0x82>

	return res;
 80013fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SD_disk_initialize+0x14>
 8001418:	2301      	movs	r3, #1
 800141a:	e0d1      	b.n	80015c0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <SD_disk_initialize+0x1c0>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <SD_disk_initialize+0x2a>
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <SD_disk_initialize+0x1c0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	e0c6      	b.n	80015c0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001432:	f7ff fec9 	bl	80011c8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001436:	f7ff fe35 	bl	80010a4 <SELECT>

	/* check disk type */
	type = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800143e:	2100      	movs	r1, #0
 8001440:	2040      	movs	r0, #64	; 0x40
 8001442:	f7ff ff8c 	bl	800135e <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	f040 80a1 	bne.w	8001590 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800144e:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <SD_disk_initialize+0x1c4>)
 8001450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001454:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800145a:	2048      	movs	r0, #72	; 0x48
 800145c:	f7ff ff7f 	bl	800135e <SD_SendCmd>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d155      	bne.n	8001512 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e00c      	b.n	8001486 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800146c:	7bfc      	ldrb	r4, [r7, #15]
 800146e:	f7ff fe67 	bl	8001140 <SPI_RxByte>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	f104 0310 	add.w	r3, r4, #16
 800147a:	443b      	add	r3, r7
 800147c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d9ef      	bls.n	800146c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800148c:	7abb      	ldrb	r3, [r7, #10]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d17e      	bne.n	8001590 <SD_disk_initialize+0x188>
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	2baa      	cmp	r3, #170	; 0xaa
 8001496:	d17b      	bne.n	8001590 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001498:	2100      	movs	r1, #0
 800149a:	2077      	movs	r0, #119	; 0x77
 800149c:	f7ff ff5f 	bl	800135e <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d807      	bhi.n	80014b6 <SD_disk_initialize+0xae>
 80014a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014aa:	2069      	movs	r0, #105	; 0x69
 80014ac:	f7ff ff57 	bl	800135e <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <SD_disk_initialize+0x1c4>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ec      	bne.n	8001498 <SD_disk_initialize+0x90>
 80014be:	e000      	b.n	80014c2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80014c0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <SD_disk_initialize+0x1c4>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d062      	beq.n	8001590 <SD_disk_initialize+0x188>
 80014ca:	2100      	movs	r1, #0
 80014cc:	207a      	movs	r0, #122	; 0x7a
 80014ce:	f7ff ff46 	bl	800135e <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d15b      	bne.n	8001590 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e00c      	b.n	80014f8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80014de:	7bfc      	ldrb	r4, [r7, #15]
 80014e0:	f7ff fe2e 	bl	8001140 <SPI_RxByte>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	f104 0310 	add.w	r3, r4, #16
 80014ec:	443b      	add	r3, r7
 80014ee:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9ef      	bls.n	80014de <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80014fe:	7a3b      	ldrb	r3, [r7, #8]
 8001500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SD_disk_initialize+0x104>
 8001508:	230c      	movs	r3, #12
 800150a:	e000      	b.n	800150e <SD_disk_initialize+0x106>
 800150c:	2304      	movs	r3, #4
 800150e:	73bb      	strb	r3, [r7, #14]
 8001510:	e03e      	b.n	8001590 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001512:	2100      	movs	r1, #0
 8001514:	2077      	movs	r0, #119	; 0x77
 8001516:	f7ff ff22 	bl	800135e <SD_SendCmd>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d808      	bhi.n	8001532 <SD_disk_initialize+0x12a>
 8001520:	2100      	movs	r1, #0
 8001522:	2069      	movs	r0, #105	; 0x69
 8001524:	f7ff ff1b 	bl	800135e <SD_SendCmd>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d801      	bhi.n	8001532 <SD_disk_initialize+0x12a>
 800152e:	2302      	movs	r3, #2
 8001530:	e000      	b.n	8001534 <SD_disk_initialize+0x12c>
 8001532:	2301      	movs	r3, #1
 8001534:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d10e      	bne.n	800155a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800153c:	2100      	movs	r1, #0
 800153e:	2077      	movs	r0, #119	; 0x77
 8001540:	f7ff ff0d 	bl	800135e <SD_SendCmd>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d80e      	bhi.n	8001568 <SD_disk_initialize+0x160>
 800154a:	2100      	movs	r1, #0
 800154c:	2069      	movs	r0, #105	; 0x69
 800154e:	f7ff ff06 	bl	800135e <SD_SendCmd>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <SD_disk_initialize+0x160>
 8001558:	e00c      	b.n	8001574 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800155a:	2100      	movs	r1, #0
 800155c:	2041      	movs	r0, #65	; 0x41
 800155e:	f7ff fefe 	bl	800135e <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <SD_disk_initialize+0x1c4>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e2      	bne.n	8001536 <SD_disk_initialize+0x12e>
 8001570:	e000      	b.n	8001574 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001572:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SD_disk_initialize+0x1c4>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <SD_disk_initialize+0x184>
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	2050      	movs	r0, #80	; 0x50
 8001582:	f7ff feec 	bl	800135e <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SD_disk_initialize+0x188>
 800158c:	2300      	movs	r3, #0
 800158e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001590:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <SD_disk_initialize+0x1c8>)
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001596:	f7ff fd92 	bl	80010be <DESELECT>
	SPI_RxByte();
 800159a:	f7ff fdd1 	bl	8001140 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SD_disk_initialize+0x1c0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SD_disk_initialize+0x1c0>)
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e001      	b.n	80015ba <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80015b6:	f7ff fe49 	bl	800124c <SD_PowerOff>
	}

	return Stat;
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <SD_disk_initialize+0x1c0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	200014d0 	.word	0x200014d0
 80015d0:	200014d4 	.word	0x200014d4

080015d4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SD_disk_status+0x14>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e002      	b.n	80015ee <SD_disk_status+0x1a>
	return Stat;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SD_disk_status+0x28>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000

08001600 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <SD_disk_read+0x1c>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <SD_disk_read+0x20>
 800161c:	2304      	movs	r3, #4
 800161e:	e051      	b.n	80016c4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <SD_disk_read+0xcc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SD_disk_read+0x32>
 800162e:	2303      	movs	r3, #3
 8001630:	e048      	b.n	80016c4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <SD_disk_read+0xd0>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <SD_disk_read+0x44>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	607b      	str	r3, [r7, #4]

	SELECT();
 8001644:	f7ff fd2e 	bl	80010a4 <SELECT>

	if (count == 1)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d111      	bne.n	8001672 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2051      	movs	r0, #81	; 0x51
 8001652:	f7ff fe84 	bl	800135e <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d129      	bne.n	80016b0 <SD_disk_read+0xb0>
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f7ff fe0b 	bl	800127c <SD_RxDataBlock>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d021      	beq.n	80016b0 <SD_disk_read+0xb0>
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	e01e      	b.n	80016b0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2052      	movs	r0, #82	; 0x52
 8001676:	f7ff fe72 	bl	800135e <SD_SendCmd>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d117      	bne.n	80016b0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f7ff fdf9 	bl	800127c <SD_RxDataBlock>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <SD_disk_read+0xa6>
				buff += 512;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001696:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3b01      	subs	r3, #1
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ed      	bne.n	8001680 <SD_disk_read+0x80>
 80016a4:	e000      	b.n	80016a8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80016a6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	204c      	movs	r0, #76	; 0x4c
 80016ac:	f7ff fe57 	bl	800135e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80016b0:	f7ff fd05 	bl	80010be <DESELECT>
	SPI_RxByte();
 80016b4:	f7ff fd44 	bl	8001140 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	200014d4 	.word	0x200014d4

080016d4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <SD_disk_write+0x1c>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <SD_disk_write+0x20>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e06b      	b.n	80017cc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <SD_disk_write+0x100>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_write+0x32>
 8001702:	2303      	movs	r3, #3
 8001704:	e062      	b.n	80017cc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <SD_disk_write+0x100>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SD_disk_write+0x44>
 8001714:	2302      	movs	r3, #2
 8001716:	e059      	b.n	80017cc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <SD_disk_write+0x104>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <SD_disk_write+0x56>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	025b      	lsls	r3, r3, #9
 8001728:	607b      	str	r3, [r7, #4]

	SELECT();
 800172a:	f7ff fcbb 	bl	80010a4 <SELECT>

	if (count == 1)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d110      	bne.n	8001756 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	2058      	movs	r0, #88	; 0x58
 8001738:	f7ff fe11 	bl	800135e <SD_SendCmd>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d13a      	bne.n	80017b8 <SD_disk_write+0xe4>
 8001742:	21fe      	movs	r1, #254	; 0xfe
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f7ff fdc7 	bl	80012d8 <SD_TxDataBlock>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d033      	beq.n	80017b8 <SD_disk_write+0xe4>
			count = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e030      	b.n	80017b8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <SD_disk_write+0x104>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001762:	2100      	movs	r1, #0
 8001764:	2077      	movs	r0, #119	; 0x77
 8001766:	f7ff fdfa 	bl	800135e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	2057      	movs	r0, #87	; 0x57
 800176e:	f7ff fdf6 	bl	800135e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	2059      	movs	r0, #89	; 0x59
 8001776:	f7ff fdf2 	bl	800135e <SD_SendCmd>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11b      	bne.n	80017b8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001780:	21fc      	movs	r1, #252	; 0xfc
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f7ff fda8 	bl	80012d8 <SD_TxDataBlock>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <SD_disk_write+0xd0>
				buff += 512;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001794:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ee      	bne.n	8001780 <SD_disk_write+0xac>
 80017a2:	e000      	b.n	80017a6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80017a4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80017a6:	21fd      	movs	r1, #253	; 0xfd
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fd95 	bl	80012d8 <SD_TxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <SD_disk_write+0xe4>
			{
				count = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80017b8:	f7ff fc81 	bl	80010be <DESELECT>
	SPI_RxByte();
 80017bc:	f7ff fcc0 	bl	8001140 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	200014d4 	.word	0x200014d4

080017dc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	603a      	str	r2, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	460b      	mov	r3, r1
 80017ea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SD_disk_ioctl+0x1e>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e115      	b.n	8001a26 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d124      	bne.n	8001850 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d012      	beq.n	8001834 <SD_disk_ioctl+0x58>
 800180e:	2b02      	cmp	r3, #2
 8001810:	dc1a      	bgt.n	8001848 <SD_disk_ioctl+0x6c>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <SD_disk_ioctl+0x40>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d006      	beq.n	8001828 <SD_disk_ioctl+0x4c>
 800181a:	e015      	b.n	8001848 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800181c:	f7ff fd16 	bl	800124c <SD_PowerOff>
			res = RES_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001826:	e0fc      	b.n	8001a22 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001828:	f7ff fcce 	bl	80011c8 <SD_PowerOn>
			res = RES_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001832:	e0f6      	b.n	8001a22 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	1c5c      	adds	r4, r3, #1
 8001838:	f7ff fd14 	bl	8001264 <SD_CheckPower>
 800183c:	4603      	mov	r3, r0
 800183e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001846:	e0ec      	b.n	8001a22 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001848:	2304      	movs	r3, #4
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800184e:	e0e8      	b.n	8001a22 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001850:	4b77      	ldr	r3, [pc, #476]	; (8001a30 <SD_disk_ioctl+0x254>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SD_disk_ioctl+0x86>
 800185e:	2303      	movs	r3, #3
 8001860:	e0e1      	b.n	8001a26 <SD_disk_ioctl+0x24a>

		SELECT();
 8001862:	f7ff fc1f 	bl	80010a4 <SELECT>

		switch (ctrl)
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	2b0d      	cmp	r3, #13
 800186a:	f200 80cb 	bhi.w	8001a04 <SD_disk_ioctl+0x228>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <SD_disk_ioctl+0x98>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	0800196f 	.word	0x0800196f
 8001878:	080018ad 	.word	0x080018ad
 800187c:	0800195f 	.word	0x0800195f
 8001880:	08001a05 	.word	0x08001a05
 8001884:	08001a05 	.word	0x08001a05
 8001888:	08001a05 	.word	0x08001a05
 800188c:	08001a05 	.word	0x08001a05
 8001890:	08001a05 	.word	0x08001a05
 8001894:	08001a05 	.word	0x08001a05
 8001898:	08001a05 	.word	0x08001a05
 800189c:	08001a05 	.word	0x08001a05
 80018a0:	08001981 	.word	0x08001981
 80018a4:	080019a5 	.word	0x080019a5
 80018a8:	080019c9 	.word	0x080019c9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80018ac:	2100      	movs	r1, #0
 80018ae:	2049      	movs	r0, #73	; 0x49
 80018b0:	f7ff fd55 	bl	800135e <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80a8 	bne.w	8001a0c <SD_disk_ioctl+0x230>
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2110      	movs	r1, #16
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fcda 	bl	800127c <SD_RxDataBlock>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 809e 	beq.w	8001a0c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80018d0:	7b3b      	ldrb	r3, [r7, #12]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10e      	bne.n	80018f8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	7d3b      	ldrb	r3, [r7, #20]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80018ee:	8bfb      	ldrh	r3, [r7, #30]
 80018f0:	029a      	lsls	r2, r3, #10
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e02e      	b.n	8001956 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018f8:	7c7b      	ldrb	r3, [r7, #17]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	09db      	lsrs	r3, r3, #7
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b2da      	uxtb	r2, r3
 800190a:	7d7b      	ldrb	r3, [r7, #21]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 0306 	and.w	r3, r3, #6
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3302      	adds	r3, #2
 800191c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001920:	7d3b      	ldrb	r3, [r7, #20]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	b2db      	uxtb	r3, r3
 8001926:	b29a      	uxth	r2, r3
 8001928:	7cfb      	ldrb	r3, [r7, #19]
 800192a:	b29b      	uxth	r3, r3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	7cbb      	ldrb	r3, [r7, #18]
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	b29b      	uxth	r3, r3
 800193a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800193e:	b29b      	uxth	r3, r3
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001948:	8bfa      	ldrh	r2, [r7, #30]
 800194a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800194e:	3b09      	subs	r3, #9
 8001950:	409a      	lsls	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800195c:	e056      	b.n	8001a0c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800196c:	e055      	b.n	8001a1a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800196e:	f7ff fc11 	bl	8001194 <SD_ReadyWait>
 8001972:	4603      	mov	r3, r0
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	d14b      	bne.n	8001a10 <SD_disk_ioctl+0x234>
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800197e:	e047      	b.n	8001a10 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001980:	2100      	movs	r1, #0
 8001982:	2049      	movs	r0, #73	; 0x49
 8001984:	f7ff fceb 	bl	800135e <SD_SendCmd>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d142      	bne.n	8001a14 <SD_disk_ioctl+0x238>
 800198e:	2110      	movs	r1, #16
 8001990:	6a38      	ldr	r0, [r7, #32]
 8001992:	f7ff fc73 	bl	800127c <SD_RxDataBlock>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d03b      	beq.n	8001a14 <SD_disk_ioctl+0x238>
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019a2:	e037      	b.n	8001a14 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80019a4:	2100      	movs	r1, #0
 80019a6:	204a      	movs	r0, #74	; 0x4a
 80019a8:	f7ff fcd9 	bl	800135e <SD_SendCmd>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d132      	bne.n	8001a18 <SD_disk_ioctl+0x23c>
 80019b2:	2110      	movs	r1, #16
 80019b4:	6a38      	ldr	r0, [r7, #32]
 80019b6:	f7ff fc61 	bl	800127c <SD_RxDataBlock>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d02b      	beq.n	8001a18 <SD_disk_ioctl+0x23c>
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019c6:	e027      	b.n	8001a18 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80019c8:	2100      	movs	r1, #0
 80019ca:	207a      	movs	r0, #122	; 0x7a
 80019cc:	f7ff fcc7 	bl	800135e <SD_SendCmd>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019dc:	e00b      	b.n	80019f6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80019de:	6a3c      	ldr	r4, [r7, #32]
 80019e0:	1c63      	adds	r3, r4, #1
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	f7ff fbac 	bl	8001140 <SPI_RxByte>
 80019e8:	4603      	mov	r3, r0
 80019ea:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80019ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d9ef      	bls.n	80019de <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001a04:	2304      	movs	r3, #4
 8001a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a0a:	e006      	b.n	8001a1a <SD_disk_ioctl+0x23e>
			break;
 8001a0c:	bf00      	nop
 8001a0e:	e004      	b.n	8001a1a <SD_disk_ioctl+0x23e>
			break;
 8001a10:	bf00      	nop
 8001a12:	e002      	b.n	8001a1a <SD_disk_ioctl+0x23e>
			break;
 8001a14:	bf00      	nop
 8001a16:	e000      	b.n	8001a1a <SD_disk_ioctl+0x23e>
			break;
 8001a18:	bf00      	nop
		}

		DESELECT();
 8001a1a:	f7ff fb50 	bl	80010be <DESELECT>
		SPI_RxByte();
 8001a1e:	f7ff fb8f 	bl	8001140 <SPI_RxByte>
	}

	return res;
 8001a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	372c      	adds	r7, #44	; 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000

08001a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <MX_GPIO_Init+0xe0>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2110      	movs	r1, #16
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f003 ffad 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f640 0104 	movw	r1, #2052	; 0x804
 8001aa4:	481c      	ldr	r0, [pc, #112]	; (8001b18 <MX_GPIO_Init+0xe4>)
 8001aa6:	f003 ffa7 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <MX_GPIO_Init+0xe4>)
 8001ab2:	f003 ffa1 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <MX_GPIO_Init+0xe8>)
 8001acc:	f003 fdd2 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f003 fdc3 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001aee:	f641 0304 	movw	r3, #6148	; 0x1804
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_GPIO_Init+0xe4>)
 8001b08:	f003 fdb4 	bl	8005674 <HAL_GPIO_Init>

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	48000800 	.word	0x48000800

08001b20 <lcd_cmd>:
	0x00, //
	0x00, //
};

static void lcd_cmd(uint8_t cmd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <lcd_cmd+0x44>)
 8001b32:	f003 ff61 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <lcd_cmd+0x44>)
 8001b3e:	f003 ff5b 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001b42:	1df9      	adds	r1, r7, #7
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <lcd_cmd+0x48>)
 8001b4c:	f005 fdcd 	bl	80076ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <lcd_cmd+0x44>)
 8001b58:	f003 ff4e 	bl	80059f8 <HAL_GPIO_WritePin>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	48000400 	.word	0x48000400
 8001b68:	2000ec14 	.word	0x2000ec14

08001b6c <lcd_data>:

static void lcd_data(uint8_t data)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <lcd_data+0x44>)
 8001b7e:	f003 ff3b 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <lcd_data+0x44>)
 8001b8a:	f003 ff35 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001b8e:	1df9      	adds	r1, r7, #7
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	2201      	movs	r2, #1
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <lcd_data+0x48>)
 8001b98:	f005 fda7 	bl	80076ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <lcd_data+0x44>)
 8001ba4:	f003 ff28 	bl	80059f8 <HAL_GPIO_WritePin>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	2000ec14 	.word	0x2000ec14

08001bb8 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <lcd_send+0x20>
		lcd_cmd(value);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ffa5 	bl	8001b20 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001bd6:	e004      	b.n	8001be2 <lcd_send+0x2a>
		lcd_data(value);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffc5 	bl	8001b6c <lcd_data>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <lcd_init>:
  CMD(0xf6), 0x00,
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0x60, //rotacja o 180 stopni  //0xa0,
};

void lcd_init(void){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

	int i = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <lcd_init+0x6c>)
 8001bfc:	f003 fefc 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f001 ffcf 	bl	8003ba4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4813      	ldr	r0, [pc, #76]	; (8001c58 <lcd_init+0x6c>)
 8001c0c:	f003 fef4 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c10:	2064      	movs	r0, #100	; 0x64
 8001c12:	f001 ffc7 	bl	8003ba4 <HAL_Delay>

	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e009      	b.n	8001c30 <lcd_init+0x44>
		lcd_send(init_table[i]);
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <lcd_init+0x70>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ffc7 	bl	8001bb8 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b4b      	cmp	r3, #75	; 0x4b
 8001c34:	d9f2      	bls.n	8001c1c <lcd_init+0x30>
	}

	HAL_Delay(200);
 8001c36:	20c8      	movs	r0, #200	; 0xc8
 8001c38:	f001 ffb4 	bl	8003ba4 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001c3c:	2011      	movs	r0, #17
 8001c3e:	f7ff ff6f 	bl	8001b20 <lcd_cmd>
	HAL_Delay(120);
 8001c42:	2078      	movs	r0, #120	; 0x78
 8001c44:	f001 ffae 	bl	8003ba4 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001c48:	2029      	movs	r0, #41	; 0x29
 8001c4a:	f7ff ff69 	bl	8001b20 <lcd_cmd>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	0800f8fc 	.word	0x0800f8fc

08001c60 <lcd_data16>:

static void lcd_data16(uint16_t value){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]

	lcd_data(value >> 8);
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff7a 	bl	8001b6c <lcd_data>
	lcd_data(value);
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff75 	bl	8001b6c <lcd_data>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001c98:	202a      	movs	r0, #42	; 0x2a
 8001c9a:	f7ff ff41 	bl	8001b20 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffda 	bl	8001c60 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ffd1 	bl	8001c60 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001cbe:	202b      	movs	r0, #43	; 0x2b
 8001cc0:	f7ff ff2e 	bl	8001b20 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3302      	adds	r3, #2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ffc7 	bl	8001c60 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffbc 	bl	8001c60 <lcd_data16>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <lcd_put_pixel>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
	if(x >= 0 && x <= LCD_WIDTH && y >= 0 && y <= LCD_HEIGHT){
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db15      	blt.n	8001d30 <lcd_put_pixel+0x40>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2ba0      	cmp	r3, #160	; 0xa0
 8001d08:	dc12      	bgt.n	8001d30 <lcd_put_pixel+0x40>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0f      	blt.n	8001d30 <lcd_put_pixel+0x40>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	dc0c      	bgt.n	8001d30 <lcd_put_pixel+0x40>
		frame_buffer[x + y * LCD_WIDTH] = color;
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	461a      	mov	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	491d      	ldr	r1, [pc, #116]	; (8001d9c <lcd_put_pixel+0xac>)
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	else if(y > LCD_HEIGHT){
		frame_buffer[x + LCD_HEIGHT * LCD_WIDTH] = color;
	}


}
 8001d2e:	e02f      	b.n	8001d90 <lcd_put_pixel+0xa0>
	else if(x < 0){
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da0a      	bge.n	8001d4c <lcd_put_pixel+0x5c>
		frame_buffer[0 + y * LCD_WIDTH] = color;
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	015b      	lsls	r3, r3, #5
 8001d40:	4619      	mov	r1, r3
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <lcd_put_pixel+0xac>)
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8001d4a:	e021      	b.n	8001d90 <lcd_put_pixel+0xa0>
	else if(x > LCD_WIDTH){
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d50:	dd0b      	ble.n	8001d6a <lcd_put_pixel+0x7a>
		frame_buffer[LCD_WIDTH + y * LCD_WIDTH] = color;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <lcd_put_pixel+0xac>)
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8001d68:	e012      	b.n	8001d90 <lcd_put_pixel+0xa0>
	else if(y < 0){
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da05      	bge.n	8001d7c <lcd_put_pixel+0x8c>
		frame_buffer[x + 0 * LCD_WIDTH] = color;
 8001d70:	490a      	ldr	r1, [pc, #40]	; (8001d9c <lcd_put_pixel+0xac>)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001d7a:	e009      	b.n	8001d90 <lcd_put_pixel+0xa0>
	else if(y > LCD_HEIGHT){
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b80      	cmp	r3, #128	; 0x80
 8001d80:	dd06      	ble.n	8001d90 <lcd_put_pixel+0xa0>
		frame_buffer[x + LCD_HEIGHT * LCD_WIDTH] = color;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <lcd_put_pixel+0xac>)
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	200014d8 	.word	0x200014d8

08001da0 <fill_with>:


void fill_with(uint16_t color){
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]

	 int i = LCD_WIDTH * LCD_HEIGHT - 1;
 8001daa:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8001dae:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8001db0:	e007      	b.n	8001dc2 <fill_with+0x22>
		frame_buffer[i] = color;
 8001db2:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <fill_with+0x38>)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	88fa      	ldrh	r2, [r7, #6]
 8001db8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		--i;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
	 while(i >= 0){
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	daf4      	bge.n	8001db2 <fill_with+0x12>
	 }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200014d8 	.word	0x200014d8

08001ddc <lcd_copy>:

void lcd_copy(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	22a0      	movs	r2, #160	; 0xa0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff ff4f 	bl	8001c8a <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001dec:	202c      	movs	r0, #44	; 0x2c
 8001dee:	f7ff fe97 	bl	8001b20 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df8:	4808      	ldr	r0, [pc, #32]	; (8001e1c <lcd_copy+0x40>)
 8001dfa:	f003 fdfd 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <lcd_copy+0x40>)
 8001e06:	f003 fdf7 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001e0a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e0e:	4904      	ldr	r1, [pc, #16]	; (8001e20 <lcd_copy+0x44>)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <lcd_copy+0x48>)
 8001e12:	f006 f801 	bl	8007e18 <HAL_SPI_Transmit_DMA>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	200014d8 	.word	0x200014d8
 8001e24:	2000ec14 	.word	0x2000ec14

08001e28 <lcd_transfer_done>:
	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, width * height * 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

void lcd_transfer_done(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e32:	4802      	ldr	r0, [pc, #8]	; (8001e3c <lcd_transfer_done+0x14>)
 8001e34:	f003 fde0 	bl	80059f8 <HAL_GPIO_WritePin>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	48000400 	.word	0x48000400

08001e40 <LCD_DisplayChar>:
		return true;
	else
		return false;
}

void LCD_DisplayChar(uint16_t Xpoint, uint16_t Ypoint, char Acsii_Char, uint16_t Color) {
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	80fb      	strh	r3, [r7, #6]
 8001e52:	4603      	mov	r3, r0
 8001e54:	80bb      	strh	r3, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	803b      	strh	r3, [r7, #0]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8001e5e:	2305      	movs	r3, #5
 8001e60:	73fb      	strb	r3, [r7, #15]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8001e62:	2308      	movs	r3, #8
 8001e64:	73bb      	strb	r3, [r7, #14]

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font_Height * (Font_Width / 8 + (Font_Width % 8 ? 1 : 0));
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	3b20      	subs	r3, #32
 8001e6a:	7bba      	ldrb	r2, [r7, #14]
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	08d2      	lsrs	r2, r2, #3
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	4611      	mov	r1, r2
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	f002 0207 	and.w	r2, r2, #7
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2201      	movne	r2, #1
 8001e86:	2200      	moveq	r2, #0
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440a      	add	r2, r1
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	60bb      	str	r3, [r7, #8]
    const unsigned char* ptr = &Font8_Table[Char_Offset];
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <LCD_DisplayChar+0xe0>)
 8001e96:	4413      	add	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	827b      	strh	r3, [r7, #18]
 8001e9e:	e035      	b.n	8001f0c <LCD_DisplayChar+0xcc>
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	823b      	strh	r3, [r7, #16]
 8001ea4:	e021      	b.n	8001eea <LCD_DisplayChar+0xaa>
            if (*ptr & (0x80 >> (Column % 8))) {
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	8a3b      	ldrh	r3, [r7, #16]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	fa42 f303 	asr.w	r3, r2, r3
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <LCD_DisplayChar+0x92>
                lcd_put_pixel(Xpoint + Column, Ypoint + Page, Color);
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	8a3b      	ldrh	r3, [r7, #16]
 8001ec2:	18d0      	adds	r0, r2, r3
 8001ec4:	88ba      	ldrh	r2, [r7, #4]
 8001ec6:	8a7b      	ldrh	r3, [r7, #18]
 8001ec8:	4413      	add	r3, r2
 8001eca:	883a      	ldrh	r2, [r7, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff ff0f 	bl	8001cf0 <lcd_put_pixel>
            }

            if (Column % 8 == 7) {
 8001ed2:	8a3b      	ldrh	r3, [r7, #16]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d102      	bne.n	8001ee4 <LCD_DisplayChar+0xa4>
                ptr++;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
        for (uint16_t Column = 0; Column < Font_Width; Column++) {
 8001ee4:	8a3b      	ldrh	r3, [r7, #16]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	823b      	strh	r3, [r7, #16]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	8a3a      	ldrh	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3d8      	bcc.n	8001ea6 <LCD_DisplayChar+0x66>
            }
        }

        if (Font_Width % 8 != 0) {
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <LCD_DisplayChar+0xc6>
            ptr++;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
    for (uint16_t Page = 0; Page < Font_Height; Page++) {
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	827b      	strh	r3, [r7, #18]
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8a7a      	ldrh	r2, [r7, #18]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3c4      	bcc.n	8001ea0 <LCD_DisplayChar+0x60>
        }
    }
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	20000004 	.word	0x20000004

08001f24 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xstart, uint16_t Ystart, char* pString, uint16_t Color) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	81fb      	strh	r3, [r7, #14]
 8001f32:	460b      	mov	r3, r1
 8001f34:	81bb      	strh	r3, [r7, #12]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
    const uint8_t Font_Width = FONT_WIDTH; // Szerokość czcionki
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	75fb      	strb	r3, [r7, #23]
    const uint8_t Font_Height = FONT_HEIGHT; // Wysokość czcionki
 8001f3e:	2308      	movs	r3, #8
 8001f40:	75bb      	strb	r3, [r7, #22]

    while (*pString != '\0') {
 8001f42:	e01f      	b.n	8001f84 <LCD_DisplayString+0x60>
        if (Xstart + Font_Width > LCD_WIDTH) {
 8001f44:	89fa      	ldrh	r2, [r7, #14]
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	4413      	add	r3, r2
 8001f4a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f4c:	dd06      	ble.n	8001f5c <LCD_DisplayString+0x38>
            Xstart = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	81fb      	strh	r3, [r7, #14]
            Ystart += Font_Height;
 8001f52:	7dbb      	ldrb	r3, [r7, #22]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	89bb      	ldrh	r3, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	81bb      	strh	r3, [r7, #12]
        }

        if (Ystart + Font_Height > LCD_HEIGHT) {
 8001f5c:	89ba      	ldrh	r2, [r7, #12]
 8001f5e:	7dbb      	ldrb	r3, [r7, #22]
 8001f60:	4413      	add	r3, r2
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	dc13      	bgt.n	8001f8e <LCD_DisplayString+0x6a>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
        }

        LCD_DisplayChar(Xstart, Ystart, *pString, Color);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	89b9      	ldrh	r1, [r7, #12]
 8001f6e:	89f8      	ldrh	r0, [r7, #14]
 8001f70:	f7ff ff66 	bl	8001e40 <LCD_DisplayChar>
        pString++;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
        Xstart += Font_Width;
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	89fb      	ldrh	r3, [r7, #14]
 8001f80:	4413      	add	r3, r2
 8001f82:	81fb      	strh	r3, [r7, #14]
    while (*pString != '\0') {
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1db      	bne.n	8001f44 <LCD_DisplayString+0x20>
    }
}
 8001f8c:	e000      	b.n	8001f90 <LCD_DisplayString+0x6c>
            break; // Wyjście z pętli, jeśli przekroczy wysokość ekranu
 8001f8e:	bf00      	nop
}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LCD_DrawLine>:
    }
}*/

void LCD_DrawLine ( int Xstart, int Ystart,
					int Xend, int Yend,
					uint16_t color){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]


	int Xpoint = Xstart;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int Ypoint = Ystart;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
	int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfb8      	it	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	623b      	str	r3, [r7, #32]
	int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bfb8      	it	lt
 8001fc6:	425b      	neglt	r3, r3
 8001fc8:	425b      	negs	r3, r3
 8001fca:	61fb      	str	r3, [r7, #28]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	da01      	bge.n	8001fd8 <LCD_DrawLine+0x40>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e001      	b.n	8001fdc <LCD_DrawLine+0x44>
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fdc:	61bb      	str	r3, [r7, #24]
	int YAddway = Ystart < Yend ? 1 : -1;
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	da01      	bge.n	8001fea <LCD_DrawLine+0x52>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e001      	b.n	8001fee <LCD_DrawLine+0x56>
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	617b      	str	r3, [r7, #20]

	//Cumulative error
	int Esp = dx + dy;
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;){
		//Painted dotted line, 2 point is really virtual

		lcd_put_pixel(Xpoint, Ypoint, color);
 8001ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002000:	f7ff fe76 	bl	8001cf0 <lcd_put_pixel>

        if (2 * Esp >= dy) {
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	429a      	cmp	r2, r3
 800200c:	dc0b      	bgt.n	8002026 <LCD_DrawLine+0x8e>
			if (Xpoint == Xend) break;
 800200e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d019      	beq.n	800204a <LCD_DrawLine+0xb2>
            Esp += dy;
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
			Xpoint += XAddway;
 800201e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4413      	add	r3, r2
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if (2 * Esp <= dx) {
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	6a3a      	ldr	r2, [r7, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbe3      	blt.n	8001ff8 <LCD_DrawLine+0x60>
			if (Ypoint == Yend) break;
 8002030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d00a      	beq.n	800204e <LCD_DrawLine+0xb6>
            Esp += dx;
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	4413      	add	r3, r2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
			Ypoint += YAddway;
 8002040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4413      	add	r3, r2
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
		lcd_put_pixel(Xpoint, Ypoint, color);
 8002048:	e7d6      	b.n	8001ff8 <LCD_DrawLine+0x60>
			if (Xpoint == Xend) break;
 800204a:	bf00      	nop
 800204c:	e000      	b.n	8002050 <LCD_DrawLine+0xb8>
			if (Ypoint == Yend) break;
 800204e:	bf00      	nop
        }
	}
}
 8002050:	bf00      	nop
 8002052:	3730      	adds	r7, #48	; 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <lcd_fill_box>:

void lcd_fill_box(int x1, int y1, int x2, int y2, uint16_t color) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
    // Ensure coordinates are within the screen bounds
    if (x1 < 0) x1 = 0;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da01      	bge.n	8002070 <lcd_fill_box+0x18>
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
    if (y1 < 0) y1 = 0;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	da01      	bge.n	800207a <lcd_fill_box+0x22>
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
    if (x2 >= LCD_WIDTH) x2 = LCD_WIDTH - 1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b9f      	cmp	r3, #159	; 0x9f
 800207e:	dd01      	ble.n	8002084 <lcd_fill_box+0x2c>
 8002080:	239f      	movs	r3, #159	; 0x9f
 8002082:	607b      	str	r3, [r7, #4]
    if (y2 >= LCD_HEIGHT) y2 = LCD_HEIGHT - 1;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b7f      	cmp	r3, #127	; 0x7f
 8002088:	dd01      	ble.n	800208e <lcd_fill_box+0x36>
 800208a:	237f      	movs	r3, #127	; 0x7f
 800208c:	603b      	str	r3, [r7, #0]

    // Iterate over each pixel in the specified rectangle
    for (int x = x1; x <= x2; x++) {
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e012      	b.n	80020ba <lcd_fill_box+0x62>
        for (int y = y1; y <= y2; y++) {
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e008      	b.n	80020ac <lcd_fill_box+0x54>
            lcd_put_pixel(x, y, color);
 800209a:	8c3b      	ldrh	r3, [r7, #32]
 800209c:	461a      	mov	r2, r3
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f7ff fe25 	bl	8001cf0 <lcd_put_pixel>
        for (int y = y1; y <= y2; y++) {
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3301      	adds	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	ddf2      	ble.n	800209a <lcd_fill_box+0x42>
    for (int x = x1; x <= x2; x++) {
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dde8      	ble.n	8002094 <lcd_fill_box+0x3c>
        }
    }
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <lcd_draw_horizontal_line>:

void lcd_draw_horizontal_line(int x, uint16_t color){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
	for(int i = 1; i <= LCD_WIDTH - 1; i++){
 80020d8:	2301      	movs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e00f      	b.n	80020fe <lcd_draw_horizontal_line+0x32>
		if(i % 2 != 0)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <lcd_draw_horizontal_line+0x2c>
			lcd_put_pixel(i, LCD_HEIGHT - x, color);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	4619      	mov	r1, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fdfc 	bl	8001cf0 <lcd_put_pixel>
	for(int i = 1; i <= LCD_WIDTH - 1; i++){
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b9f      	cmp	r3, #159	; 0x9f
 8002102:	ddec      	ble.n	80020de <lcd_draw_horizontal_line+0x12>
	}
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <DrawAxis>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DrawAxis(uint16_t xAxis, uint16_t yAxis, uint16_t color) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	80fb      	strh	r3, [r7, #6]
 8002118:	460b      	mov	r3, r1
 800211a:	80bb      	strh	r3, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < LCD_HEIGHT; i++){
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e008      	b.n	8002138 <DrawAxis+0x2a>
		lcd_put_pixel(yAxis, i, color);
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	887a      	ldrh	r2, [r7, #2]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fddf 	bl	8001cf0 <lcd_put_pixel>
	for(int i = 0; i < LCD_HEIGHT; i++){
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b7f      	cmp	r3, #127	; 0x7f
 800213c:	ddf3      	ble.n	8002126 <DrawAxis+0x18>
	}
	for(int i = Y_AXIS_OFFSET; i <= LCD_WIDTH - Y_AXIS_OFFSET; i++){
 800213e:	2301      	movs	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	e008      	b.n	8002156 <DrawAxis+0x48>
		lcd_put_pixel(i, xAxis, color);
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	4619      	mov	r1, r3
 800214a:	68b8      	ldr	r0, [r7, #8]
 800214c:	f7ff fdd0 	bl	8001cf0 <lcd_put_pixel>
	for(int i = Y_AXIS_OFFSET; i <= LCD_WIDTH - Y_AXIS_OFFSET; i++){
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b9f      	cmp	r3, #159	; 0x9f
 800215a:	ddf3      	ble.n	8002144 <DrawAxis+0x36>
	}

}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <GraphBuffer_Init>:

void GraphBuffer_Init(GraphBuffer *buffer) {
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
    buffer->head = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    int i;
    for (i = 0; i < GRAPH_BUFFOR_SIZE; i++) {
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e007      	b.n	800218c <GraphBuffer_Init+0x26>
        buffer->data[i] = 64;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < GRAPH_BUFFOR_SIZE; i++) {
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b9f      	cmp	r3, #159	; 0x9f
 8002190:	ddf4      	ble.n	800217c <GraphBuffer_Init+0x16>
    }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <MedianBuffer_Init>:

void MedianBuffer_Init(MedianBuffer *buffer){
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	buffer->head = 0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
	int i;
	for (i=0; i < MEDIAN_BUFFOR_SIZE; i++){
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e007      	b.n	80021c4 <MedianBuffer_Init+0x24>
		buffer->data[i] = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	2100      	movs	r1, #0
 80021ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0; i < MEDIAN_BUFFOR_SIZE; i++){
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	ddf4      	ble.n	80021b4 <MedianBuffer_Init+0x14>
	}
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LowPassBuffer_Init>:

void LowPassBuffer_Init(LowPassFilter *buffer){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	buffer->head = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac
	int i;
	for (i=0; i < LOWPASS_FILTER_SIZE; i++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e007      	b.n	80021fe <LowPassBuffer_Init+0x26>
		buffer->data[i] = 0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	2100      	movs	r1, #0
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0; i < LOWPASS_FILTER_SIZE; i++){
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8002204:	ddf3      	ble.n	80021ee <LowPassBuffer_Init+0x16>
	}
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <GraphBuffer_Add>:


void GraphBuffer_Add(GraphBuffer *buffer, int value) {
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->head] = value;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    buffer->head = (buffer->head + 1) % GRAPH_BUFFOR_SIZE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <GraphBuffer_Add+0x48>)
 8002236:	fb83 2301 	smull	r2, r3, r3, r1
 800223a:	119a      	asrs	r2, r3, #6
 800223c:	17cb      	asrs	r3, r1, #31
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	1aca      	subs	r2, r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	66666667 	.word	0x66666667

08002260 <QRSBuffer_Add>:

void QRSBuffer_Add(QRSBuffer *buffer, int value) {
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->head] = value;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    buffer->head = (buffer->head + 1) % QRS_BUFFOR_SIZE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <QRSBuffer_Add+0x48>)
 8002282:	fb83 1302 	smull	r1, r3, r3, r2
 8002286:	1159      	asrs	r1, r3, #5
 8002288:	17d3      	asrs	r3, r2, #31
 800228a:	1acb      	subs	r3, r1, r3
 800228c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	f8c2 37d0 	str.w	r3, [r2, #2000]	; 0x7d0
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	10624dd3 	.word	0x10624dd3

080022ac <MedianBuffer_Add>:

void MedianBuffer_Add(MedianBuffer *buffer, int value) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->head] = value;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    buffer->head = (buffer->head + 1) % MEDIAN_BUFFOR_SIZE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MedianBuffer_Add+0x40>)
 80022ca:	fb83 2301 	smull	r2, r3, r3, r1
 80022ce:	105a      	asrs	r2, r3, #1
 80022d0:	17cb      	asrs	r3, r1, #31
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	1aca      	subs	r2, r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	615a      	str	r2, [r3, #20]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	66666667 	.word	0x66666667

080022f0 <LowPassBuffer_Add>:

void LowPassBuffer_Add(LowPassFilter *buffer, int value) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->head] = value;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 27ac 	ldr.w	r2, [r3, #1964]	; 0x7ac
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    buffer->head = (buffer->head + 1) % LOWPASS_FILTER_SIZE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 37ac 	ldr.w	r3, [r3, #1964]	; 0x7ac
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <LowPassBuffer_Add+0x48>)
 8002312:	fb83 1302 	smull	r1, r3, r3, r2
 8002316:	11d9      	asrs	r1, r3, #7
 8002318:	17d3      	asrs	r3, r2, #31
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	f240 11eb 	movw	r1, #491	; 0x1eb
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	f8c2 37ac 	str.w	r3, [r2, #1964]	; 0x7ac
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	42bcbdc9 	.word	0x42bcbdc9

0800233c <bubbleSort>:

void bubbleSort(int32_t *arr, int32_t size) {
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; i < size-1; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e034      	b.n	80023b6 <bubbleSort+0x7a>
        for (j = 0; j < size-i-1; j++)
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e027      	b.n	80023a2 <bubbleSort+0x66>
            if (arr[j] > arr[j+1]) {
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	3301      	adds	r3, #1
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	440b      	add	r3, r1
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	dd17      	ble.n	800239c <bubbleSort+0x60>
                // Zamiana miejscami arr[j] i arr[j+1]
                int temp = arr[j];
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
                arr[j] = arr[j+1];
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3301      	adds	r3, #1
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	441a      	add	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	440b      	add	r3, r1
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	601a      	str	r2, [r3, #0]
                arr[j+1] = temp;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3301      	adds	r3, #1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]
        for (j = 0; j < size-i-1; j++)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	3301      	adds	r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dbd0      	blt.n	8002352 <bubbleSort+0x16>
    for (i = 0; i < size-1; i++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbc5      	blt.n	800234c <bubbleSort+0x10>
            }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <get_median>:

int32_t get_median(int32_t *arr, int32_t size){ return arr[ (size/2) + 1 ]; }
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	0fda      	lsrs	r2, r3, #31
 80023dc:	4413      	add	r3, r2
 80023de:	105b      	asrs	r3, r3, #1
 80023e0:	3301      	adds	r3, #1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <filter_median>:

int32_t filter_median(int32_t new_data){
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	int32_t tmp_array[MEDIAN_BUFFOR_SIZE];
	int32_t out = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]

	MedianBuffer_Add(&mBuffer, new_data);
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <filter_median+0x48>)
 8002408:	f7ff ff50 	bl	80022ac <MedianBuffer_Add>

	memcpy(tmp_array, mBuffer.data, sizeof(tmp_array));
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <filter_median+0x48>)
 800240e:	f107 0408 	add.w	r4, r7, #8
 8002412:	461d      	mov	r5, r3
 8002414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	6023      	str	r3, [r4, #0]
	bubbleSort(tmp_array, MEDIAN_BUFFOR_SIZE);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	2105      	movs	r1, #5
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff8a 	bl	800233c <bubbleSort>

	out = get_median(tmp_array, MEDIAN_BUFFOR_SIZE);
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	2105      	movs	r1, #5
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffcd 	bl	80023ce <get_median>
 8002434:	61f8      	str	r0, [r7, #28]

	return out;
 8002436:	69fb      	ldr	r3, [r7, #28]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bdb0      	pop	{r4, r5, r7, pc}
 8002440:	2000e264 	.word	0x2000e264

08002444 <LPFilter>:

int32_t LPFilter(int32_t new_data){
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	LowPassBuffer_Add(&LowPass, new_data);
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4823      	ldr	r0, [pc, #140]	; (80024dc <LPFilter+0x98>)
 8002450:	f7ff ff4e 	bl	80022f0 <LowPassBuffer_Add>

	double output = 0;
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = LowPass.head;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <LPFilter+0x98>)
 8002462:	f8d3 37ac 	ldr.w	r3, [r3, #1964]	; 0x7ac
 8002466:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < LOWPASS_FILTER_SIZE; ++i) {
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	e028      	b.n	80024c0 <LPFilter+0x7c>
	    index = index != 0 ? index - 1 : LOWPASS_FILTER_SIZE - 1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <LPFilter+0x36>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b01      	subs	r3, #1
 8002478:	e001      	b.n	800247e <LPFilter+0x3a>
 800247a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 800247e:	60fb      	str	r3, [r7, #12]
	    output += filter_coefficients[i] * LowPass.data[index];
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <LPFilter+0x9c>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	e9d3 4500 	ldrd	r4, r5, [r3]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <LPFilter+0x98>)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f845 	bl	8000524 <__aeabi_i2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fe f8a9 	bl	80005f8 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ae:	f7fd feed 	bl	800028c <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < LOWPASS_FILTER_SIZE; ++i) {
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3301      	adds	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80024c6:	ddd2      	ble.n	800246e <LPFilter+0x2a>
	}

	    return output;
 80024c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024cc:	f7fe fb44 	bl	8000b58 <__aeabi_d2iz>
 80024d0:	4603      	mov	r3, r0

}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000e27c 	.word	0x2000e27c
 80024e0:	20000300 	.word	0x20000300

080024e4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	1a8a      	subs	r2, r1, r2
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1acb      	subs	r3, r1, r3
 8002508:	fb92 f2f3 	sdiv	r2, r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4413      	add	r3, r2
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <__io_putchar>:

int __io_putchar(int ch)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b0a      	cmp	r3, #10
 8002528:	d102      	bne.n	8002530 <__io_putchar+0x14>
    __io_putchar('\r');
 800252a:	200d      	movs	r0, #13
 800252c:	f7ff fff6 	bl	800251c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002530:	1d39      	adds	r1, r7, #4
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	2201      	movs	r2, #1
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <__io_putchar+0x2c>)
 800253a:	f006 fb07 	bl	8008b4c <HAL_UART_Transmit>

  return 1;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000ed5c 	.word	0x2000ed5c
 800254c:	00000000 	.word	0x00000000

08002550 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af02      	add	r7, sp, #8
 8002556:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a9f      	ldr	r2, [pc, #636]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800255c:	4293      	cmp	r3, r2
 800255e:	f040 833b 	bne.w	8002bd8 <HAL_TIM_PeriodElapsedCallback+0x688>

	  	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002562:	217f      	movs	r1, #127	; 0x7f
 8002564:	489d      	ldr	r0, [pc, #628]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002566:	f002 fc6b 	bl	8004e40 <HAL_ADCEx_Calibration_Start>
	  	  HAL_ADC_Start(&hadc1);
 800256a:	489c      	ldr	r0, [pc, #624]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800256c:	f001 fe76 	bl	800425c <HAL_ADC_Start>

	  	  value = HAL_ADC_GetValue(&hadc1);	// 25 cycles
 8002570:	489a      	ldr	r0, [pc, #616]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002572:	f001 ff2d 	bl	80043d0 <HAL_ADC_GetValue>
 8002576:	4603      	mov	r3, r0
 8002578:	4a99      	ldr	r2, [pc, #612]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800257a:	6013      	str	r3, [r2, #0]





	  	  LPvalue = LPFilter(value);
 800257c:	4b98      	ldr	r3, [pc, #608]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5f 	bl	8002444 <LPFilter>
 8002586:	4603      	mov	r3, r0
 8002588:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800258a:	6013      	str	r3, [r2, #0]


	  	  filteredValue = (1 - alpha) * LPvalue + alpha * filteredValue;
 800258c:	eddf 7a96 	vldr	s15, [pc, #600]	; 80027e8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8002590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80027e8 <HAL_TIM_PeriodElapsedCallback+0x298>
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80025bc:	edc3 7a00 	vstr	s15, [r3]


	  	 // DWT->CYCCNT = 0;
	  	  median_filtered_value = filter_median(filteredValue);
 80025c0:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 0a90 	vmov	r0, s15
 80025ce:	f7ff ff13 	bl	80023f8 <filter_median>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a86      	ldr	r2, [pc, #536]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80025d6:	6013      	str	r3, [r2, #0]


	  	  derivativeBuffer.previous =  derivativeBuffer.current;
 80025d8:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025da:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 80025de:	4a85      	ldr	r2, [pc, #532]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025e0:	f8c2 37d4 	str.w	r3, [r2, #2004]	; 0x7d4
	  	  derivativeBuffer.current =  derivativeBuffer.next;
 80025e4:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025e6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 80025ea:	4a82      	ldr	r2, [pc, #520]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025ec:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
	  	  derivativeBuffer.next = median_filtered_value;
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7f      	ldr	r2, [pc, #508]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025f6:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc


	  	  derivative = abs(derivativeBuffer.next - derivativeBuffer.previous);
 80025fa:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80025fc:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8002600:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002602:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	; 0x7d4
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bfb8      	it	lt
 800260c:	425b      	neglt	r3, r3
 800260e:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002610:	6013      	str	r3, [r2, #0]
	  	  if(derivative < 30)
 8002612:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b1d      	cmp	r3, #29
 8002618:	dc02      	bgt.n	8002620 <HAL_TIM_PeriodElapsedCallback+0xd0>
	  		  derivative = 0;
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]


	  	  TestValue = map(median_filtered_value, 0, 4096, 0, 128);
 8002620:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2300      	movs	r3, #0
 800262a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262e:	2100      	movs	r1, #0
 8002630:	f7ff ff58 	bl	80024e4 <map>
 8002634:	4603      	mov	r3, r0
 8002636:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002638:	6013      	str	r3, [r2, #0]
	  	  TestValue2 = map(value, 0, 4096, 0, 128);
 800263a:	4b69      	ldr	r3, [pc, #420]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800264a:	2100      	movs	r1, #0
 800264c:	f7ff ff4a 	bl	80024e4 <map>
 8002650:	4603      	mov	r3, r0
 8002652:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002654:	6013      	str	r3, [r2, #0]
	  	  printf("%ld,%ld\n", TestValue, TestValue2);
 8002656:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a69      	ldr	r2, [pc, #420]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	4619      	mov	r1, r3
 8002660:	4868      	ldr	r0, [pc, #416]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002662:	f00a ff6f 	bl	800d544 <iprintf>


	  	  QRSBuffer_Add(&derivativeBuffer, derivative);
 8002666:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	4861      	ldr	r0, [pc, #388]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800266e:	f7ff fdf7 	bl	8002260 <QRSBuffer_Add>

	  	  rescaled_value = map(median_filtered_value, 0, 4096, 0, 128);
 8002672:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002680:	2100      	movs	r1, #0
 8002682:	f7ff ff2f 	bl	80024e4 <map>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800268c:	601a      	str	r2, [r3, #0]


	  	  //###################################### PROCES WYKRYWANIA QRS ######################################

	  	  switch(Stan_algorytmu){
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b04      	cmp	r3, #4
 8002694:	f200 820b 	bhi.w	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026d9 	.word	0x080026d9
 80026a4:	08002763 	.word	0x08002763
 80026a8:	0800282d 	.word	0x0800282d
 80026ac:	08002a35 	.word	0x08002a35
 80026b0:	080026b5 	.word	0x080026b5

	  	  case WAIT_ON_START:
	  		  if(waiting_time < WAITING){
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026bc:	da05      	bge.n	80026ca <HAL_TIM_PeriodElapsedCallback+0x17a>
	  			  waiting_time++;
 80026be:	4b54      	ldr	r3, [pc, #336]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026c6:	6013      	str	r3, [r2, #0]
	  		  }
	  		  else{
	  			  waiting_time = 0;
	  			  Stan_algorytmu = INIT;
	  		  }
	  		  break;
 80026c8:	e1f1      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
	  			  waiting_time = 0;
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
	  			  Stan_algorytmu = INIT;
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
	  		  break;
 80026d6:	e1ea      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>

	  	  case INIT:

	  		  if(init_samples < QRS_SETUP){
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e0:	da1e      	bge.n	8002720 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		  		  if((max_value < derivativeBuffer.data[derivativeBuffer.head - 1]) && (derivativeBuffer.head != 0)){
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80026e4:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 80026e8:	3b01      	subs	r3, #1
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80026ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dd0d      	ble.n	8002714 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 80026f8:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80026fa:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		  			max_value = derivativeBuffer.data[derivativeBuffer.head - 1];
 8002702:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002704:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8002708:	3b01      	subs	r3, #1
 800270a:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	4a41      	ldr	r2, [pc, #260]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002712:	6013      	str	r3, [r2, #0]
		  		  }


		  		  init_samples++;
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a3e      	ldr	r2, [pc, #248]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800271c:	6013      	str	r3, [r2, #0]
	  			  init_samples = 0;
	  			  init_phase = 1;
	  			  Stan_algorytmu = TRESHOLD_SEARCH;
	  		  }

	  		  break;
 800271e:	e1c6      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
	  			  QRS_prop.treshold = max_value * TRESHOLD_MULT;
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fefd 	bl	8000524 <__aeabi_i2d>
 800272a:	a329      	add	r3, pc, #164	; (adr r3, 80027d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fd ff62 	bl	80005f8 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa0c 	bl	8000b58 <__aeabi_d2iz>
 8002740:	4603      	mov	r3, r0
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  			  max_value = 0;
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
	  			  init_samples = 0;
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
	  			  init_phase = 1;
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
	  			  Stan_algorytmu = TRESHOLD_SEARCH;
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002760:	e1a5      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>

	  	  case TRESHOLD_SEARCH:

	  		  if((derivativeBuffer.data[derivativeBuffer.head - 1] >= QRS_prop.treshold) && (derivativeBuffer.head != 0)){
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002764:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8002768:	3b01      	subs	r3, #1
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800276c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	429a      	cmp	r2, r3
 8002778:	db22      	blt.n	80027c0 <HAL_TIM_PeriodElapsedCallback+0x270>
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800277c:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01d      	beq.n	80027c0 <HAL_TIM_PeriodElapsedCallback+0x270>
	  			QRS_prop.S1[s1_head] = derivativeBuffer.data[derivativeBuffer.head - 1];
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002786:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 800278a:	1e5a      	subs	r2, r3, #1
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4918      	ldr	r1, [pc, #96]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002792:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002796:	4921      	ldr	r1, [pc, #132]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002798:	3318      	adds	r3, #24
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	  			if(s1_head < QRS_INIT_ITERATIONS - 1){
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	dc05      	bgt.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0x262>
	  			  s1_head++;
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e002      	b.n	80027b8 <HAL_TIM_PeriodElapsedCallback+0x268>
	  			}
	  			else{
	  			  s1_head = 0;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	  			}

	  			Stan_algorytmu = MAXIMUM_SEARCH;
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80027ba:	2202      	movs	r2, #2
 80027bc:	701a      	strb	r2, [r3, #0]

	  		    RR++;

	  		  }

	  		  break;
 80027be:	e176      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
	  		    RR++;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80027c8:	6013      	str	r3, [r2, #0]
	  		  break;
 80027ca:	e170      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
 80027cc:	f3af 8000 	nop.w
 80027d0:	66666666 	.word	0x66666666
 80027d4:	3fe66666 	.word	0x3fe66666
 80027d8:	2000ecc4 	.word	0x2000ecc4
 80027dc:	2000146c 	.word	0x2000146c
 80027e0:	2000da70 	.word	0x2000da70
 80027e4:	2000ea2c 	.word	0x2000ea2c
 80027e8:	3f333333 	.word	0x3f333333
 80027ec:	2000da78 	.word	0x2000da78
 80027f0:	2000e260 	.word	0x2000e260
 80027f4:	2000da7c 	.word	0x2000da7c
 80027f8:	2000e25c 	.word	0x2000e25c
 80027fc:	2000eb84 	.word	0x2000eb84
 8002800:	2000eb88 	.word	0x2000eb88
 8002804:	0800f840 	.word	0x0800f840
 8002808:	2000da74 	.word	0x2000da74
 800280c:	20001259 	.word	0x20001259
 8002810:	2000eb00 	.word	0x2000eb00
 8002814:	2000eb08 	.word	0x2000eb08
 8002818:	2000eb0c 	.word	0x2000eb0c
 800281c:	2000ea34 	.word	0x2000ea34
 8002820:	2000eb04 	.word	0x2000eb04
 8002824:	2000eb14 	.word	0x2000eb14
 8002828:	2000eb18 	.word	0x2000eb18

	  	  case MAXIMUM_SEARCH:

	  		  if(sample_num < WINDOW_SEARCH){
 800282c:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b27      	cmp	r3, #39	; 0x27
 8002832:	dc3b      	bgt.n	80028ac <HAL_TIM_PeriodElapsedCallback+0x35c>
	  			  if((derivativeBuffer.data[derivativeBuffer.head - 1] >= QRS_prop.S1[s1_head]) && (derivativeBuffer.head != 0)){
 8002834:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002836:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 800283a:	3b01      	subs	r3, #1
 800283c:	4a89      	ldr	r2, [pc, #548]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800283e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002842:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4989      	ldr	r1, [pc, #548]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002848:	3318      	adds	r3, #24
 800284a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800284e:	429a      	cmp	r2, r3
 8002850:	db21      	blt.n	8002896 <HAL_TIM_PeriodElapsedCallback+0x346>
 8002852:	4b84      	ldr	r3, [pc, #528]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002854:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <HAL_TIM_PeriodElapsedCallback+0x346>
	  				  if((RR < 700) || (RR >= 0)){		//zabezpieczenie przed przekraczaniem zbyt dużych wartosci
 800285c:	4b84      	ldr	r3, [pc, #528]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002864:	db03      	blt.n	800286e <HAL_TIM_PeriodElapsedCallback+0x31e>
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db13      	blt.n	8002896 <HAL_TIM_PeriodElapsedCallback+0x346>
	  	  				QRS_prop.M[m_value_head] = RR;
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7f      	ldr	r2, [pc, #508]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	497d      	ldr	r1, [pc, #500]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  				QRS_prop.M_value[m_value_head] = derivativeBuffer.data[derivativeBuffer.head - 1];
 800287c:	4b79      	ldr	r3, [pc, #484]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800287e:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4976      	ldr	r1, [pc, #472]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800288a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800288e:	4977      	ldr	r1, [pc, #476]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002890:	330c      	adds	r3, #12
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  				  }
	  			  }

	  			  RR++;
 8002896:	4b76      	ldr	r3, [pc, #472]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	4a74      	ldr	r2, [pc, #464]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800289e:	6013      	str	r3, [r2, #0]
	  			  sample_num++;
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80028a8:	6013      	str	r3, [r2, #0]

	  				  m_value_head = 0;
	  				  Stan_algorytmu = RELAX;
	  			  }
	  		  }
	  		  break;
 80028aa:	e100      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
	  			  QRS_prop.intervals[intervals_head] = QRS_prop.M[m_value_head];		//wpisanie znalezionej wartosci RR do tablicy intervals
 80028ac:	4b71      	ldr	r3, [pc, #452]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	496d      	ldr	r1, [pc, #436]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80028b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028ba:	496c      	ldr	r1, [pc, #432]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80028bc:	3324      	adds	r3, #36	; 0x24
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	605a      	str	r2, [r3, #4]
	  			  if(intervals_head < QRS_INIT_ITERATIONS - 1){
 80028c4:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b0a      	cmp	r3, #10
 80028ca:	dc05      	bgt.n	80028d8 <HAL_TIM_PeriodElapsedCallback+0x388>
	  				intervals_head++;
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e002      	b.n	80028de <HAL_TIM_PeriodElapsedCallback+0x38e>
	  				  intervals_head = 0;
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	  			  sample_num = 0;
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
	  			  if(m_value_head < QRS_INIT_ITERATIONS - 1){
 80028e4:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b0a      	cmp	r3, #10
 80028ea:	dc05      	bgt.n	80028f8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
	  				m_value_head++;
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028f4:	6013      	str	r3, [r2, #0]
	  		  break;
 80028f6:	e0da      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>
	  				  max_avarage = 0;
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
	  				  for(i = 0; i < QRS_INIT_ITERATIONS; i++){
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e00c      	b.n	800291e <HAL_TIM_PeriodElapsedCallback+0x3ce>
	  					  max_avarage += QRS_prop.M_value[i];
 8002904:	4a59      	ldr	r2, [pc, #356]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	330c      	adds	r3, #12
 800290a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002916:	6013      	str	r3, [r2, #0]
	  				  for(i = 0; i < QRS_INIT_ITERATIONS; i++){
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b0b      	cmp	r3, #11
 8002922:	ddef      	ble.n	8002904 <HAL_TIM_PeriodElapsedCallback+0x3b4>
	  				  max_avarage = max_avarage / QRS_INIT_ITERATIONS;
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800292a:	fb82 1203 	smull	r1, r2, r2, r3
 800292e:	1052      	asrs	r2, r2, #1
 8002930:	17db      	asrs	r3, r3, #31
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002936:	6013      	str	r3, [r2, #0]
	  				  QRS_prop.treshold = max_avarage * TRESHOLD_MULT;
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdf1 	bl	8000524 <__aeabi_i2d>
 8002942:	a345      	add	r3, pc, #276	; (adr r3, 8002a58 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe56 	bl	80005f8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f900 	bl	8000b58 <__aeabi_d2iz>
 8002958:	4603      	mov	r3, r0
 800295a:	4a44      	ldr	r2, [pc, #272]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  				  if(RR - QRS_prop.M[m_value_head] < 0){
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4940      	ldr	r1, [pc, #256]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800296a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	da03      	bge.n	800297c <HAL_TIM_PeriodElapsedCallback+0x42c>
	  					  RR = 0;
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e009      	b.n	8002990 <HAL_TIM_PeriodElapsedCallback+0x440>
	  					RR = RR - QRS_prop.M[m_value_head];	//reset RR tak, żeby zawierał już próbki od maximum do końca Window search
 800297c:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002986:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800298e:	6013      	str	r3, [r2, #0]
	  				  intervals_avarage = 0;
 8002990:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
	  				  for(i = 0; i < QRS_INIT_ITERATIONS; i++){
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e00d      	b.n	80029b8 <HAL_TIM_PeriodElapsedCallback+0x468>
	  					intervals_avarage += QRS_prop.intervals[i];
 800299c:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3324      	adds	r3, #36	; 0x24
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80029b0:	6013      	str	r3, [r2, #0]
	  				  for(i = 0; i < QRS_INIT_ITERATIONS; i++){
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b0b      	cmp	r3, #11
 80029bc:	ddee      	ble.n	800299c <HAL_TIM_PeriodElapsedCallback+0x44c>
	  				 intervals_avarage = intervals_avarage / QRS_INIT_ITERATIONS;
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80029c4:	fb82 1203 	smull	r1, r2, r2, r3
 80029c8:	1052      	asrs	r2, r2, #1
 80029ca:	17db      	asrs	r3, r3, #31
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	4a2d      	ldr	r2, [pc, #180]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80029d0:	6013      	str	r3, [r2, #0]
	  				 pulse = (60 * F_SAMPLE) / intervals_avarage;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f247 5230 	movw	r2, #30000	; 0x7530
 80029da:	fb92 f3f3 	sdiv	r3, r2, r3
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80029e0:	6013      	str	r3, [r2, #0]
	  				 if(init_phase != 0){
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01d      	beq.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x4d6>
		  				 if(pulse > max_pulse){
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dd03      	ble.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x4ae>
		  					 max_pulse = pulse;
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80029fc:	6013      	str	r3, [r2, #0]
		  				 if(pulse < min_pulse){
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	da04      	bge.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x4c4>
		  					 min_pulse = pulse;
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x4d6>
		  				 else if(min_pulse == -1){
 8002a14:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d103      	bne.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x4d6>
		  					 min_pulse = pulse;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002a24:	6013      	str	r3, [r2, #0]
	  				  m_value_head = 0;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
	  				  Stan_algorytmu = RELAX;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002a2e:	2203      	movs	r2, #3
 8002a30:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002a32:	e03c      	b.n	8002aae <HAL_TIM_PeriodElapsedCallback+0x55e>

	  	  case RELAX:

	  		  if(sample_skip < SKIP_VALUE){
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b4f      	cmp	r3, #79	; 0x4f
 8002a3a:	dc31      	bgt.n	8002aa0 <HAL_TIM_PeriodElapsedCallback+0x550>
	  			  sample_skip++;
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002a44:	6013      	str	r3, [r2, #0]
	  			  RR++;
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002a4e:	6013      	str	r3, [r2, #0]
	  		  else{
	  			  sample_skip = 0;
	  			  Stan_algorytmu = TRESHOLD_SEARCH;
	  		  }

	  		  break;
 8002a50:	e02c      	b.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x55c>
 8002a52:	bf00      	nop
 8002a54:	f3af 8000 	nop.w
 8002a58:	66666666 	.word	0x66666666
 8002a5c:	3fe66666 	.word	0x3fe66666
 8002a60:	2000eb1c 	.word	0x2000eb1c
 8002a64:	2000da7c 	.word	0x2000da7c
 8002a68:	2000eb14 	.word	0x2000eb14
 8002a6c:	2000ea34 	.word	0x2000ea34
 8002a70:	2000eb18 	.word	0x2000eb18
 8002a74:	2000eb10 	.word	0x2000eb10
 8002a78:	2000eb20 	.word	0x2000eb20
 8002a7c:	2000eb2c 	.word	0x2000eb2c
 8002a80:	2aaaaaab 	.word	0x2aaaaaab
 8002a84:	2000eb30 	.word	0x2000eb30
 8002a88:	2000eb24 	.word	0x2000eb24
 8002a8c:	2000eb04 	.word	0x2000eb04
 8002a90:	2000eb34 	.word	0x2000eb34
 8002a94:	2000125c 	.word	0x2000125c
 8002a98:	20001259 	.word	0x20001259
 8002a9c:	2000eb28 	.word	0x2000eb28
	  			  sample_skip = 0;
 8002aa0:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
	  			  Stan_algorytmu = TRESHOLD_SEARCH;
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002aac:	bf00      	nop
	  	  }

	  	  //###################################### KONIEC PROCESU WYKRYWANIA QRS ######################################


	  	  GraphBuffer_Add(&graphBuffer,  rescaled_value);
 8002aae:	4b97      	ldr	r3, [pc, #604]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4896      	ldr	r0, [pc, #600]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8002ab6:	f7ff fbad 	bl	8002214 <GraphBuffer_Add>
	  	  if(abs(rescaled_value - data_new) < 2){
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a95      	ldr	r2, [pc, #596]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	db0d      	blt.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x596>
 8002aca:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a91      	ldr	r2, [pc, #580]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	dc06      	bgt.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x596>
	  		GraphBuffer_Add(&ZoomedOutGraphBuffer, data_new);
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	488e      	ldr	r0, [pc, #568]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8002ae0:	f7ff fb98 	bl	8002214 <GraphBuffer_Add>
 8002ae4:	e00a      	b.n	8002afc <HAL_TIM_PeriodElapsedCallback+0x5ac>

	  	  }
	  	  else{
	  		GraphBuffer_Add(&ZoomedOutGraphBuffer, rescaled_value);
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4619      	mov	r1, r3
 8002aec:	488a      	ldr	r0, [pc, #552]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8002aee:	f7ff fb91 	bl	8002214 <GraphBuffer_Add>
	  		data_new = rescaled_value;
 8002af2:	4b86      	ldr	r3, [pc, #536]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8002afa:	601a      	str	r2, [r3, #0]
	  	  }



	  	  if(init_phase != 0){
 8002afc:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d025      	beq.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x600>
		  	  if(rescaled_value > max_adc_value){
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d90a      	bls.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x5d6>
		  		  lcd_draw_horizontal_line(max_adc_value, BLACK);
 8002b10:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fad8 	bl	80020cc <lcd_draw_horizontal_line>
		  		  max_adc_value = rescaled_value;
 8002b1c:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002b24:	601a      	str	r2, [r3, #0]
		  	  }

		  	  if(rescaled_value < min_adc_value && rescaled_value != 0){
 8002b26:	4b79      	ldr	r3, [pc, #484]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d20e      	bcs.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x600>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_TIM_PeriodElapsedCallback+0x600>
		  		  lcd_draw_horizontal_line(min_adc_value, BLACK);
 8002b3a:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fac3 	bl	80020cc <lcd_draw_horizontal_line>
		  		  min_adc_value = rescaled_value;
 8002b46:	4b71      	ldr	r3, [pc, #452]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002b4e:	601a      	str	r2, [r3, #0]
	  	  }




	  	  char txtToSD[8] = {0,0,0,0,0,0,0,0};	// 21 cycles
 8002b50:	4a75      	ldr	r2, [pc, #468]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b5a:	e883 0003 	stmia.w	r3, {r0, r1}

	  	  sprintf(txtToSD, "%li", rescaled_value);
 8002b5e:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	4971      	ldr	r1, [pc, #452]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00a fcfd 	bl	800d568 <siprintf>


	  	  if(SD_counter != -1){
 8002b6e:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d02d      	beq.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x684>
			  if(++SD_counter < 20000){
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a6c      	ldr	r2, [pc, #432]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	dc19      	bgt.n	8002bc2 <HAL_TIM_PeriodElapsedCallback+0x672>

				f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002b8e:	2213      	movs	r2, #19
 8002b90:	4968      	ldr	r1, [pc, #416]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002b92:	4869      	ldr	r0, [pc, #420]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002b94:	f008 ffc4 	bl	800bb20 <f_open>
				f_lseek(&fil, f_size(&fil));
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4866      	ldr	r0, [pc, #408]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002ba0:	f009 fbc6 	bl	800c330 <f_lseek>
				int o =  f_puts(txtToSD, &fil);
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	4963      	ldr	r1, [pc, #396]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f009 fe5b 	bl	800c866 <f_puts>
 8002bb0:	6138      	str	r0, [r7, #16]
				f_puts(";", &fil);
 8002bb2:	4961      	ldr	r1, [pc, #388]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002bb4:	4861      	ldr	r0, [pc, #388]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002bb6:	f009 fe56 	bl	800c866 <f_puts>
				f_close(&fil);
 8002bba:	485f      	ldr	r0, [pc, #380]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002bbc:	f009 fb8e 	bl	800c2dc <f_close>
 8002bc0:	e008      	b.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x684>
			  }
			  else{
				f_mount(&fs, "", 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	495e      	ldr	r1, [pc, #376]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002bc6:	485f      	ldr	r0, [pc, #380]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002bc8:	f008 ff64 	bl	800ba94 <f_mount>
				SD_counter = -1;
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002bce:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd2:	601a      	str	r2, [r3, #0]
			  }							// 777 cycles

	  	  }


	  	__WFI();	//uśpienie mikrokontrolera
 8002bd4:	bf30      	wfi
  	  HAL_TIM_Base_Start_IT(&htim6);
  	  __WFI();	//uśpienie mikrokontrolera


  }
}
 8002bd6:	e17f      	b.n	8002ed8 <HAL_TIM_PeriodElapsedCallback+0x988>
  else if(htim == &htim7){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f040 817b 	bne.w	8002ed8 <HAL_TIM_PeriodElapsedCallback+0x988>
	  HAL_TIM_Base_Stop_IT(&htim6);
 8002be2:	485a      	ldr	r0, [pc, #360]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002be4:	f005 fcca 	bl	800857c <HAL_TIM_Base_Stop_IT>
  	  DrawAxis(X_AXIS_OFFSET, Y_AXIS_OFFSET, AXIS_COLOR);
 8002be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bec:	2101      	movs	r1, #1
 8002bee:	2040      	movs	r0, #64	; 0x40
 8002bf0:	f7ff fa8d 	bl	800210e <DrawAxis>
  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4956      	ldr	r1, [pc, #344]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002bf8:	4856      	ldr	r0, [pc, #344]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002bfa:	f004 fb5a 	bl	80072b2 <HAL_RTC_GetTime>
  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4955      	ldr	r1, [pc, #340]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002c02:	4854      	ldr	r0, [pc, #336]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002c04:	f004 fbb1 	bl	800736a <HAL_RTC_GetDate>
  	  seconds = time.Seconds;
 8002c08:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002c0a:	789b      	ldrb	r3, [r3, #2]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002c10:	601a      	str	r2, [r3, #0]
  	  minutes = time.Minutes;
 8002c12:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8002c1a:	601a      	str	r2, [r3, #0]
  	  hours = time.Hours;
 8002c1c:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8002c24:	601a      	str	r2, [r3, #0]
  	  sprintf(timer, "0:%d:%d", minutes, seconds);//hours, minutes, seconds);
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	494e      	ldr	r1, [pc, #312]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8002c30:	484e      	ldr	r0, [pc, #312]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002c32:	f00a fc99 	bl	800d568 <siprintf>
  	  sprintf(pulse_tab, "%d", pulse);
 8002c36:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8002c3e:	484e      	ldr	r0, [pc, #312]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002c40:	f00a fc92 	bl	800d568 <siprintf>
  	  sprintf(min_pulse_tab, "min pulse: %d /min", min_pulse);
 8002c44:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8002c4c:	484d      	ldr	r0, [pc, #308]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8002c4e:	f00a fc8b 	bl	800d568 <siprintf>
  	  sprintf(max_pulse_tab, "max pulse: %d /min", max_pulse);
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	494c      	ldr	r1, [pc, #304]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8002c5a:	484d      	ldr	r0, [pc, #308]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8002c5c:	f00a fc84 	bl	800d568 <siprintf>
  	  lcd_fill_box(5, 5, LCD_WIDTH, 25, BACKGROUND_COLOR);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	22a0      	movs	r2, #160	; 0xa0
 8002c68:	2105      	movs	r1, #5
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f7ff f9f4 	bl	8002058 <lcd_fill_box>
  	  LCD_DisplayString(5, 5, timer, WHITE);
 8002c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c74:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002c76:	2105      	movs	r1, #5
 8002c78:	2005      	movs	r0, #5
 8002c7a:	f7ff f953 	bl	8001f24 <LCD_DisplayString>
  	  LCD_DisplayString(5, 15, pulse_tab, WHITE);
 8002c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c82:	4a3d      	ldr	r2, [pc, #244]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002c84:	210f      	movs	r1, #15
 8002c86:	2005      	movs	r0, #5
 8002c88:	f7ff f94c 	bl	8001f24 <LCD_DisplayString>
  	  LCD_DisplayString(40, 5, min_pulse_tab, WHITE);
 8002c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c90:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8002c92:	2105      	movs	r1, #5
 8002c94:	2028      	movs	r0, #40	; 0x28
 8002c96:	f7ff f945 	bl	8001f24 <LCD_DisplayString>
  	  LCD_DisplayString(40, 15, max_pulse_tab, WHITE);
 8002c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9e:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8002ca0:	210f      	movs	r1, #15
 8002ca2:	2028      	movs	r0, #40	; 0x28
 8002ca4:	f7ff f93e 	bl	8001f24 <LCD_DisplayString>
      lcd_draw_horizontal_line(min_adc_value, BLUE);
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fa0b 	bl	80020cc <lcd_draw_horizontal_line>
      lcd_draw_horizontal_line(max_adc_value, RED);
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	21f8      	movs	r1, #248	; 0xf8
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fa05 	bl	80020cc <lcd_draw_horizontal_line>
  	  switch(display_mode){
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80b3 	beq.w	8002e32 <HAL_TIM_PeriodElapsedCallback+0x8e2>
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 80fd 	bne.w	8002ecc <HAL_TIM_PeriodElapsedCallback+0x97c>
  	  		  if (xPos >= 160){
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b9f      	cmp	r3, #159	; 0x9f
 8002cd8:	dd60      	ble.n	8002d9c <HAL_TIM_PeriodElapsedCallback+0x84c>
  	  		  	  xPos = 0;
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  	  		  	  fill_with(BACKGROUND_COLOR);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7ff f85d 	bl	8001da0 <fill_with>
  	  	          lcd_draw_horizontal_line(min_adc_value, BLUE);
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f9ec 	bl	80020cc <lcd_draw_horizontal_line>
  	  	          lcd_draw_horizontal_line(max_adc_value, RED);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	21f8      	movs	r1, #248	; 0xf8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9e6 	bl	80020cc <lcd_draw_horizontal_line>
  	  		  break;
 8002d00:	e0e4      	b.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x97c>
 8002d02:	bf00      	nop
 8002d04:	2000eb28 	.word	0x2000eb28
 8002d08:	20001259 	.word	0x20001259
 8002d0c:	2000da74 	.word	0x2000da74
 8002d10:	2000d568 	.word	0x2000d568
 8002d14:	2000eb68 	.word	0x2000eb68
 8002d18:	2000d7ec 	.word	0x2000d7ec
 8002d1c:	2000eb04 	.word	0x2000eb04
 8002d20:	2000eb80 	.word	0x2000eb80
 8002d24:	20001264 	.word	0x20001264
 8002d28:	0800f898 	.word	0x0800f898
 8002d2c:	0800f84c 	.word	0x0800f84c
 8002d30:	2000d564 	.word	0x2000d564
 8002d34:	0800f850 	.word	0x0800f850
 8002d38:	2000c510 	.word	0x2000c510
 8002d3c:	0800f85c 	.word	0x0800f85c
 8002d40:	0800f860 	.word	0x0800f860
 8002d44:	2000b4d8 	.word	0x2000b4d8
 8002d48:	2000ed10 	.word	0x2000ed10
 8002d4c:	2000ecc4 	.word	0x2000ecc4
 8002d50:	2000d540 	.word	0x2000d540
 8002d54:	2000eb8c 	.word	0x2000eb8c
 8002d58:	2000d554 	.word	0x2000d554
 8002d5c:	2000d558 	.word	0x2000d558
 8002d60:	2000d55c 	.word	0x2000d55c
 8002d64:	2000d560 	.word	0x2000d560
 8002d68:	0800f864 	.word	0x0800f864
 8002d6c:	2000eb70 	.word	0x2000eb70
 8002d70:	2000eb24 	.word	0x2000eb24
 8002d74:	0800f86c 	.word	0x0800f86c
 8002d78:	2000eb78 	.word	0x2000eb78
 8002d7c:	2000125c 	.word	0x2000125c
 8002d80:	0800f870 	.word	0x0800f870
 8002d84:	2000eb38 	.word	0x2000eb38
 8002d88:	2000eb34 	.word	0x2000eb34
 8002d8c:	0800f884 	.word	0x0800f884
 8002d90:	2000eb50 	.word	0x2000eb50
 8002d94:	20001258 	.word	0x20001258
 8002d98:	20001260 	.word	0x20001260
  	  			  if(ZoomedOutGraphBuffer.head != 0){
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8002d9e:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01b      	beq.n	8002dde <HAL_TIM_PeriodElapsedCallback+0x88e>
  	  				  LCD_DrawLine(xPos - 1, LCD_HEIGHT - ZoomedOutGraphBuffer.data[ZoomedOutGraphBuffer.head - 1], xPos, LCD_HEIGHT - ZoomedOutGraphBuffer.data[ZoomedOutGraphBuffer.head], CHART_COLOR);
 8002da6:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8002dae:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8002db2:	3b01      	subs	r3, #1
 8002db4:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 8002dbe:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8002dc4:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8002dc8:	4c45      	ldr	r4, [pc, #276]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8002dca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002dce:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002dd2:	f24e 0407 	movw	r4, #57351	; 0xe007
 8002dd6:	9400      	str	r4, [sp, #0]
 8002dd8:	f7ff f8de 	bl	8001f98 <LCD_DrawLine>
 8002ddc:	e011      	b.n	8002e02 <HAL_TIM_PeriodElapsedCallback+0x8b2>
  	  				  LCD_DrawLine(xPos - 1, LCD_HEIGHT - data_old, xPos, LCD_HEIGHT - data_new, CHART_COLOR);
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 8002dec:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002df8:	f24e 0407 	movw	r4, #57351	; 0xe007
 8002dfc:	9400      	str	r4, [sp, #0]
 8002dfe:	f7ff f8cb 	bl	8001f98 <LCD_DrawLine>
  	  	    	  LCD_DisplayString(40, 5, min_pulse_tab, WHITE);
 8002e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8002e08:	2105      	movs	r1, #5
 8002e0a:	2028      	movs	r0, #40	; 0x28
 8002e0c:	f7ff f88a 	bl	8001f24 <LCD_DisplayString>
  	  	    	  LCD_DisplayString(40, 15, max_pulse_tab, WHITE);
 8002e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e14:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8002e16:	210f      	movs	r1, #15
 8002e18:	2028      	movs	r0, #40	; 0x28
 8002e1a:	f7ff f883 	bl	8001f24 <LCD_DisplayString>
  	  		  	  data_old = data_new;
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8002e24:	6013      	str	r3, [r2, #0]
  	  		  	  xPos++;
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002e2e:	6013      	str	r3, [r2, #0]
  	  		  break;
 8002e30:	e04c      	b.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x97c>
  	  		  fill_with(BACKGROUND_COLOR);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe ffb4 	bl	8001da0 <fill_with>
  	    	  LCD_DisplayString(5, 5, timer, WHITE);
 8002e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8002e3e:	2105      	movs	r1, #5
 8002e40:	2005      	movs	r0, #5
 8002e42:	f7ff f86f 	bl	8001f24 <LCD_DisplayString>
  	    	  LCD_DisplayString(5, 15, pulse_tab, WHITE);
 8002e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8002e4c:	210f      	movs	r1, #15
 8002e4e:	2005      	movs	r0, #5
 8002e50:	f7ff f868 	bl	8001f24 <LCD_DisplayString>
  	    	  LCD_DisplayString(40, 5, min_pulse_tab, WHITE);
 8002e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8002e5a:	2105      	movs	r1, #5
 8002e5c:	2028      	movs	r0, #40	; 0x28
 8002e5e:	f7ff f861 	bl	8001f24 <LCD_DisplayString>
  	    	  LCD_DisplayString(40, 15, max_pulse_tab, WHITE);
 8002e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e66:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8002e68:	210f      	movs	r1, #15
 8002e6a:	2028      	movs	r0, #40	; 0x28
 8002e6c:	f7ff f85a 	bl	8001f24 <LCD_DisplayString>
  	          lcd_draw_horizontal_line(min_adc_value, BLUE);
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f927 	bl	80020cc <lcd_draw_horizontal_line>
  	          lcd_draw_horizontal_line(max_adc_value, RED);
 8002e7e:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	21f8      	movs	r1, #248	; 0xf8
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f921 	bl	80020cc <lcd_draw_horizontal_line>
  	  		  DrawAxis(X_AXIS_OFFSET, Y_AXIS_OFFSET, AXIS_COLOR);
 8002e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2040      	movs	r0, #64	; 0x40
 8002e92:	f7ff f93c 	bl	800210e <DrawAxis>
  	  		  for(int i = 0, j = Y_AXIS_OFFSET; i < GRAPH_BUFFOR_SIZE - Y_AXIS_OFFSET; i++, j++){
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e011      	b.n	8002ec4 <HAL_TIM_PeriodElapsedCallback+0x974>
  	  			  lcd_put_pixel(j, LCD_HEIGHT - graphBuffer.data[i], CHART_COLOR);								//wykres moze być do góry nogami, zrobienie LCD_HEIGHT - graphbuffor powoduje hard faulta
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002eac:	f24e 0207 	movw	r2, #57351	; 0xe007
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7fe ff1c 	bl	8001cf0 <lcd_put_pixel>
  	  		  for(int i = 0, j = Y_AXIS_OFFSET; i < GRAPH_BUFFOR_SIZE - Y_AXIS_OFFSET; i++, j++){
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b9e      	cmp	r3, #158	; 0x9e
 8002ec8:	ddea      	ble.n	8002ea0 <HAL_TIM_PeriodElapsedCallback+0x950>
  	  		  break;
 8002eca:	bf00      	nop
  	  lcd_copy();//5216 cycles
 8002ecc:	f7fe ff86 	bl	8001ddc <lcd_copy>
  	  HAL_TIM_Base_Start_IT(&htim6);
 8002ed0:	480e      	ldr	r0, [pc, #56]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8002ed2:	f005 fae3 	bl	800849c <HAL_TIM_Base_Start_IT>
  	  __WFI();	//uśpienie mikrokontrolera
 8002ed6:	bf30      	wfi
}
 8002ed8:	bf00      	nop
 8002eda:	3724      	adds	r7, #36	; 0x24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	2000d7ec 	.word	0x2000d7ec
 8002ee4:	20001260 	.word	0x20001260
 8002ee8:	2000eb6c 	.word	0x2000eb6c
 8002eec:	2000eb68 	.word	0x2000eb68
 8002ef0:	2000eb38 	.word	0x2000eb38
 8002ef4:	2000eb50 	.word	0x2000eb50
 8002ef8:	2000eb70 	.word	0x2000eb70
 8002efc:	2000eb78 	.word	0x2000eb78
 8002f00:	20001264 	.word	0x20001264
 8002f04:	2000eb80 	.word	0x2000eb80
 8002f08:	2000d568 	.word	0x2000d568
 8002f0c:	2000ecc4 	.word	0x2000ecc4

08002f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	; 0x30
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	derivativeBuffer.previous = 0;
 8002f16:	4b72      	ldr	r3, [pc, #456]	; (80030e0 <main+0x1d0>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c3 27d4 	str.w	r2, [r3, #2004]	; 0x7d4
	derivativeBuffer.current =  0;
 8002f1e:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <main+0x1d0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
	derivativeBuffer.next =     0;
 8002f26:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <main+0x1d0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f2e:	f000 fdc4 	bl	8003aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f32:	f000 f901 	bl	8003138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f36:	f7fe fd7d 	bl	8001a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f3a:	f7fe f895 	bl	8001068 <MX_DMA_Init>
  MX_SPI2_Init();
 8002f3e:	f000 f9fd 	bl	800333c <MX_SPI2_Init>
  MX_ADC1_Init();
 8002f42:	f7fd ffaf 	bl	8000ea4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002f46:	f000 f9bb 	bl	80032c0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002f4a:	f006 fb57 	bl	80095fc <MX_FATFS_Init>
  MX_TIM6_Init();
 8002f4e:	f000 fc4f 	bl	80037f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002f52:	f000 fc83 	bl	800385c <MX_TIM7_Init>
  MX_RTC_Init();
 8002f56:	f000 f959 	bl	800320c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002f5a:	f000 fcf9 	bl	8003950 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	RTC_TimeTypeDef reset_time;
	reset_time.Hours = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	713b      	strb	r3, [r7, #4]
	reset_time.Minutes = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	717b      	strb	r3, [r7, #5]
	reset_time.Seconds = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	71bb      	strb	r3, [r7, #6]
	HAL_RTC_SetTime(&hrtc, &reset_time, RTC_FORMAT_BIN);
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	485c      	ldr	r0, [pc, #368]	; (80030e4 <main+0x1d4>)
 8002f72:	f004 f901 	bl	8007178 <HAL_RTC_SetTime>

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <main+0x1d8>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	; (80030e8 <main+0x1d8>)
 8002f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f80:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8002f82:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <main+0x1dc>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f88:	4b58      	ldr	r3, [pc, #352]	; (80030ec <main+0x1dc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	; (80030ec <main+0x1dc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8002f94:	f7fe fe2a 	bl	8001bec <lcd_init>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002f98:	217f      	movs	r1, #127	; 0x7f
 8002f9a:	4855      	ldr	r0, [pc, #340]	; (80030f0 <main+0x1e0>)
 8002f9c:	f001 ff50 	bl	8004e40 <HAL_ADCEx_Calibration_Start>
  lcd_copy();
 8002fa0:	f7fe ff1c 	bl	8001ddc <lcd_copy>

  GraphBuffer_Init(&graphBuffer);
 8002fa4:	4853      	ldr	r0, [pc, #332]	; (80030f4 <main+0x1e4>)
 8002fa6:	f7ff f8de 	bl	8002166 <GraphBuffer_Init>
  GraphBuffer_Init(&ZoomedOutGraphBuffer);
 8002faa:	4853      	ldr	r0, [pc, #332]	; (80030f8 <main+0x1e8>)
 8002fac:	f7ff f8db 	bl	8002166 <GraphBuffer_Init>
  MedianBuffer_Init(&mBuffer);
 8002fb0:	4852      	ldr	r0, [pc, #328]	; (80030fc <main+0x1ec>)
 8002fb2:	f7ff f8f5 	bl	80021a0 <MedianBuffer_Init>
  LowPassBuffer_Init(&LowPass);
 8002fb6:	4852      	ldr	r0, [pc, #328]	; (8003100 <main+0x1f0>)
 8002fb8:	f7ff f90e 	bl	80021d8 <LowPassBuffer_Init>


  HAL_TIM_Base_Start_IT(&htim6);
 8002fbc:	4851      	ldr	r0, [pc, #324]	; (8003104 <main+0x1f4>)
 8002fbe:	f005 fa6d 	bl	800849c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002fc2:	4851      	ldr	r0, [pc, #324]	; (8003108 <main+0x1f8>)
 8002fc4:	f005 fa6a 	bl	800849c <HAL_TIM_Base_Start_IT>

  HAL_Delay(500);
 8002fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fcc:	f000 fdea 	bl	8003ba4 <HAL_Delay>
  int x = f_mount(&fs, "", 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	494e      	ldr	r1, [pc, #312]	; (800310c <main+0x1fc>)
 8002fd4:	484e      	ldr	r0, [pc, #312]	; (8003110 <main+0x200>)
 8002fd6:	f008 fd5d 	bl	800ba94 <f_mount>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int y = f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002fde:	2213      	movs	r2, #19
 8002fe0:	494c      	ldr	r1, [pc, #304]	; (8003114 <main+0x204>)
 8002fe2:	484d      	ldr	r0, [pc, #308]	; (8003118 <main+0x208>)
 8002fe4:	f008 fd9c 	bl	800bb20 <f_open>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
  int z = f_lseek(&fil, f_size(&fil));
 8002fec:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <main+0x208>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4849      	ldr	r0, [pc, #292]	; (8003118 <main+0x208>)
 8002ff4:	f009 f99c 	bl	800c330 <f_lseek>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
  int v = f_puts("Hello from Kamil\n", &fil);
 8002ffc:	4946      	ldr	r1, [pc, #280]	; (8003118 <main+0x208>)
 8002ffe:	4847      	ldr	r0, [pc, #284]	; (800311c <main+0x20c>)
 8003000:	f009 fc31 	bl	800c866 <f_puts>
 8003004:	6238      	str	r0, [r7, #32]

  int b = f_close(&fil);
 8003006:	4844      	ldr	r0, [pc, #272]	; (8003118 <main+0x208>)
 8003008:	f009 f968 	bl	800c2dc <f_close>
 800300c:	4603      	mov	r3, r0
 800300e:	61fb      	str	r3, [r7, #28]
  int n = f_mount(&fs, "", 0);
 8003010:	2200      	movs	r2, #0
 8003012:	493e      	ldr	r1, [pc, #248]	; (800310c <main+0x1fc>)
 8003014:	483e      	ldr	r0, [pc, #248]	; (8003110 <main+0x200>)
 8003016:	f008 fd3d 	bl	800ba94 <f_mount>
 800301a:	4603      	mov	r3, r0
 800301c:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 800301e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003022:	483f      	ldr	r0, [pc, #252]	; (8003120 <main+0x210>)
 8003024:	f002 fcd0 	bl	80059c8 <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d152      	bne.n	80030d4 <main+0x1c4>
		  if(display_mode == ZOOM_OUT && already_changed == 0){
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <main+0x214>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d126      	bne.n	8003084 <main+0x174>
 8003036:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <main+0x218>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d122      	bne.n	8003084 <main+0x174>

  	  		  fill_with(BACKGROUND_COLOR);
 800303e:	2000      	movs	r0, #0
 8003040:	f7fe feae 	bl	8001da0 <fill_with>
  	    	  LCD_DisplayString(5, 5, timer, WHITE);
 8003044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003048:	4a38      	ldr	r2, [pc, #224]	; (800312c <main+0x21c>)
 800304a:	2105      	movs	r1, #5
 800304c:	2005      	movs	r0, #5
 800304e:	f7fe ff69 	bl	8001f24 <LCD_DisplayString>
  	    	  LCD_DisplayString(5, 15, pulse_tab, WHITE);
 8003052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003056:	4a36      	ldr	r2, [pc, #216]	; (8003130 <main+0x220>)
 8003058:	210f      	movs	r1, #15
 800305a:	2005      	movs	r0, #5
 800305c:	f7fe ff62 	bl	8001f24 <LCD_DisplayString>

  	  		  DrawAxis(X_AXIS_OFFSET, Y_AXIS_OFFSET, AXIS_COLOR);
 8003060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003064:	2101      	movs	r1, #1
 8003066:	2040      	movs	r0, #64	; 0x40
 8003068:	f7ff f851 	bl	800210e <DrawAxis>
  	  		  lcd_copy();
 800306c:	f7fe feb6 	bl	8001ddc <lcd_copy>
  	  		  xPos = 1;
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <main+0x224>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

			  display_mode = ZOOM_IN;
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <main+0x214>)
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
			  already_changed = 1;
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <main+0x218>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e02a      	b.n	80030da <main+0x1ca>
		  }
		  else if(display_mode == ZOOM_IN && already_changed == 0){
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <main+0x214>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d126      	bne.n	80030da <main+0x1ca>
 800308c:	4b26      	ldr	r3, [pc, #152]	; (8003128 <main+0x218>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d122      	bne.n	80030da <main+0x1ca>

  	  		  fill_with(BACKGROUND_COLOR);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe fe83 	bl	8001da0 <fill_with>
  	    	  LCD_DisplayString(5, 5, timer, WHITE);
 800309a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <main+0x21c>)
 80030a0:	2105      	movs	r1, #5
 80030a2:	2005      	movs	r0, #5
 80030a4:	f7fe ff3e 	bl	8001f24 <LCD_DisplayString>
  	    	  LCD_DisplayString(5, 15, pulse_tab, WHITE);
 80030a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <main+0x220>)
 80030ae:	210f      	movs	r1, #15
 80030b0:	2005      	movs	r0, #5
 80030b2:	f7fe ff37 	bl	8001f24 <LCD_DisplayString>
  	  		  DrawAxis(X_AXIS_OFFSET, Y_AXIS_OFFSET, AXIS_COLOR);
 80030b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ba:	2101      	movs	r1, #1
 80030bc:	2040      	movs	r0, #64	; 0x40
 80030be:	f7ff f826 	bl	800210e <DrawAxis>
  	  		  lcd_copy();
 80030c2:	f7fe fe8b 	bl	8001ddc <lcd_copy>

			  display_mode = ZOOM_OUT;
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <main+0x214>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
			  already_changed = 1;
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <main+0x218>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e002      	b.n	80030da <main+0x1ca>
		  }
	  }
	  else{
		  already_changed = 0;
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <main+0x218>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
	  }
	  __WFI();
 80030da:	bf30      	wfi
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80030dc:	e79f      	b.n	800301e <main+0x10e>
 80030de:	bf00      	nop
 80030e0:	2000da7c 	.word	0x2000da7c
 80030e4:	2000eb8c 	.word	0x2000eb8c
 80030e8:	e000edf0 	.word	0xe000edf0
 80030ec:	e0001000 	.word	0xe0001000
 80030f0:	2000146c 	.word	0x2000146c
 80030f4:	2000d568 	.word	0x2000d568
 80030f8:	2000d7ec 	.word	0x2000d7ec
 80030fc:	2000e264 	.word	0x2000e264
 8003100:	2000e27c 	.word	0x2000e27c
 8003104:	2000ecc4 	.word	0x2000ecc4
 8003108:	2000ed10 	.word	0x2000ed10
 800310c:	0800f860 	.word	0x0800f860
 8003110:	2000b4d8 	.word	0x2000b4d8
 8003114:	0800f850 	.word	0x0800f850
 8003118:	2000c510 	.word	0x2000c510
 800311c:	0800f8a0 	.word	0x0800f8a0
 8003120:	48000800 	.word	0x48000800
 8003124:	20001258 	.word	0x20001258
 8003128:	2000ea30 	.word	0x2000ea30
 800312c:	2000eb70 	.word	0x2000eb70
 8003130:	2000eb78 	.word	0x2000eb78
 8003134:	20001260 	.word	0x20001260

08003138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b096      	sub	sp, #88	; 0x58
 800313c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	2244      	movs	r2, #68	; 0x44
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f00a fa71 	bl	800d62e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800314c:	463b      	mov	r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800315a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800315e:	f002 fc71 	bl	8005a44 <HAL_PWREx_ControlVoltageScaling>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003168:	f000 f84a 	bl	8003200 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800316c:	2318      	movs	r3, #24
 800316e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003170:	2301      	movs	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003174:	2301      	movs	r3, #1
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800317c:	2360      	movs	r3, #96	; 0x60
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	2302      	movs	r3, #2
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003184:	2301      	movs	r3, #1
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003188:	2301      	movs	r3, #1
 800318a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800318c:	2328      	movs	r3, #40	; 0x28
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003190:	2307      	movs	r3, #7
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003194:	2302      	movs	r3, #2
 8003196:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003198:	2302      	movs	r3, #2
 800319a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fca5 	bl	8005af0 <HAL_RCC_OscConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80031ac:	f000 f828 	bl	8003200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b0:	230f      	movs	r3, #15
 80031b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b4:	2303      	movs	r3, #3
 80031b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031c4:	463b      	mov	r3, r7
 80031c6:	2104      	movs	r1, #4
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 f86d 	bl	80062a8 <HAL_RCC_ClockConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80031d4:	f000 f814 	bl	8003200 <Error_Handler>
  }
}
 80031d8:	bf00      	nop
 80031da:	3758      	adds	r7, #88	; 0x58
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_SPI_TxCpltCallback+0x1c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 80031f0:	f7fe fe1a 	bl	8001e28 <lcd_transfer_done>
	}
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	2000ec14 	.word	0x2000ec14

08003200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003208:	e7fe      	b.n	8003208 <Error_Handler+0x8>
	...

0800320c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <MX_RTC_Init+0x48>)
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <MX_RTC_Init+0x4c>)
 8003214:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_RTC_Init+0x48>)
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <MX_RTC_Init+0x48>)
 800321e:	227f      	movs	r2, #127	; 0x7f
 8003220:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_RTC_Init+0x48>)
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <MX_RTC_Init+0x48>)
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <MX_RTC_Init+0x48>)
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <MX_RTC_Init+0x48>)
 8003236:	2200      	movs	r2, #0
 8003238:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <MX_RTC_Init+0x48>)
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <MX_RTC_Init+0x48>)
 8003242:	f003 ff11 	bl	8007068 <HAL_RTC_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800324c:	f7ff ffd8 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000eb8c 	.word	0x2000eb8c
 8003258:	40002800 	.word	0x40002800

0800325c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b0a4      	sub	sp, #144	; 0x90
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	2288      	movs	r2, #136	; 0x88
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f00a f9de 	bl	800d62e <memset>
  if(rtcHandle->Instance==RTC)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_RTC_MspInit+0x5c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d118      	bne.n	80032ae <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800327c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fa2e 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800329a:	f7ff ffb1 	bl	8003200 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_RTC_MspInit+0x60>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_RTC_MspInit+0x60>)
 80032a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80032ae:	bf00      	nop
 80032b0:	3790      	adds	r7, #144	; 0x90
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40002800 	.word	0x40002800
 80032bc:	40021000 	.word	0x40021000

080032c0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_SPI1_Init+0x74>)
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <MX_SPI1_Init+0x78>)
 80032c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <MX_SPI1_Init+0x74>)
 80032cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_SPI1_Init+0x74>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <MX_SPI1_Init+0x74>)
 80032da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <MX_SPI1_Init+0x74>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <MX_SPI1_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <MX_SPI1_Init+0x74>)
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <MX_SPI1_Init+0x74>)
 80032f6:	2210      	movs	r2, #16
 80032f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <MX_SPI1_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <MX_SPI1_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <MX_SPI1_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <MX_SPI1_Init+0x74>)
 800330e:	2207      	movs	r2, #7
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <MX_SPI1_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <MX_SPI1_Init+0x74>)
 800331a:	2208      	movs	r2, #8
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_SPI1_Init+0x74>)
 8003320:	f004 f940 	bl	80075a4 <HAL_SPI_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800332a:	f7ff ff69 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000ebb0 	.word	0x2000ebb0
 8003338:	40013000 	.word	0x40013000

0800333c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <MX_SPI2_Init+0x78>)
 8003344:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800334c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003354:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800335a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <MX_SPI2_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_SPI2_Init+0x74>)
 800336a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003372:	2210      	movs	r2, #16
 8003374:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <MX_SPI2_Init+0x74>)
 800337e:	2200      	movs	r2, #0
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003384:	2200      	movs	r2, #0
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <MX_SPI2_Init+0x74>)
 800338a:	2207      	movs	r2, #7
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_SPI2_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800339a:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_SPI2_Init+0x74>)
 800339c:	f004 f902 	bl	80075a4 <HAL_SPI_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80033a6:	f7ff ff2b 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000ec14 	.word	0x2000ec14
 80033b4:	40003800 	.word	0x40003800

080033b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	; 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a51      	ldr	r2, [pc, #324]	; (800351c <HAL_SPI_MspInit+0x164>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d129      	bne.n	800342e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_SPI_MspInit+0x168>)
 80033dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033de:	4a50      	ldr	r2, [pc, #320]	; (8003520 <HAL_SPI_MspInit+0x168>)
 80033e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033e4:	6613      	str	r3, [r2, #96]	; 0x60
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_SPI_MspInit+0x168>)
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_SPI_MspInit+0x168>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_SPI_MspInit+0x168>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fe:	4b48      	ldr	r3, [pc, #288]	; (8003520 <HAL_SPI_MspInit+0x168>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800340a:	23e0      	movs	r3, #224	; 0xe0
 800340c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800341a:	2305      	movs	r3, #5
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	4619      	mov	r1, r3
 8003424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003428:	f002 f924 	bl	8005674 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800342c:	e072      	b.n	8003514 <HAL_SPI_MspInit+0x15c>
  else if(spiHandle->Instance==SPI2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <HAL_SPI_MspInit+0x16c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d16d      	bne.n	8003514 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800343e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_SPI_MspInit+0x168>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_SPI_MspInit+0x168>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_SPI_MspInit+0x168>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <HAL_SPI_MspInit+0x168>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_SPI_MspInit+0x168>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003480:	2308      	movs	r3, #8
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003490:	2305      	movs	r3, #5
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	4823      	ldr	r0, [pc, #140]	; (8003528 <HAL_SPI_MspInit+0x170>)
 800349c:	f002 f8ea 	bl	8005674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b2:	2305      	movs	r3, #5
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	f107 031c 	add.w	r3, r7, #28
 80034ba:	4619      	mov	r1, r3
 80034bc:	481b      	ldr	r0, [pc, #108]	; (800352c <HAL_SPI_MspInit+0x174>)
 80034be:	f002 f8d9 	bl	8005674 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_SPI_MspInit+0x17c>)
 80034c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034d0:	2210      	movs	r2, #16
 80034d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <HAL_SPI_MspInit+0x178>)
 80034fa:	f001 fec3 	bl	8005284 <HAL_DMA_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8003504:	f7ff fe7c 	bl	8003200 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_SPI_MspInit+0x178>)
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_SPI_MspInit+0x178>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003514:	bf00      	nop
 8003516:	3730      	adds	r7, #48	; 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40013000 	.word	0x40013000
 8003520:	40021000 	.word	0x40021000
 8003524:	40003800 	.word	0x40003800
 8003528:	48000800 	.word	0x48000800
 800352c:	48000400 	.word	0x48000400
 8003530:	2000ec78 	.word	0x2000ec78
 8003534:	40020058 	.word	0x40020058

08003538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_MspInit+0x44>)
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_MspInit+0x44>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6613      	str	r3, [r2, #96]	; 0x60
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_MspInit+0x44>)
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_MspInit+0x44>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_MspInit+0x44>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_MspInit+0x44>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <NMI_Handler+0x4>

08003586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <HardFault_Handler+0x4>

0800358c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <MemManage_Handler+0x4>

08003592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <BusFault_Handler+0x4>

08003598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <UsageFault_Handler+0x4>

0800359e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <SysTick_Handler+0x34>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <SysTick_Handler+0x18>
		Timer1--;
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <SysTick_Handler+0x34>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <SysTick_Handler+0x34>)
 80035de:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <SysTick_Handler+0x38>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <SysTick_Handler+0x2c>
		Timer2--;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <SysTick_Handler+0x38>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <SysTick_Handler+0x38>)
 80035f2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f4:	f000 fab6 	bl	8003b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200014d0 	.word	0x200014d0
 8003600:	200014d2 	.word	0x200014d2

08003604 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <DMA1_Channel5_IRQHandler+0x10>)
 800360a:	f001 ff53 	bl	80054b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000ec78 	.word	0x2000ec78

08003618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800361c:	4802      	ldr	r0, [pc, #8]	; (8003628 <TIM6_DAC_IRQHandler+0x10>)
 800361e:	f004 ffdc 	bl	80085da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2000ecc4 	.word	0x2000ecc4

0800362c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <TIM7_IRQHandler+0x10>)
 8003632:	f004 ffd2 	bl	80085da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000ed10 	.word	0x2000ed10

08003640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return 1;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_kill>:

int _kill(int pid, int sig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800365a:	f00a f83b 	bl	800d6d4 <__errno>
 800365e:	4603      	mov	r3, r0
 8003660:	2216      	movs	r2, #22
 8003662:	601a      	str	r2, [r3, #0]
  return -1;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_exit>:

void _exit (int status)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffe7 	bl	8003650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003682:	e7fe      	b.n	8003682 <_exit+0x12>

08003684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e00a      	b.n	80036ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003696:	f3af 8000 	nop.w
 800369a:	4601      	mov	r1, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	60ba      	str	r2, [r7, #8]
 80036a2:	b2ca      	uxtb	r2, r1
 80036a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dbf0      	blt.n	8003696 <_read+0x12>
  }

  return len;
 80036b4:	687b      	ldr	r3, [r7, #4]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e009      	b.n	80036e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	60ba      	str	r2, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ff1f 	bl	800251c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dbf1      	blt.n	80036d0 <_write+0x12>
  }
  return len;
 80036ec:	687b      	ldr	r3, [r7, #4]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_close>:

int _close(int file)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371e:	605a      	str	r2, [r3, #4]
  return 0;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_isatty>:

int _isatty(int file)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <_sbrk+0x5c>)
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <_sbrk+0x60>)
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <_sbrk+0x64>)
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <_sbrk+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <_sbrk+0x64>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	429a      	cmp	r2, r3
 800378e:	d207      	bcs.n	80037a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003790:	f009 ffa0 	bl	800d6d4 <__errno>
 8003794:	4603      	mov	r3, r0
 8003796:	220c      	movs	r2, #12
 8003798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
 800379e:	e009      	b.n	80037b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <_sbrk+0x64>)
 80037b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20018000 	.word	0x20018000
 80037c0:	00000400 	.word	0x00000400
 80037c4:	2000ecc0 	.word	0x2000ecc0
 80037c8:	2000f170 	.word	0x2000f170

080037cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <SystemInit+0x20>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	4a05      	ldr	r2, [pc, #20]	; (80037ec <SystemInit+0x20>)
 80037d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <MX_TIM6_Init+0x64>)
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <MX_TIM6_Init+0x68>)
 8003804:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <MX_TIM6_Init+0x64>)
 8003808:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800380c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <MX_TIM6_Init+0x64>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_TIM6_Init+0x64>)
 8003816:	2214      	movs	r2, #20
 8003818:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_TIM6_Init+0x64>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003820:	480c      	ldr	r0, [pc, #48]	; (8003854 <MX_TIM6_Init+0x64>)
 8003822:	f004 fde3 	bl	80083ec <HAL_TIM_Base_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800382c:	f7ff fce8 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4805      	ldr	r0, [pc, #20]	; (8003854 <MX_TIM6_Init+0x64>)
 800383e:	f005 f891 	bl	8008964 <HAL_TIMEx_MasterConfigSynchronization>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003848:	f7ff fcda 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	2000ecc4 	.word	0x2000ecc4
 8003858:	40001000 	.word	0x40001000

0800385c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <MX_TIM7_Init+0x68>)
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <MX_TIM7_Init+0x6c>)
 8003870:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <MX_TIM7_Init+0x68>)
 8003874:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003878:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <MX_TIM7_Init+0x68>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <MX_TIM7_Init+0x68>)
 8003882:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003886:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <MX_TIM7_Init+0x68>)
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <MX_TIM7_Init+0x68>)
 8003890:	f004 fdac 	bl	80083ec <HAL_TIM_Base_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800389a:	f7ff fcb1 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <MX_TIM7_Init+0x68>)
 80038ac:	f005 f85a 	bl	8008964 <HAL_TIMEx_MasterConfigSynchronization>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80038b6:	f7ff fca3 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000ed10 	.word	0x2000ed10
 80038c8:	40001400 	.word	0x40001400

080038cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_TIM_Base_MspInit+0x78>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d114      	bne.n	8003908 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038de:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 80038e4:	f043 0310 	orr.w	r3, r3, #16
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	210a      	movs	r1, #10
 80038fa:	2036      	movs	r0, #54	; 0x36
 80038fc:	f001 fc8b 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003900:	2036      	movs	r0, #54	; 0x36
 8003902:	f001 fca4 	bl	800524e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003906:	e018      	b.n	800393a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_TIM_Base_MspInit+0x80>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_TIM_Base_MspInit+0x7c>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	210a      	movs	r1, #10
 800392e:	2037      	movs	r0, #55	; 0x37
 8003930:	f001 fc71 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003934:	2037      	movs	r0, #55	; 0x37
 8003936:	f001 fc8a 	bl	800524e <HAL_NVIC_EnableIRQ>
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40001000 	.word	0x40001000
 8003948:	40021000 	.word	0x40021000
 800394c:	40001400 	.word	0x40001400

08003950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003956:	4a15      	ldr	r2, [pc, #84]	; (80039ac <MX_USART2_UART_Init+0x5c>)
 8003958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 800395c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003976:	220c      	movs	r2, #12
 8003978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 800398e:	2200      	movs	r2, #0
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003992:	4805      	ldr	r0, [pc, #20]	; (80039a8 <MX_USART2_UART_Init+0x58>)
 8003994:	f005 f88c 	bl	8008ab0 <HAL_UART_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800399e:	f7ff fc2f 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000ed5c 	.word	0x2000ed5c
 80039ac:	40004400 	.word	0x40004400

080039b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0ac      	sub	sp, #176	; 0xb0
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2288      	movs	r2, #136	; 0x88
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f009 fe2c 	bl	800d62e <memset>
  if(uartHandle->Instance==USART2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_UART_MspInit+0xb0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d13b      	bne.n	8003a58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039e0:	2302      	movs	r3, #2
 80039e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039e4:	2300      	movs	r3, #0
 80039e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4618      	mov	r0, r3
 80039ee:	f002 fe7f 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039f8:	f7ff fc02 	bl	8003200 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_UART_MspInit+0xb4>)
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a44:	2307      	movs	r3, #7
 8003a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a54:	f001 fe0e 	bl	8005674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a58:	bf00      	nop
 8003a5a:	37b0      	adds	r7, #176	; 0xb0
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40004400 	.word	0x40004400
 8003a64:	40021000 	.word	0x40021000

08003a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a6c:	f7ff feae 	bl	80037cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a70:	480c      	ldr	r0, [pc, #48]	; (8003aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <LoopForever+0xe>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <LoopForever+0x16>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a96:	f009 fe23 	bl	800d6e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a9a:	f7ff fa39 	bl	8002f10 <main>

08003a9e <LoopForever>:

LoopForever:
    b LoopForever
 8003a9e:	e7fe      	b.n	8003a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003aa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa8:	20001450 	.word	0x20001450
  ldr r2, =_sidata
 8003aac:	0801019c 	.word	0x0801019c
  ldr r2, =_sbss
 8003ab0:	20001450 	.word	0x20001450
  ldr r4, =_ebss
 8003ab4:	2000f170 	.word	0x2000f170

08003ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ab8:	e7fe      	b.n	8003ab8 <ADC1_2_IRQHandler>

08003aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f001 fb9b 	bl	8005200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aca:	2000      	movs	r0, #0
 8003acc:	f000 f80e 	bl	8003aec <HAL_InitTick>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	71fb      	strb	r3, [r7, #7]
 8003ada:	e001      	b.n	8003ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003adc:	f7ff fd2c 	bl	8003538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_InitTick+0x6c>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_InitTick+0x70>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <HAL_InitTick+0x6c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fba7 	bl	800526a <HAL_SYSTICK_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d809      	bhi.n	8003b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f001 fb71 	bl	8005216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_InitTick+0x74>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e007      	b.n	8003b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e004      	b.n	8003b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e001      	b.n	8003b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20001270 	.word	0x20001270
 8003b5c:	20001268 	.word	0x20001268
 8003b60:	2000126c 	.word	0x2000126c

08003b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_IncTick+0x20>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_IncTick+0x24>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_IncTick+0x24>)
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20001270 	.word	0x20001270
 8003b88:	2000ede4 	.word	0x2000ede4

08003b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_GetTick+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000ede4 	.word	0x2000ede4

08003ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bac:	f7ff ffee 	bl	8003b8c <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d007      	beq.n	8003bce <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_Delay+0x44>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bca:	e000      	b.n	8003bce <HAL_Delay+0x2a>
  {
	  __WFI();
 8003bcc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8003bce:	f7ff ffdd 	bl	8003b8c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d8f6      	bhi.n	8003bcc <HAL_Delay+0x28>
  }
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20001270 	.word	0x20001270

08003bec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3360      	adds	r3, #96	; 0x60
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <LL_ADC_SetOffset+0x44>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	03fff000 	.word	0x03fff000

08003c9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3360      	adds	r3, #96	; 0x60
 8003caa:	461a      	mov	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3360      	adds	r3, #96	; 0x60
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3330      	adds	r3, #48	; 0x30
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	4413      	add	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	211f      	movs	r1, #31
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	401a      	ands	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0e9b      	lsrs	r3, r3, #26
 8003d36:	f003 011f 	and.w	r1, r3, #31
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	431a      	orrs	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3314      	adds	r3, #20
 8003d66:	461a      	mov	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	0e5b      	lsrs	r3, r3, #25
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0d1b      	lsrs	r3, r3, #20
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2107      	movs	r1, #7
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	0d1b      	lsrs	r3, r3, #20
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0318 	and.w	r3, r3, #24
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003dd0:	40d9      	lsrs	r1, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	0007ffff 	.word	0x0007ffff

08003df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 031f 	and.w	r3, r3, #31
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6093      	str	r3, [r2, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e48:	d101      	bne.n	8003e4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <LL_ADC_IsEnabled+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_ADC_IsEnabled+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsDisableOngoing+0x18>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsDisableOngoing+0x1a>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d101      	bne.n	8003f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d101      	bne.n	8003fae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e130      	b.n	8004238 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fc ffd5 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff19 	bl	8003e34 <LL_ADC_IsDeepPowerDownEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff feff 	bl	8003e10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff34 	bl	8003e84 <LL_ADC_IsInternalRegulatorEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d115      	bne.n	800404e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff18 	bl	8003e5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402c:	4b84      	ldr	r3, [pc, #528]	; (8004240 <HAL_ADC_Init+0x284>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	4a84      	ldr	r2, [pc, #528]	; (8004244 <HAL_ADC_Init+0x288>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004040:	e002      	b.n	8004048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3b01      	subs	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f9      	bne.n	8004042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff16 	bl	8003e84 <LL_ADC_IsInternalRegulatorEnabled>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ff76 	bl	8003f70 <LL_ADC_REG_IsConversionOngoing>
 8004084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f040 80c9 	bne.w	8004226 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 80c5 	bne.w	8004226 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040a4:	f043 0202 	orr.w	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff23 	bl	8003efc <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d115      	bne.n	80040e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040bc:	4862      	ldr	r0, [pc, #392]	; (8004248 <HAL_ADC_Init+0x28c>)
 80040be:	f7ff ff1d 	bl	8003efc <LL_ADC_IsEnabled>
 80040c2:	4604      	mov	r4, r0
 80040c4:	4861      	ldr	r0, [pc, #388]	; (800424c <HAL_ADC_Init+0x290>)
 80040c6:	f7ff ff19 	bl	8003efc <LL_ADC_IsEnabled>
 80040ca:	4603      	mov	r3, r0
 80040cc:	431c      	orrs	r4, r3
 80040ce:	4860      	ldr	r0, [pc, #384]	; (8004250 <HAL_ADC_Init+0x294>)
 80040d0:	f7ff ff14 	bl	8003efc <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4323      	orrs	r3, r4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4619      	mov	r1, r3
 80040e2:	485c      	ldr	r0, [pc, #368]	; (8004254 <HAL_ADC_Init+0x298>)
 80040e4:	f7ff fd82 	bl	8003bec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7e5b      	ldrb	r3, [r3, #25]
 80040ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80040f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80040fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004106:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d106      	bne.n	8004124 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	3b01      	subs	r3, #1
 800411c:	045b      	lsls	r3, r3, #17
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	4b44      	ldr	r3, [pc, #272]	; (8004258 <HAL_ADC_Init+0x29c>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	430b      	orrs	r3, r1
 8004152:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff1c 	bl	8003f96 <LL_ADC_INJ_IsConversionOngoing>
 800415e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d13d      	bne.n	80041e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d13a      	bne.n	80041e2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004170:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004178:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	430b      	orrs	r3, r1
 8004194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800419c:	2b01      	cmp	r3, #1
 800419e:	d118      	bne.n	80041d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041c2:	430a      	orrs	r2, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	e007      	b.n	80041e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d10c      	bne.n	8004204 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f023 010f 	bic.w	r1, r3, #15
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
 8004202:	e007      	b.n	8004214 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 020f 	bic.w	r2, r2, #15
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
 8004224:	e007      	b.n	8004236 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f043 0210 	orr.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004236:	7ffb      	ldrb	r3, [r7, #31]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3724      	adds	r7, #36	; 0x24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}
 8004240:	20001268 	.word	0x20001268
 8004244:	053e2d63 	.word	0x053e2d63
 8004248:	50040000 	.word	0x50040000
 800424c:	50040100 	.word	0x50040100
 8004250:	50040200 	.word	0x50040200
 8004254:	50040300 	.word	0x50040300
 8004258:	fff0c007 	.word	0xfff0c007

0800425c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004264:	4857      	ldr	r0, [pc, #348]	; (80043c4 <HAL_ADC_Start+0x168>)
 8004266:	f7ff fdc5 	bl	8003df4 <LL_ADC_GetMultimode>
 800426a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fe7d 	bl	8003f70 <LL_ADC_REG_IsConversionOngoing>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 809c 	bne.w	80043b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_ADC_Start+0x30>
 8004288:	2302      	movs	r3, #2
 800428a:	e097      	b.n	80043bc <HAL_ADC_Start+0x160>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fc9b 	bl	8004bd0 <ADC_Enable>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 8083 	bne.w	80043ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a42      	ldr	r2, [pc, #264]	; (80043c8 <HAL_ADC_Start+0x16c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d002      	beq.n	80042ca <HAL_ADC_Start+0x6e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	e000      	b.n	80042cc <HAL_ADC_Start+0x70>
 80042ca:	4b40      	ldr	r3, [pc, #256]	; (80043cc <HAL_ADC_Start+0x170>)
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d002      	beq.n	80042da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d106      	bne.n	8004302 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	f023 0206 	bic.w	r2, r3, #6
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004300:	e002      	b.n	8004308 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	221c      	movs	r2, #28
 800430e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_ADC_Start+0x16c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d002      	beq.n	8004328 <HAL_ADC_Start+0xcc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e000      	b.n	800432a <HAL_ADC_Start+0xce>
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_ADC_Start+0x170>)
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	4293      	cmp	r3, r2
 8004330:	d008      	beq.n	8004344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b05      	cmp	r3, #5
 800433c:	d002      	beq.n	8004344 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b09      	cmp	r3, #9
 8004342:	d114      	bne.n	800436e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800435a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fdee 	bl	8003f48 <LL_ADC_REG_StartConversion>
 800436c:	e025      	b.n	80043ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HAL_ADC_Start+0x16c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d002      	beq.n	800438a <HAL_ADC_Start+0x12e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	e000      	b.n	800438c <HAL_ADC_Start+0x130>
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_ADC_Start+0x170>)
 800438c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00f      	beq.n	80043ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
 80043aa:	e006      	b.n	80043ba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80043b4:	e001      	b.n	80043ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
 80043b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	50040300 	.word	0x50040300
 80043c8:	50040100 	.word	0x50040100
 80043cc:	50040000 	.word	0x50040000

080043d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b0b6      	sub	sp, #216	; 0xd8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x22>
 800440a:	2302      	movs	r3, #2
 800440c:	e3c9      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x7b6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fda8 	bl	8003f70 <LL_ADC_REG_IsConversionOngoing>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 83aa 	bne.w	8004b7c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b05      	cmp	r3, #5
 8004436:	d824      	bhi.n	8004482 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	3b02      	subs	r3, #2
 800443e:	2b03      	cmp	r3, #3
 8004440:	d81b      	bhi.n	800447a <HAL_ADC_ConfigChannel+0x8e>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_ADC_ConfigChannel+0x5c>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004459 	.word	0x08004459
 800444c:	08004461 	.word	0x08004461
 8004450:	08004469 	.word	0x08004469
 8004454:	08004471 	.word	0x08004471
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004458:	230c      	movs	r3, #12
 800445a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800445e:	e010      	b.n	8004482 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004460:	2312      	movs	r3, #18
 8004462:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004466:	e00c      	b.n	8004482 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004468:	2318      	movs	r3, #24
 800446a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800446e:	e008      	b.n	8004482 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004478:	e003      	b.n	8004482 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800447a:	2306      	movs	r3, #6
 800447c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004480:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004490:	f7ff fc35 	bl	8003cfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fd69 	bl	8003f70 <LL_ADC_REG_IsConversionOngoing>
 800449e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd75 	bl	8003f96 <LL_ADC_INJ_IsConversionOngoing>
 80044ac:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 81a4 	bne.w	8004802 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 819f 	bne.w	8004802 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f7ff fc40 	bl	8003d56 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00a      	beq.n	800450e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6919      	ldr	r1, [r3, #16]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004508:	f7ff fba4 	bl	8003c54 <LL_ADC_SetOffset>
 800450c:	e179      	b.n	8004802 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fbc1 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 800451a:	4603      	mov	r3, r0
 800451c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_ADC_ConfigChannel+0x14e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fbb6 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 8004530:	4603      	mov	r3, r0
 8004532:	0e9b      	lsrs	r3, r3, #26
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	e01e      	b.n	8004578 <HAL_ADC_ConfigChannel+0x18c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fbab 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800455c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e004      	b.n	8004576 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800456c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004570:	fab3 f383 	clz	r3, r3
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x1a4>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	e018      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1d6>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80045a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80045b4:	2320      	movs	r3, #32
 80045b6:	e004      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80045b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d106      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fb7a 	bl	8003cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fb5e 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x214>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fb53 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	f003 021f 	and.w	r2, r3, #31
 80045fe:	e01e      	b.n	800463e <HAL_ADC_ConfigChannel+0x252>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fb48 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 800460c:	4603      	mov	r3, r0
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800461e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e004      	b.n	800463c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x26a>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0e9b      	lsrs	r3, r3, #26
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	e018      	b.n	8004688 <HAL_ADC_ConfigChannel+0x29c>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800466a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800466e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800467a:	2320      	movs	r3, #32
 800467c:	e004      	b.n	8004688 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800467e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004688:	429a      	cmp	r2, r3
 800468a:	d106      	bne.n	800469a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fb17 	bl	8003cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2102      	movs	r1, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fafb 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x2da>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff faf0 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 80046bc:	4603      	mov	r3, r0
 80046be:	0e9b      	lsrs	r3, r3, #26
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	e01e      	b.n	8004704 <HAL_ADC_ConfigChannel+0x318>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fae5 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80046e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80046ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e004      	b.n	8004702 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80046f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_ADC_ConfigChannel+0x330>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	0e9b      	lsrs	r3, r3, #26
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	e014      	b.n	8004746 <HAL_ADC_ConfigChannel+0x35a>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800472a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800472c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004738:	2320      	movs	r3, #32
 800473a:	e004      	b.n	8004746 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800473c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004740:	fab3 f383 	clz	r3, r3
 8004744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004746:	429a      	cmp	r2, r3
 8004748:	d106      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	2102      	movs	r1, #2
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fab8 	bl	8003cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2103      	movs	r1, #3
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fa9c 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x398>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2103      	movs	r1, #3
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fa91 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 800477a:	4603      	mov	r3, r0
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	f003 021f 	and.w	r2, r3, #31
 8004782:	e017      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x3c8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2103      	movs	r1, #3
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fa86 	bl	8003c9c <LL_ADC_GetOffsetChannel>
 8004790:	4603      	mov	r3, r0
 8004792:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e003      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80047aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x3e0>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	e011      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x404>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80047de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80047e4:	2320      	movs	r3, #32
 80047e6:	e003      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80047e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ea:	fab3 f383 	clz	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d106      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2103      	movs	r1, #3
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fa63 	bl	8003cc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fb78 	bl	8003efc <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 8140 	bne.w	8004a94 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	461a      	mov	r2, r3
 8004822:	f7ff fac3 	bl	8003dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4a8f      	ldr	r2, [pc, #572]	; (8004a68 <HAL_ADC_ConfigChannel+0x67c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f040 8131 	bne.w	8004a94 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <HAL_ADC_ConfigChannel+0x46e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	0e9b      	lsrs	r3, r3, #26
 8004848:	3301      	adds	r3, #1
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2b09      	cmp	r3, #9
 8004850:	bf94      	ite	ls
 8004852:	2301      	movls	r3, #1
 8004854:	2300      	movhi	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e019      	b.n	800488e <HAL_ADC_ConfigChannel+0x4a2>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004872:	2320      	movs	r3, #32
 8004874:	e003      	b.n	800487e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2b09      	cmp	r3, #9
 8004886:	bf94      	ite	ls
 8004888:	2301      	movls	r3, #1
 800488a:	2300      	movhi	r3, #0
 800488c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800488e:	2b00      	cmp	r3, #0
 8004890:	d079      	beq.n	8004986 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x4c2>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	3301      	adds	r3, #1
 80048a6:	069b      	lsls	r3, r3, #26
 80048a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ac:	e015      	b.n	80048da <HAL_ADC_ConfigChannel+0x4ee>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80048c6:	2320      	movs	r3, #32
 80048c8:	e003      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80048ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	069b      	lsls	r3, r3, #26
 80048d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x50e>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	0e9b      	lsrs	r3, r3, #26
 80048ec:	3301      	adds	r3, #1
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	e017      	b.n	800492a <HAL_ADC_ConfigChannel+0x53e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004912:	2320      	movs	r3, #32
 8004914:	e003      	b.n	800491e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	ea42 0103 	orr.w	r1, r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x564>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	3301      	adds	r3, #1
 8004942:	f003 021f 	and.w	r2, r3, #31
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	051b      	lsls	r3, r3, #20
 800494e:	e018      	b.n	8004982 <HAL_ADC_ConfigChannel+0x596>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e003      	b.n	8004974 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f003 021f 	and.w	r2, r3, #31
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004982:	430b      	orrs	r3, r1
 8004984:	e081      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x5b6>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0e9b      	lsrs	r3, r3, #26
 8004998:	3301      	adds	r3, #1
 800499a:	069b      	lsls	r3, r3, #26
 800499c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a0:	e015      	b.n	80049ce <HAL_ADC_ConfigChannel+0x5e2>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e003      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	069b      	lsls	r3, r3, #26
 80049ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x602>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	0e9b      	lsrs	r3, r3, #26
 80049e0:	3301      	adds	r3, #1
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	e017      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x632>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	61bb      	str	r3, [r7, #24]
  return result;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004a06:	2320      	movs	r3, #32
 8004a08:	e003      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	fab3 f383 	clz	r3, r3
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	ea42 0103 	orr.w	r1, r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10d      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x65e>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	0e9b      	lsrs	r3, r3, #26
 8004a34:	3301      	adds	r3, #1
 8004a36:	f003 021f 	and.w	r2, r3, #31
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	3b1e      	subs	r3, #30
 8004a42:	051b      	lsls	r3, r3, #20
 8004a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a48:	e01e      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x69c>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	60fb      	str	r3, [r7, #12]
  return result;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004a62:	2320      	movs	r3, #32
 8004a64:	e006      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x688>
 8004a66:	bf00      	nop
 8004a68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	f003 021f 	and.w	r2, r3, #31
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b1e      	subs	r3, #30
 8004a82:	051b      	lsls	r3, r3, #20
 8004a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f7ff f961 	bl	8003d56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b44      	ldr	r3, [pc, #272]	; (8004bac <HAL_ADC_ConfigChannel+0x7c0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d07a      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aa0:	4843      	ldr	r0, [pc, #268]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004aa2:	f7ff f8c9 	bl	8003c38 <LL_ADC_GetCommonPathInternalCh>
 8004aa6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d12c      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d126      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_ADC_ConfigChannel+0x6e8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_ADC_ConfigChannel+0x7d0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d15d      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004adc:	4619      	mov	r1, r3
 8004ade:	4834      	ldr	r0, [pc, #208]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004ae0:	f7ff f897 	bl	8003c12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004afe:	e002      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f9      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b0c:	e040      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2d      	ldr	r2, [pc, #180]	; (8004bc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d118      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d112      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x74c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <HAL_ADC_ConfigChannel+0x7d0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d12d      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b40:	4619      	mov	r1, r3
 8004b42:	481b      	ldr	r0, [pc, #108]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b44:	f7ff f865 	bl	8003c12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b48:	e024      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_ADC_ConfigChannel+0x7e0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d120      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11a      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d115      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b72:	4619      	mov	r1, r3
 8004b74:	480e      	ldr	r0, [pc, #56]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b76:	f7ff f84c 	bl	8003c12 <LL_ADC_SetCommonPathInternalCh>
 8004b7a:	e00c      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004b8e:	e002      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	37d8      	adds	r7, #216	; 0xd8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	80080000 	.word	0x80080000
 8004bb0:	50040300 	.word	0x50040300
 8004bb4:	c7520000 	.word	0xc7520000
 8004bb8:	50040000 	.word	0x50040000
 8004bbc:	50040200 	.word	0x50040200
 8004bc0:	20001268 	.word	0x20001268
 8004bc4:	053e2d63 	.word	0x053e2d63
 8004bc8:	cb840000 	.word	0xcb840000
 8004bcc:	80000001 	.word	0x80000001

08004bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff f98b 	bl	8003efc <LL_ADC_IsEnabled>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d169      	bne.n	8004cc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <ADC_Enable+0xfc>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e055      	b.n	8004cc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f946 	bl	8003eac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c20:	482b      	ldr	r0, [pc, #172]	; (8004cd0 <ADC_Enable+0x100>)
 8004c22:	f7ff f809 	bl	8003c38 <LL_ADC_GetCommonPathInternalCh>
 8004c26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <ADC_Enable+0x104>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <ADC_Enable+0x108>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c4a:	e002      	b.n	8004c52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f9      	bne.n	8004c4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c58:	f7fe ff98 	bl	8003b8c <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c5e:	e028      	b.n	8004cb2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff f949 	bl	8003efc <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff f919 	bl	8003eac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c7a:	f7fe ff87 	bl	8003b8c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d914      	bls.n	8004cb2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d00d      	beq.n	8004cb2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0210 	orr.w	r2, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e007      	b.n	8004cc2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d1cf      	bne.n	8004c60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	8000003f 	.word	0x8000003f
 8004cd0:	50040300 	.word	0x50040300
 8004cd4:	20001268 	.word	0x20001268
 8004cd8:	053e2d63 	.word	0x053e2d63

08004cdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff f91a 	bl	8003f22 <LL_ADC_IsDisableOngoing>
 8004cee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff f901 	bl	8003efc <LL_ADC_IsEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d047      	beq.n	8004d90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d144      	bne.n	8004d90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030d 	and.w	r3, r3, #13
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10c      	bne.n	8004d2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff f8db 	bl	8003ed4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2203      	movs	r2, #3
 8004d24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d26:	f7fe ff31 	bl	8003b8c <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d2c:	e029      	b.n	8004d82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 0210 	orr.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e023      	b.n	8004d92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d4a:	f7fe ff1f 	bl	8003b8c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d914      	bls.n	8004d82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0210 	orr.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e007      	b.n	8004d92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1dc      	bne.n	8004d4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <LL_ADC_IsEnabled>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <LL_ADC_IsEnabled+0x18>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <LL_ADC_IsEnabled+0x1a>
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_ADC_StartCalibration>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e06:	d101      	bne.n	8004e0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d101      	bne.n	8004e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_ADCEx_Calibration_Start+0x1c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e04d      	b.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff39 	bl	8004cdc <ADC_Disable>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d136      	bne.n	8004ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e7c:	f023 0302 	bic.w	r3, r3, #2
 8004e80:	f043 0202 	orr.w	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff96 	bl	8004dc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e94:	e014      	b.n	8004ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004ea2:	d30d      	bcc.n	8004ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f023 0312 	bic.w	r3, r3, #18
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01b      	b.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff94 	bl	8004df2 <LL_ADC_IsCalibrationOnGoing>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e2      	bne.n	8004e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
 8004ee0:	e005      	b.n	8004eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b09f      	sub	sp, #124	; 0x7c
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e093      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f26:	2300      	movs	r3, #0
 8004f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a47      	ldr	r2, [pc, #284]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d102      	bne.n	8004f3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	e001      	b.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e072      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff ff59 	bl	8004e1a <LL_ADC_REG_IsConversionOngoing>
 8004f68:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff53 	bl	8004e1a <LL_ADC_REG_IsConversionOngoing>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d154      	bne.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d151      	bne.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004f82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d02c      	beq.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f9e:	035b      	lsls	r3, r3, #13
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa8:	4829      	ldr	r0, [pc, #164]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004faa:	f7ff fef6 	bl	8004d9a <LL_ADC_IsEnabled>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4828      	ldr	r0, [pc, #160]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004fb2:	f7ff fef2 	bl	8004d9a <LL_ADC_IsEnabled>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	431c      	orrs	r4, r3
 8004fba:	4828      	ldr	r0, [pc, #160]	; (800505c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004fbc:	f7ff feed 	bl	8004d9a <LL_ADC_IsEnabled>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4323      	orrs	r3, r4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d137      	bne.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fd0:	f023 030f 	bic.w	r3, r3, #15
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	6811      	ldr	r1, [r2, #0]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fe4:	e028      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ff2:	4817      	ldr	r0, [pc, #92]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ff4:	f7ff fed1 	bl	8004d9a <LL_ADC_IsEnabled>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	4816      	ldr	r0, [pc, #88]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ffc:	f7ff fecd 	bl	8004d9a <LL_ADC_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	431c      	orrs	r4, r3
 8005004:	4815      	ldr	r0, [pc, #84]	; (800505c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005006:	f7ff fec8 	bl	8004d9a <LL_ADC_IsEnabled>
 800500a:	4603      	mov	r3, r0
 800500c:	4323      	orrs	r3, r4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d112      	bne.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800501a:	f023 030f 	bic.w	r3, r3, #15
 800501e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005020:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005022:	e009      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005036:	e000      	b.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005038:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005042:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005046:	4618      	mov	r0, r3
 8005048:	377c      	adds	r7, #124	; 0x7c
 800504a:	46bd      	mov	sp, r7
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	bf00      	nop
 8005050:	50040000 	.word	0x50040000
 8005054:	50040100 	.word	0x50040100
 8005058:	50040300 	.word	0x50040300
 800505c:	50040200 	.word	0x50040200

08005060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800507c:	4013      	ands	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800508c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005092:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	60d3      	str	r3, [r2, #12]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <__NVIC_GetPriorityGrouping+0x18>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 0307 	and.w	r3, r3, #7
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	db0b      	blt.n	80050ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	f003 021f 	and.w	r2, r3, #31
 80050dc:	4907      	ldr	r1, [pc, #28]	; (80050fc <__NVIC_EnableIRQ+0x38>)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	2001      	movs	r0, #1
 80050e6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e100 	.word	0xe000e100

08005100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800510c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db0a      	blt.n	800512a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	490c      	ldr	r1, [pc, #48]	; (800514c <__NVIC_SetPriority+0x4c>)
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	0112      	lsls	r2, r2, #4
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	440b      	add	r3, r1
 8005124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005128:	e00a      	b.n	8005140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	4908      	ldr	r1, [pc, #32]	; (8005150 <__NVIC_SetPriority+0x50>)
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	3b04      	subs	r3, #4
 8005138:	0112      	lsls	r2, r2, #4
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	440b      	add	r3, r1
 800513e:	761a      	strb	r2, [r3, #24]
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000e100 	.word	0xe000e100
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f1c3 0307 	rsb	r3, r3, #7
 800516e:	2b04      	cmp	r3, #4
 8005170:	bf28      	it	cs
 8005172:	2304      	movcs	r3, #4
 8005174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3304      	adds	r3, #4
 800517a:	2b06      	cmp	r3, #6
 800517c:	d902      	bls.n	8005184 <NVIC_EncodePriority+0x30>
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3b03      	subs	r3, #3
 8005182:	e000      	b.n	8005186 <NVIC_EncodePriority+0x32>
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43da      	mvns	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	401a      	ands	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800519c:	f04f 31ff 	mov.w	r1, #4294967295
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43d9      	mvns	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ac:	4313      	orrs	r3, r2
         );
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3724      	adds	r7, #36	; 0x24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051cc:	d301      	bcc.n	80051d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00f      	b.n	80051f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <SysTick_Config+0x40>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051da:	210f      	movs	r1, #15
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	f7ff ff8e 	bl	8005100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <SysTick_Config+0x40>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <SysTick_Config+0x40>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	e000e010 	.word	0xe000e010

08005200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff29 	bl	8005060 <__NVIC_SetPriorityGrouping>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	4603      	mov	r3, r0
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005228:	f7ff ff3e 	bl	80050a8 <__NVIC_GetPriorityGrouping>
 800522c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff ff8e 	bl	8005154 <NVIC_EncodePriority>
 8005238:	4602      	mov	r2, r0
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff5d 	bl	8005100 <__NVIC_SetPriority>
}
 8005246:	bf00      	nop
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff31 	bl	80050c4 <__NVIC_EnableIRQ>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ffa2 	bl	80051bc <SysTick_Config>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e098      	b.n	80053c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_DMA_Init+0x150>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <HAL_DMA_Init+0x154>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a4b      	ldr	r2, [pc, #300]	; (80053dc <HAL_DMA_Init+0x158>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a48      	ldr	r2, [pc, #288]	; (80053e0 <HAL_DMA_Init+0x15c>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b46      	ldr	r3, [pc, #280]	; (80053e4 <HAL_DMA_Init+0x160>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a43      	ldr	r2, [pc, #268]	; (80053dc <HAL_DMA_Init+0x158>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_DMA_Init+0x164>)
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533a:	d039      	beq.n	80053b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <HAL_DMA_Init+0x15c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d11a      	bne.n	800537c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005346:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_DMA_Init+0x168>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f003 031c 	and.w	r3, r3, #28
 8005352:	210f      	movs	r1, #15
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	4924      	ldr	r1, [pc, #144]	; (80053ec <HAL_DMA_Init+0x168>)
 800535c:	4013      	ands	r3, r2
 800535e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005360:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_DMA_Init+0x168>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f003 031c 	and.w	r3, r3, #28
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	491d      	ldr	r1, [pc, #116]	; (80053ec <HAL_DMA_Init+0x168>)
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
 800537a:	e019      	b.n	80053b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_DMA_Init+0x16c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f003 031c 	and.w	r3, r3, #28
 8005388:	210f      	movs	r1, #15
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	4917      	ldr	r1, [pc, #92]	; (80053f0 <HAL_DMA_Init+0x16c>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <HAL_DMA_Init+0x16c>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f003 031c 	and.w	r3, r3, #28
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	4911      	ldr	r1, [pc, #68]	; (80053f0 <HAL_DMA_Init+0x16c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40020407 	.word	0x40020407
 80053d8:	bffdfff8 	.word	0xbffdfff8
 80053dc:	cccccccd 	.word	0xcccccccd
 80053e0:	40020000 	.word	0x40020000
 80053e4:	bffdfbf8 	.word	0xbffdfbf8
 80053e8:	40020400 	.word	0x40020400
 80053ec:	400200a8 	.word	0x400200a8
 80053f0:	400204a8 	.word	0x400204a8

080053f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_DMA_Start_IT+0x20>
 8005410:	2302      	movs	r3, #2
 8005412:	e04b      	b.n	80054ac <HAL_DMA_Start_IT+0xb8>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d13a      	bne.n	800549e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f8e0 	bl	8005612 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 020e 	orr.w	r2, r2, #14
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e00f      	b.n	800548c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0204 	bic.w	r2, r2, #4
 800547a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 020a 	orr.w	r2, r2, #10
 800548a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e005      	b.n	80054aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	f003 031c 	and.w	r3, r3, #28
 80054d4:	2204      	movs	r2, #4
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d026      	beq.n	800552e <HAL_DMA_IRQHandler+0x7a>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d021      	beq.n	800552e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f003 021c 	and.w	r2, r3, #28
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	2104      	movs	r1, #4
 8005516:	fa01 f202 	lsl.w	r2, r1, r2
 800551a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d071      	beq.n	8005608 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800552c:	e06c      	b.n	8005608 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f003 031c 	and.w	r3, r3, #28
 8005536:	2202      	movs	r2, #2
 8005538:	409a      	lsls	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4013      	ands	r3, r2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d02e      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xec>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d029      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 020a 	bic.w	r2, r2, #10
 8005568:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	f003 021c 	and.w	r2, r3, #28
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	2102      	movs	r1, #2
 8005580:	fa01 f202 	lsl.w	r2, r1, r2
 8005584:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d038      	beq.n	8005608 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800559e:	e033      	b.n	8005608 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	f003 031c 	and.w	r3, r3, #28
 80055a8:	2208      	movs	r2, #8
 80055aa:	409a      	lsls	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02a      	beq.n	800560a <HAL_DMA_IRQHandler+0x156>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d025      	beq.n	800560a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 020e 	bic.w	r2, r2, #14
 80055cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f003 021c 	and.w	r2, r3, #28
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f202 	lsl.w	r2, r1, r2
 80055e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005608:	bf00      	nop
 800560a:	bf00      	nop
}
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	f003 021c 	and.w	r2, r3, #28
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f202 	lsl.w	r2, r1, r2
 8005632:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b10      	cmp	r3, #16
 8005642:	d108      	bne.n	8005656 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005654:	e007      	b.n	8005666 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	60da      	str	r2, [r3, #12]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005682:	e17f      	b.n	8005984 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8171 	beq.w	800597e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d005      	beq.n	80056b4 <HAL_GPIO_Init+0x40>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d130      	bne.n	8005716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2203      	movs	r2, #3
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ea:	2201      	movs	r2, #1
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4013      	ands	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	f003 0201 	and.w	r2, r3, #1
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b03      	cmp	r3, #3
 8005720:	d118      	bne.n	8005754 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005728:	2201      	movs	r2, #1
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4013      	ands	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	f003 0201 	and.w	r2, r3, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b03      	cmp	r3, #3
 800575e:	d017      	beq.n	8005790 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4013      	ands	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d123      	bne.n	80057e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	220f      	movs	r2, #15
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2203      	movs	r2, #3
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0203 	and.w	r2, r3, #3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80ac 	beq.w	800597e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_GPIO_Init+0x330>)
 8005828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582a:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <HAL_GPIO_Init+0x330>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6613      	str	r3, [r2, #96]	; 0x60
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_GPIO_Init+0x330>)
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800583e:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_GPIO_Init+0x334>)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	3302      	adds	r3, #2
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005868:	d025      	beq.n	80058b6 <HAL_GPIO_Init+0x242>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4f      	ldr	r2, [pc, #316]	; (80059ac <HAL_GPIO_Init+0x338>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <HAL_GPIO_Init+0x23e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <HAL_GPIO_Init+0x33c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d019      	beq.n	80058ae <HAL_GPIO_Init+0x23a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4d      	ldr	r2, [pc, #308]	; (80059b4 <HAL_GPIO_Init+0x340>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_GPIO_Init+0x236>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4c      	ldr	r2, [pc, #304]	; (80059b8 <HAL_GPIO_Init+0x344>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00d      	beq.n	80058a6 <HAL_GPIO_Init+0x232>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_GPIO_Init+0x348>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <HAL_GPIO_Init+0x22e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <HAL_GPIO_Init+0x34c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d101      	bne.n	800589e <HAL_GPIO_Init+0x22a>
 800589a:	2306      	movs	r3, #6
 800589c:	e00c      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 800589e:	2307      	movs	r3, #7
 80058a0:	e00a      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058a2:	2305      	movs	r3, #5
 80058a4:	e008      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058a6:	2304      	movs	r3, #4
 80058a8:	e006      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058aa:	2303      	movs	r3, #3
 80058ac:	e004      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e002      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058b6:	2300      	movs	r3, #0
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	f002 0203 	and.w	r2, r2, #3
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	4093      	lsls	r3, r2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058c8:	4937      	ldr	r1, [pc, #220]	; (80059a8 <HAL_GPIO_Init+0x334>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	3302      	adds	r3, #2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_GPIO_Init+0x350>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43db      	mvns	r3, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058fa:	4a32      	ldr	r2, [pc, #200]	; (80059c4 <HAL_GPIO_Init+0x350>)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005900:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	43db      	mvns	r3, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <HAL_GPIO_Init+0x350>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005954:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43db      	mvns	r3, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005978:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <HAL_GPIO_Init+0x350>)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	f47f ae78 	bne.w	8005684 <HAL_GPIO_Init+0x10>
  }
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40010000 	.word	0x40010000
 80059ac:	48000400 	.word	0x48000400
 80059b0:	48000800 	.word	0x48000800
 80059b4:	48000c00 	.word	0x48000c00
 80059b8:	48001000 	.word	0x48001000
 80059bc:	48001400 	.word	0x48001400
 80059c0:	48001800 	.word	0x48001800
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a14:	e002      	b.n	8005a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a2c:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40007000 	.word	0x40007000

08005a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a52:	d130      	bne.n	8005ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a54:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a60:	d038      	beq.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2232      	movs	r2, #50	; 0x32
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0c9b      	lsrs	r3, r3, #18
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a88:	e002      	b.n	8005a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9c:	d102      	bne.n	8005aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f2      	bne.n	8005a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d110      	bne.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d007      	beq.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005acc:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40007000 	.word	0x40007000
 8005ae8:	20001268 	.word	0x20001268
 8005aec:	431bde83 	.word	0x431bde83

08005af0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e3ca      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b02:	4b97      	ldr	r3, [pc, #604]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0c:	4b94      	ldr	r3, [pc, #592]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80e4 	beq.w	8005cec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_RCC_OscConfig+0x4a>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	f040 808b 	bne.w	8005c48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 8087 	bne.w	8005c48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b3a:	4b89      	ldr	r3, [pc, #548]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_RCC_OscConfig+0x62>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e3a2      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	4b82      	ldr	r3, [pc, #520]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <HAL_RCC_OscConfig+0x7c>
 8005b62:	4b7f      	ldr	r3, [pc, #508]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6a:	e005      	b.n	8005b78 <HAL_RCC_OscConfig+0x88>
 8005b6c:	4b7c      	ldr	r3, [pc, #496]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d223      	bcs.n	8005bc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fd55 	bl	8006630 <RCC_SetFlashLatencyFromMSIRange>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e383      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b90:	4b73      	ldr	r3, [pc, #460]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a72      	ldr	r2, [pc, #456]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b96:	f043 0308 	orr.w	r3, r3, #8
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b70      	ldr	r3, [pc, #448]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	496d      	ldr	r1, [pc, #436]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bae:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	4968      	ldr	r1, [pc, #416]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	604b      	str	r3, [r1, #4]
 8005bc2:	e025      	b.n	8005c10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bc4:	4b66      	ldr	r3, [pc, #408]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a65      	ldr	r2, [pc, #404]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bca:	f043 0308 	orr.w	r3, r3, #8
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b63      	ldr	r3, [pc, #396]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	4960      	ldr	r1, [pc, #384]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005be2:	4b5f      	ldr	r3, [pc, #380]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	495b      	ldr	r1, [pc, #364]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fd15 	bl	8006630 <RCC_SetFlashLatencyFromMSIRange>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e343      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c10:	f000 fc4a 	bl	80064a8 <HAL_RCC_GetSysClockFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b52      	ldr	r3, [pc, #328]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	4950      	ldr	r1, [pc, #320]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2c:	4a4e      	ldr	r2, [pc, #312]	; (8005d68 <HAL_RCC_OscConfig+0x278>)
 8005c2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c30:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <HAL_RCC_OscConfig+0x27c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fd ff59 	bl	8003aec <HAL_InitTick>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d052      	beq.n	8005cea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	e327      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d032      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c50:	4b43      	ldr	r3, [pc, #268]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a42      	ldr	r2, [pc, #264]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c5c:	f7fd ff96 	bl	8003b8c <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c64:	f7fd ff92 	bl	8003b8c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e310      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c76:	4b3a      	ldr	r3, [pc, #232]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c82:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a36      	ldr	r2, [pc, #216]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c88:	f043 0308 	orr.w	r3, r3, #8
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	4931      	ldr	r1, [pc, #196]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ca0:	4b2f      	ldr	r3, [pc, #188]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	492c      	ldr	r1, [pc, #176]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	e01a      	b.n	8005cec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cb6:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cc2:	f7fd ff63 	bl	8003b8c <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cca:	f7fd ff5f 	bl	8003b8c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e2dd      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f0      	bne.n	8005cca <HAL_RCC_OscConfig+0x1da>
 8005ce8:	e000      	b.n	8005cec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d074      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d005      	beq.n	8005d0a <HAL_RCC_OscConfig+0x21a>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d10e      	bne.n	8005d22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d10b      	bne.n	8005d22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d064      	beq.n	8005de0 <HAL_RCC_OscConfig+0x2f0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d160      	bne.n	8005de0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e2ba      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x24a>
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e026      	b.n	8005d88 <HAL_RCC_OscConfig+0x298>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d42:	d115      	bne.n	8005d70 <HAL_RCC_OscConfig+0x280>
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a05      	ldr	r2, [pc, #20]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a02      	ldr	r2, [pc, #8]	; (8005d60 <HAL_RCC_OscConfig+0x270>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e014      	b.n	8005d88 <HAL_RCC_OscConfig+0x298>
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000
 8005d64:	0800f994 	.word	0x0800f994
 8005d68:	20001268 	.word	0x20001268
 8005d6c:	2000126c 	.word	0x2000126c
 8005d70:	4ba0      	ldr	r3, [pc, #640]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a9f      	ldr	r2, [pc, #636]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	4b9d      	ldr	r3, [pc, #628]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a9c      	ldr	r2, [pc, #624]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d013      	beq.n	8005db8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fd fefc 	bl	8003b8c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fd fef8 	bl	8003b8c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	; 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e276      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005daa:	4b92      	ldr	r3, [pc, #584]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x2a8>
 8005db6:	e014      	b.n	8005de2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fd fee8 	bl	8003b8c <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fd fee4 	bl	8003b8c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e262      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dd2:	4b88      	ldr	r3, [pc, #544]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x2d0>
 8005dde:	e000      	b.n	8005de2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d060      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_OscConfig+0x310>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d119      	bne.n	8005e2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d116      	bne.n	8005e2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e00:	4b7c      	ldr	r3, [pc, #496]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_OscConfig+0x328>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e23f      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e18:	4b76      	ldr	r3, [pc, #472]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	4973      	ldr	r1, [pc, #460]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e2c:	e040      	b.n	8005eb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d023      	beq.n	8005e7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e36:	4b6f      	ldr	r3, [pc, #444]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a6e      	ldr	r2, [pc, #440]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fd fea3 	bl	8003b8c <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4a:	f7fd fe9f 	bl	8003b8c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e21d      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5c:	4b65      	ldr	r3, [pc, #404]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e68:	4b62      	ldr	r3, [pc, #392]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	495f      	ldr	r1, [pc, #380]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	e018      	b.n	8005eb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7e:	4b5d      	ldr	r3, [pc, #372]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a5c      	ldr	r2, [pc, #368]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fe7f 	bl	8003b8c <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fd fe7b 	bl	8003b8c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e1f9      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea4:	4b53      	ldr	r3, [pc, #332]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d03c      	beq.n	8005f36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01c      	beq.n	8005efe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ec4:	4b4b      	ldr	r3, [pc, #300]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eca:	4a4a      	ldr	r2, [pc, #296]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fd fe5a 	bl	8003b8c <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005edc:	f7fd fe56 	bl	8003b8c <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1d4      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eee:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0ef      	beq.n	8005edc <HAL_RCC_OscConfig+0x3ec>
 8005efc:	e01b      	b.n	8005f36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005efe:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f04:	4a3b      	ldr	r2, [pc, #236]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0e:	f7fd fe3d 	bl	8003b8c <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f16:	f7fd fe39 	bl	8003b8c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e1b7      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ef      	bne.n	8005f16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80a6 	beq.w	8006090 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f44:	2300      	movs	r3, #0
 8005f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f48:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f54:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f60:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_RCC_OscConfig+0x508>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d118      	bne.n	8005fae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <HAL_RCC_OscConfig+0x508>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <HAL_RCC_OscConfig+0x508>)
 8005f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f88:	f7fd fe00 	bl	8003b8c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fd fdfc 	bl	8003b8c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e17a      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <HAL_RCC_OscConfig+0x508>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d108      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x4d8>
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fc6:	e029      	b.n	800601c <HAL_RCC_OscConfig+0x52c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d115      	bne.n	8005ffc <HAL_RCC_OscConfig+0x50c>
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fd8:	f043 0304 	orr.w	r3, r3, #4
 8005fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <HAL_RCC_OscConfig+0x504>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ff0:	e014      	b.n	800601c <HAL_RCC_OscConfig+0x52c>
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40007000 	.word	0x40007000
 8005ffc:	4b9c      	ldr	r3, [pc, #624]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	4a9b      	ldr	r2, [pc, #620]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800600c:	4b98      	ldr	r3, [pc, #608]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a97      	ldr	r2, [pc, #604]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006014:	f023 0304 	bic.w	r3, r3, #4
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fd fdb2 	bl	8003b8c <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fd fdae 	bl	8003b8c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e12a      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006042:	4b8b      	ldr	r3, [pc, #556]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ed      	beq.n	800602c <HAL_RCC_OscConfig+0x53c>
 8006050:	e015      	b.n	800607e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fd fd9b 	bl	8003b8c <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fd fd97 	bl	8003b8c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e113      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006070:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1ed      	bne.n	800605a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800607e:	7ffb      	ldrb	r3, [r7, #31]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006084:	4b7a      	ldr	r3, [pc, #488]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006088:	4a79      	ldr	r2, [pc, #484]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800608a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80fe 	beq.w	8006296 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	2b02      	cmp	r3, #2
 80060a0:	f040 80d0 	bne.w	8006244 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060a4:	4b72      	ldr	r3, [pc, #456]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 0203 	and.w	r2, r3, #3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d130      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	3b01      	subs	r3, #1
 80060c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d127      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d11f      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060e4:	2a07      	cmp	r2, #7
 80060e6:	bf14      	ite	ne
 80060e8:	2201      	movne	r2, #1
 80060ea:	2200      	moveq	r2, #0
 80060ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d109      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	3b01      	subs	r3, #1
 8006114:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d06e      	beq.n	80061f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d069      	beq.n	80061f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006120:	4b53      	ldr	r3, [pc, #332]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800612c:	4b50      	ldr	r3, [pc, #320]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0ad      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800613c:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4b      	ldr	r2, [pc, #300]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006146:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006148:	f7fd fd20 	bl	8003b8c <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006150:	f7fd fd1c 	bl	8003b8c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e09a      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006162:	4b43      	ldr	r3, [pc, #268]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800616e:	4b40      	ldr	r3, [pc, #256]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCC_OscConfig+0x784>)
 8006174:	4013      	ands	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800617e:	3a01      	subs	r2, #1
 8006180:	0112      	lsls	r2, r2, #4
 8006182:	4311      	orrs	r1, r2
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006188:	0212      	lsls	r2, r2, #8
 800618a:	4311      	orrs	r1, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006190:	0852      	lsrs	r2, r2, #1
 8006192:	3a01      	subs	r2, #1
 8006194:	0552      	lsls	r2, r2, #21
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800619c:	0852      	lsrs	r2, r2, #1
 800619e:	3a01      	subs	r2, #1
 80061a0:	0652      	lsls	r2, r2, #25
 80061a2:	4311      	orrs	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061a8:	0912      	lsrs	r2, r2, #4
 80061aa:	0452      	lsls	r2, r2, #17
 80061ac:	430a      	orrs	r2, r1
 80061ae:	4930      	ldr	r1, [pc, #192]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061b4:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c0:	4b2b      	ldr	r3, [pc, #172]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061cc:	f7fd fcde 	bl	8003b8c <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fd fcda 	bl	8003b8c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e058      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061f2:	e050      	b.n	8006296 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e04f      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d148      	bne.n	8006296 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006204:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a19      	ldr	r2, [pc, #100]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800620a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800620e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006210:	4b17      	ldr	r3, [pc, #92]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800621a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800621c:	f7fd fcb6 	bl	8003b8c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fd fcb2 	bl	8003b8c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e030      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x734>
 8006242:	e028      	b.n	8006296 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b0c      	cmp	r3, #12
 8006248:	d023      	beq.n	8006292 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <HAL_RCC_OscConfig+0x780>)
 8006250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fd fc99 	bl	8003b8c <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800625c:	e00c      	b.n	8006278 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625e:	f7fd fc95 	bl	8003b8c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d905      	bls.n	8006278 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e013      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
 8006270:	40021000 	.word	0x40021000
 8006274:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <HAL_RCC_OscConfig+0x7b0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ec      	bne.n	800625e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_RCC_OscConfig+0x7b0>)
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	4905      	ldr	r1, [pc, #20]	; (80062a0 <HAL_RCC_OscConfig+0x7b0>)
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_RCC_OscConfig+0x7b4>)
 800628c:	4013      	ands	r3, r2
 800628e:	60cb      	str	r3, [r1, #12]
 8006290:	e001      	b.n	8006296 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000
 80062a4:	feeefffc 	.word	0xfeeefffc

080062a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0e7      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062bc:	4b75      	ldr	r3, [pc, #468]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d910      	bls.n	80062ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b72      	ldr	r3, [pc, #456]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 0207 	bic.w	r2, r3, #7
 80062d2:	4970      	ldr	r1, [pc, #448]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062da:	4b6e      	ldr	r3, [pc, #440]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0cf      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	4b66      	ldr	r3, [pc, #408]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006304:	429a      	cmp	r2, r3
 8006306:	d908      	bls.n	800631a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006308:	4b63      	ldr	r3, [pc, #396]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4960      	ldr	r1, [pc, #384]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04c      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d107      	bne.n	800633e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800632e:	4b5a      	ldr	r3, [pc, #360]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d121      	bne.n	800637e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e0a6      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d115      	bne.n	800637e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e09a      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e08e      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800636e:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e086      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800637e:	4b46      	ldr	r3, [pc, #280]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 0203 	bic.w	r2, r3, #3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4943      	ldr	r1, [pc, #268]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	4313      	orrs	r3, r2
 800638e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006390:	f7fd fbfc 	bl	8003b8c <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	e00a      	b.n	80063ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006398:	f7fd fbf8 	bl	8003b8c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e06e      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 020c 	and.w	r2, r3, #12
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	429a      	cmp	r2, r3
 80063be:	d1eb      	bne.n	8006398 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	4b31      	ldr	r3, [pc, #196]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d8:	429a      	cmp	r2, r3
 80063da:	d208      	bcs.n	80063ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063dc:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	492b      	ldr	r1, [pc, #172]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d210      	bcs.n	800641e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 0207 	bic.w	r2, r3, #7
 8006404:	4923      	ldr	r1, [pc, #140]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640c:	4b21      	ldr	r3, [pc, #132]	; (8006494 <HAL_RCC_ClockConfig+0x1ec>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d001      	beq.n	800641e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e036      	b.n	800648c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642a:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4918      	ldr	r1, [pc, #96]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4910      	ldr	r1, [pc, #64]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006458:	4313      	orrs	r3, r2
 800645a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800645c:	f000 f824 	bl	80064a8 <HAL_RCC_GetSysClockFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <HAL_RCC_ClockConfig+0x1f0>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	091b      	lsrs	r3, r3, #4
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	490b      	ldr	r1, [pc, #44]	; (800649c <HAL_RCC_ClockConfig+0x1f4>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <HAL_RCC_ClockConfig+0x1f8>)
 800647a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <HAL_RCC_ClockConfig+0x1fc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f7fd fb33 	bl	8003aec <HAL_InitTick>
 8006486:	4603      	mov	r3, r0
 8006488:	72fb      	strb	r3, [r7, #11]

  return status;
 800648a:	7afb      	ldrb	r3, [r7, #11]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40022000 	.word	0x40022000
 8006498:	40021000 	.word	0x40021000
 800649c:	0800f994 	.word	0x0800f994
 80064a0:	20001268 	.word	0x20001268
 80064a4:	2000126c 	.word	0x2000126c

080064a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0x34>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	d121      	bne.n	800651a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d11e      	bne.n	800651a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064dc:	4b34      	ldr	r3, [pc, #208]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064e8:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e005      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064f8:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006504:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006518:	e00a      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d102      	bne.n	8006526 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e004      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d101      	bne.n	8006530 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800652c:	4b23      	ldr	r3, [pc, #140]	; (80065bc <HAL_RCC_GetSysClockFreq+0x114>)
 800652e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0c      	cmp	r3, #12
 8006534:	d134      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006536:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d003      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0xa6>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d003      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0xac>
 800654c:	e005      	b.n	800655a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006550:	617b      	str	r3, [r7, #20]
      break;
 8006552:	e005      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006556:	617b      	str	r3, [r7, #20]
      break;
 8006558:	e002      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	617b      	str	r3, [r7, #20]
      break;
 800655e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	3301      	adds	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	fb03 f202 	mul.w	r2, r3, r2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	0e5b      	lsrs	r3, r3, #25
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	3301      	adds	r3, #1
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065a0:	69bb      	ldr	r3, [r7, #24]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	0800f9ac 	.word	0x0800f9ac
 80065b8:	00f42400 	.word	0x00f42400
 80065bc:	007a1200 	.word	0x007a1200

080065c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c6:	681b      	ldr	r3, [r3, #0]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20001268 	.word	0x20001268

080065d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065dc:	f7ff fff0 	bl	80065c0 <HAL_RCC_GetHCLKFreq>
 80065e0:	4602      	mov	r2, r0
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	4904      	ldr	r1, [pc, #16]	; (8006600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ee:	5ccb      	ldrb	r3, [r1, r3]
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40021000 	.word	0x40021000
 8006600:	0800f9a4 	.word	0x0800f9a4

08006604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006608:	f7ff ffda 	bl	80065c0 <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0adb      	lsrs	r3, r3, #11
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4904      	ldr	r1, [pc, #16]	; (800662c <HAL_RCC_GetPCLK2Freq+0x28>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40021000 	.word	0x40021000
 800662c:	0800f9a4 	.word	0x0800f9a4

08006630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800663c:	4b2a      	ldr	r3, [pc, #168]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006648:	f7ff f9ee 	bl	8005a28 <HAL_PWREx_GetVoltageRange>
 800664c:	6178      	str	r0, [r7, #20]
 800664e:	e014      	b.n	800667a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006654:	4a24      	ldr	r2, [pc, #144]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	6593      	str	r3, [r2, #88]	; 0x58
 800665c:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006668:	f7ff f9de 	bl	8005a28 <HAL_PWREx_GetVoltageRange>
 800666c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006678:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006680:	d10b      	bne.n	800669a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d919      	bls.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2ba0      	cmp	r3, #160	; 0xa0
 800668c:	d902      	bls.n	8006694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800668e:	2302      	movs	r3, #2
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e013      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006694:	2301      	movs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	e010      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d902      	bls.n	80066a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066a0:	2303      	movs	r3, #3
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e00a      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d102      	bne.n	80066b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066ac:	2302      	movs	r3, #2
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e004      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b70      	cmp	r3, #112	; 0x70
 80066b6:	d101      	bne.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066b8:	2301      	movs	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f023 0207 	bic.w	r2, r3, #7
 80066c4:	4909      	ldr	r1, [pc, #36]	; (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d001      	beq.n	80066de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40021000 	.word	0x40021000
 80066ec:	40022000 	.word	0x40022000

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006708:	2b00      	cmp	r3, #0
 800670a:	d041      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006710:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006714:	d02a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006716:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800671a:	d824      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800671c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006720:	d008      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006726:	d81e      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800672c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006730:	d010      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006732:	e018      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006734:	4b86      	ldr	r3, [pc, #536]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a85      	ldr	r2, [pc, #532]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800673a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006740:	e015      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fabb 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006752:	e00c      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3320      	adds	r3, #32
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fba6 	bl	8006eac <RCCEx_PLLSAI2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006764:	e003      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	74fb      	strb	r3, [r7, #19]
      break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800676c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676e:	7cfb      	ldrb	r3, [r7, #19]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006774:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006782:	4973      	ldr	r1, [pc, #460]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800678a:	e001      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	7cfb      	ldrb	r3, [r7, #19]
 800678e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d041      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067a4:	d02a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067aa:	d824      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b0:	d008      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b6:	d81e      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80067bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c0:	d010      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067c2:	e018      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067c4:	4b62      	ldr	r3, [pc, #392]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a61      	ldr	r2, [pc, #388]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067d0:	e015      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fa73 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067e2:	e00c      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3320      	adds	r3, #32
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fb5e 	bl	8006eac <RCCEx_PLLSAI2_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067f4:	e003      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	74fb      	strb	r3, [r7, #19]
      break;
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80067fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006804:	4b52      	ldr	r3, [pc, #328]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006812:	494f      	ldr	r1, [pc, #316]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800681a:	e001      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80a0 	beq.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682e:	2300      	movs	r3, #0
 8006830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006848:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	4a40      	ldr	r2, [pc, #256]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	6593      	str	r3, [r2, #88]	; 0x58
 8006854:	4b3e      	ldr	r3, [pc, #248]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006860:	2301      	movs	r3, #1
 8006862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a3a      	ldr	r2, [pc, #232]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006870:	f7fd f98c 	bl	8003b8c <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006876:	e009      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006878:	f7fd f988 	bl	8003b8c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d902      	bls.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	74fb      	strb	r3, [r7, #19]
        break;
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800688c:	4b31      	ldr	r3, [pc, #196]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0ef      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d15c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01f      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d019      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fd f947 	bl	8003b8c <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006900:	e00b      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fd f943 	bl	8003b8c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d902      	bls.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	74fb      	strb	r3, [r7, #19]
            break;
 8006918:	e006      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0ec      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692e:	4b08      	ldr	r3, [pc, #32]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800693e:	4904      	ldr	r1, [pc, #16]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006946:	e009      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006948:	7cfb      	ldrb	r3, [r7, #19]
 800694a:	74bb      	strb	r3, [r7, #18]
 800694c:	e006      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800695c:	7c7b      	ldrb	r3, [r7, #17]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4b9e      	ldr	r3, [pc, #632]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	4a9d      	ldr	r2, [pc, #628]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800697a:	4b98      	ldr	r3, [pc, #608]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006980:	f023 0203 	bic.w	r2, r3, #3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	4994      	ldr	r1, [pc, #592]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800699c:	4b8f      	ldr	r3, [pc, #572]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a2:	f023 020c 	bic.w	r2, r3, #12
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	498c      	ldr	r1, [pc, #560]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069be:	4b87      	ldr	r3, [pc, #540]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	4983      	ldr	r1, [pc, #524]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069e0:	4b7e      	ldr	r3, [pc, #504]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	497b      	ldr	r1, [pc, #492]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a02:	4b76      	ldr	r3, [pc, #472]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	4972      	ldr	r1, [pc, #456]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a24:	4b6d      	ldr	r3, [pc, #436]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	496a      	ldr	r1, [pc, #424]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a46:	4b65      	ldr	r3, [pc, #404]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a54:	4961      	ldr	r1, [pc, #388]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a68:	4b5c      	ldr	r3, [pc, #368]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	4959      	ldr	r1, [pc, #356]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a8a:	4b54      	ldr	r3, [pc, #336]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a98:	4950      	ldr	r1, [pc, #320]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aac:	4b4b      	ldr	r3, [pc, #300]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	4948      	ldr	r1, [pc, #288]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ace:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006adc:	493f      	ldr	r1, [pc, #252]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d028      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006af0:	4b3a      	ldr	r3, [pc, #232]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afe:	4937      	ldr	r1, [pc, #220]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b10:	4b32      	ldr	r3, [pc, #200]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	4a31      	ldr	r2, [pc, #196]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1a:	60d3      	str	r3, [r2, #12]
 8006b1c:	e011      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8c8 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b38:	7cfb      	ldrb	r3, [r7, #19]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b3e:	7cfb      	ldrb	r3, [r7, #19]
 8006b40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d028      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	491f      	ldr	r1, [pc, #124]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b6c:	d106      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b78:	60d3      	str	r3, [r2, #12]
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f899 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b96:	7cfb      	ldrb	r3, [r7, #19]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02b      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bba:	4908      	ldr	r1, [pc, #32]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a02      	ldr	r2, [pc, #8]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd6:	60d3      	str	r3, [r2, #12]
 8006bd8:	e014      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f867 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02f      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1e:	4928      	ldr	r1, [pc, #160]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c2e:	d10d      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f844 	bl	8006cc4 <RCCEx_PLLSAI1_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c40:	7cfb      	ldrb	r3, [r7, #19]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d014      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c46:	7cfb      	ldrb	r3, [r7, #19]
 8006c48:	74bb      	strb	r3, [r7, #18]
 8006c4a:	e011      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3320      	adds	r3, #32
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f925 	bl	8006eac <RCCEx_PLLSAI2_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8a:	490d      	ldr	r1, [pc, #52]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c9e:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000

08006cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cd2:	4b75      	ldr	r3, [pc, #468]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d018      	beq.n	8006d10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cde:	4b72      	ldr	r3, [pc, #456]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0203 	and.w	r2, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d10d      	bne.n	8006d0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006cf6:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
       ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d047      	beq.n	8006d9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
 8006d0e:	e044      	b.n	8006d9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d018      	beq.n	8006d4a <RCCEx_PLLSAI1_Config+0x86>
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d825      	bhi.n	8006d68 <RCCEx_PLLSAI1_Config+0xa4>
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d002      	beq.n	8006d26 <RCCEx_PLLSAI1_Config+0x62>
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d009      	beq.n	8006d38 <RCCEx_PLLSAI1_Config+0x74>
 8006d24:	e020      	b.n	8006d68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d26:	4b60      	ldr	r3, [pc, #384]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11d      	bne.n	8006d6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d36:	e01a      	b.n	8006d6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d38:	4b5b      	ldr	r3, [pc, #364]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d116      	bne.n	8006d72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d48:	e013      	b.n	8006d72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d4a:	4b57      	ldr	r3, [pc, #348]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10f      	bne.n	8006d76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d56:	4b54      	ldr	r3, [pc, #336]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d66:	e006      	b.n	8006d76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e004      	b.n	8006d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e002      	b.n	8006d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d76:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6819      	ldr	r1, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	430b      	orrs	r3, r1
 8006d94:	4944      	ldr	r1, [pc, #272]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d17d      	bne.n	8006e9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006da0:	4b41      	ldr	r3, [pc, #260]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a40      	ldr	r2, [pc, #256]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dac:	f7fc feee 	bl	8003b8c <HAL_GetTick>
 8006db0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006db2:	e009      	b.n	8006dc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006db4:	f7fc feea 	bl	8003b8c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d902      	bls.n	8006dc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	73fb      	strb	r3, [r7, #15]
        break;
 8006dc6:	e005      	b.n	8006dd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dc8:	4b37      	ldr	r3, [pc, #220]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1ef      	bne.n	8006db4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d160      	bne.n	8006e9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d111      	bne.n	8006e04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006de0:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6892      	ldr	r2, [r2, #8]
 8006df0:	0211      	lsls	r1, r2, #8
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68d2      	ldr	r2, [r2, #12]
 8006df6:	0912      	lsrs	r2, r2, #4
 8006df8:	0452      	lsls	r2, r2, #17
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	492a      	ldr	r1, [pc, #168]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	610b      	str	r3, [r1, #16]
 8006e02:	e027      	b.n	8006e54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d112      	bne.n	8006e30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e0a:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6892      	ldr	r2, [r2, #8]
 8006e1a:	0211      	lsls	r1, r2, #8
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6912      	ldr	r2, [r2, #16]
 8006e20:	0852      	lsrs	r2, r2, #1
 8006e22:	3a01      	subs	r2, #1
 8006e24:	0552      	lsls	r2, r2, #21
 8006e26:	430a      	orrs	r2, r1
 8006e28:	491f      	ldr	r1, [pc, #124]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	610b      	str	r3, [r1, #16]
 8006e2e:	e011      	b.n	8006e54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6892      	ldr	r2, [r2, #8]
 8006e40:	0211      	lsls	r1, r2, #8
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6952      	ldr	r2, [r2, #20]
 8006e46:	0852      	lsrs	r2, r2, #1
 8006e48:	3a01      	subs	r2, #1
 8006e4a:	0652      	lsls	r2, r2, #25
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	4916      	ldr	r1, [pc, #88]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e60:	f7fc fe94 	bl	8003b8c <HAL_GetTick>
 8006e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e66:	e009      	b.n	8006e7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e68:	f7fc fe90 	bl	8003b8c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d902      	bls.n	8006e7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	73fb      	strb	r3, [r7, #15]
          break;
 8006e7a:	e005      	b.n	8006e88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0ef      	beq.n	8006e68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	4904      	ldr	r1, [pc, #16]	; (8006ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40021000 	.word	0x40021000

08006eac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006eba:	4b6a      	ldr	r3, [pc, #424]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006ec6:	4b67      	ldr	r3, [pc, #412]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0203 	and.w	r2, r3, #3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d10d      	bne.n	8006ef2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006ede:	4b61      	ldr	r3, [pc, #388]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	091b      	lsrs	r3, r3, #4
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
       ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d047      	beq.n	8006f82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	e044      	b.n	8006f82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d018      	beq.n	8006f32 <RCCEx_PLLSAI2_Config+0x86>
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d825      	bhi.n	8006f50 <RCCEx_PLLSAI2_Config+0xa4>
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <RCCEx_PLLSAI2_Config+0x62>
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d009      	beq.n	8006f20 <RCCEx_PLLSAI2_Config+0x74>
 8006f0c:	e020      	b.n	8006f50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f0e:	4b55      	ldr	r3, [pc, #340]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11d      	bne.n	8006f56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f1e:	e01a      	b.n	8006f56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f20:	4b50      	ldr	r3, [pc, #320]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d116      	bne.n	8006f5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f30:	e013      	b.n	8006f5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f32:	4b4c      	ldr	r3, [pc, #304]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f3e:	4b49      	ldr	r3, [pc, #292]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f4e:	e006      	b.n	8006f5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e004      	b.n	8006f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f56:	bf00      	nop
 8006f58:	e002      	b.n	8006f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f66:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6819      	ldr	r1, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	4939      	ldr	r1, [pc, #228]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d167      	bne.n	8007058 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f88:	4b36      	ldr	r3, [pc, #216]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f94:	f7fc fdfa 	bl	8003b8c <HAL_GetTick>
 8006f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f9a:	e009      	b.n	8006fb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f9c:	f7fc fdf6 	bl	8003b8c <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d902      	bls.n	8006fb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	73fb      	strb	r3, [r7, #15]
        break;
 8006fae:	e005      	b.n	8006fbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fb0:	4b2c      	ldr	r3, [pc, #176]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ef      	bne.n	8006f9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d14a      	bne.n	8007058 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d111      	bne.n	8006fec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fc8:	4b26      	ldr	r3, [pc, #152]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6892      	ldr	r2, [r2, #8]
 8006fd8:	0211      	lsls	r1, r2, #8
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68d2      	ldr	r2, [r2, #12]
 8006fde:	0912      	lsrs	r2, r2, #4
 8006fe0:	0452      	lsls	r2, r2, #17
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	491f      	ldr	r1, [pc, #124]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	614b      	str	r3, [r1, #20]
 8006fea:	e011      	b.n	8007010 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ff4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6892      	ldr	r2, [r2, #8]
 8006ffc:	0211      	lsls	r1, r2, #8
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6912      	ldr	r2, [r2, #16]
 8007002:	0852      	lsrs	r2, r2, #1
 8007004:	3a01      	subs	r2, #1
 8007006:	0652      	lsls	r2, r2, #25
 8007008:	430a      	orrs	r2, r1
 800700a:	4916      	ldr	r1, [pc, #88]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800700c:	4313      	orrs	r3, r2
 800700e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007010:	4b14      	ldr	r3, [pc, #80]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701c:	f7fc fdb6 	bl	8003b8c <HAL_GetTick>
 8007020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007022:	e009      	b.n	8007038 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007024:	f7fc fdb2 	bl	8003b8c <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d902      	bls.n	8007038 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	73fb      	strb	r3, [r7, #15]
          break;
 8007036:	e005      	b.n	8007044 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0ef      	beq.n	8007024 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800704a:	4b06      	ldr	r3, [pc, #24]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	4904      	ldr	r1, [pc, #16]	; (8007064 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007054:	4313      	orrs	r3, r2
 8007056:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40021000 	.word	0x40021000

08007068 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d079      	beq.n	800716e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fc f8e4 	bl	800325c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d058      	beq.n	800715c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	22ca      	movs	r2, #202	; 0xca
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2253      	movs	r2, #83	; 0x53
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9c6 	bl	800744c <RTC_EnterInitMode>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d127      	bne.n	800711a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070dc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6899      	ldr	r1, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	68d2      	ldr	r2, [r2, #12]
 8007104:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6919      	ldr	r1, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	041a      	lsls	r2, r3, #16
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f9ca 	bl	80074b4 <RTC_ExitInitMode>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0203 	bic.w	r2, r2, #3
 8007138:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	625a      	str	r2, [r3, #36]	; 0x24
 800715a:	e001      	b.n	8007160 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_RTC_SetTime+0x1a>
 800718e:	2302      	movs	r3, #2
 8007190:	e08b      	b.n	80072aa <HAL_RTC_SetTime+0x132>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	22ca      	movs	r2, #202	; 0xca
 80071a8:	625a      	str	r2, [r3, #36]	; 0x24
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2253      	movs	r2, #83	; 0x53
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f94a 	bl	800744c <RTC_EnterInitMode>
 80071b8:	4603      	mov	r3, r0
 80071ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d163      	bne.n	800728a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d126      	bne.n	8007216 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f9a5 	bl	8007530 <RTC_ByteToBcd2>
 80071e6:	4603      	mov	r3, r0
 80071e8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f99e 	bl	8007530 <RTC_ByteToBcd2>
 80071f4:	4603      	mov	r3, r0
 80071f6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071f8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	789b      	ldrb	r3, [r3, #2]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f996 	bl	8007530 <RTC_ByteToBcd2>
 8007204:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007206:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	78db      	ldrb	r3, [r3, #3]
 800720e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e018      	b.n	8007248 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2200      	movs	r2, #0
 8007228:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007236:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800723c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007252:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007256:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007266:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	431a      	orrs	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f917 	bl	80074b4 <RTC_ExitInitMode>
 8007286:	4603      	mov	r3, r0
 8007288:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007292:	7cfb      	ldrb	r3, [r7, #19]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd90      	pop	{r4, r7, pc}

080072b2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	b2da      	uxtb	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	0d9b      	lsrs	r3, r3, #22
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d11a      	bne.n	8007360 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f91e 	bl	8007570 <RTC_Bcd2ToByte>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f915 	bl	8007570 <RTC_Bcd2ToByte>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	789b      	ldrb	r3, [r3, #2]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 f90c 	bl	8007570 <RTC_Bcd2ToByte>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007384:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	b2da      	uxtb	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	b2da      	uxtb	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	0b5b      	lsrs	r3, r3, #13
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11a      	bne.n	80073fa <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f8d1 	bl	8007570 <RTC_Bcd2ToByte>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f8c8 	bl	8007570 <RTC_Bcd2ToByte>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	789b      	ldrb	r3, [r3, #2]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f8bf 	bl	8007570 <RTC_Bcd2ToByte>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <HAL_RTC_WaitForSynchro+0x44>)
 8007412:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007414:	f7fc fbba 	bl	8003b8c <HAL_GetTick>
 8007418:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800741a:	e009      	b.n	8007430 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800741c:	f7fc fbb6 	bl	8003b8c <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742a:	d901      	bls.n	8007430 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e007      	b.n	8007440 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0ee      	beq.n	800741c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	0003ff5f 	.word	0x0003ff5f

0800744c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d120      	bne.n	80074a8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007470:	f7fc fb8c 	bl	8003b8c <HAL_GetTick>
 8007474:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007476:	e00d      	b.n	8007494 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007478:	f7fc fb88 	bl	8003b8c <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007486:	d905      	bls.n	8007494 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2203      	movs	r2, #3
 8007490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <RTC_EnterInitMode+0x5c>
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d1e7      	bne.n	8007478 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80074c0:	4b1a      	ldr	r3, [pc, #104]	; (800752c <RTC_ExitInitMode+0x78>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <RTC_ExitInitMode+0x78>)
 80074c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ca:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <RTC_ExitInitMode+0x78>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10c      	bne.n	80074f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ff93 	bl	8007404 <HAL_RTC_WaitForSynchro>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01e      	beq.n	8007522 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2203      	movs	r2, #3
 80074e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e017      	b.n	8007522 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <RTC_ExitInitMode+0x78>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	4a0d      	ldr	r2, [pc, #52]	; (800752c <RTC_ExitInitMode+0x78>)
 80074f8:	f023 0320 	bic.w	r3, r3, #32
 80074fc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff ff80 	bl	8007404 <HAL_RTC_WaitForSynchro>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2203      	movs	r2, #3
 800750e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <RTC_ExitInitMode+0x78>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4a04      	ldr	r2, [pc, #16]	; (800752c <RTC_ExitInitMode+0x78>)
 800751c:	f043 0320 	orr.w	r3, r3, #32
 8007520:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40002800 	.word	0x40002800

08007530 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007542:	e005      	b.n	8007550 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	3b0a      	subs	r3, #10
 800754e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	2b09      	cmp	r3, #9
 8007554:	d8f6      	bhi.n	8007544 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	b2da      	uxtb	r2, r3
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	4313      	orrs	r3, r2
 8007562:	b2db      	uxtb	r3, r3
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	b2db      	uxtb	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	0092      	lsls	r2, r2, #2
 8007584:	4413      	add	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	b2da      	uxtb	r2, r3
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	4413      	add	r3, r2
 8007596:	b2db      	uxtb	r3, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e095      	b.n	80076e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d009      	beq.n	80075dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	61da      	str	r2, [r3, #28]
 80075ce:	e005      	b.n	80075dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fb fede 	bl	80033b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007612:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800761c:	d902      	bls.n	8007624 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e002      	b.n	800762a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007628:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007632:	d007      	beq.n	8007644 <HAL_SPI_Init+0xa0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	ea42 0103 	orr.w	r1, r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	f003 0204 	and.w	r2, r3, #4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80076c0:	ea42 0103 	orr.w	r1, r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b088      	sub	sp, #32
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_SPI_Transmit+0x22>
 8007708:	2302      	movs	r3, #2
 800770a:	e15f      	b.n	80079cc <HAL_SPI_Transmit+0x2e2>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007714:	f7fc fa3a 	bl	8003b8c <HAL_GetTick>
 8007718:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	d002      	beq.n	8007730 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800772a:	2302      	movs	r3, #2
 800772c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800772e:	e148      	b.n	80079c2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_SPI_Transmit+0x52>
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007740:	e13f      	b.n	80079c2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2203      	movs	r2, #3
 8007746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778c:	d10f      	bne.n	80077ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	d007      	beq.n	80077cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077d4:	d94f      	bls.n	8007876 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_SPI_Transmit+0xfa>
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d142      	bne.n	800786a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	881a      	ldrh	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007808:	e02f      	b.n	800786a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d112      	bne.n	800783e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	1c9a      	adds	r2, r3, #2
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800783c:	e015      	b.n	800786a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800783e:	f7fc f9a5 	bl	8003b8c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d803      	bhi.n	8007856 <HAL_SPI_Transmit+0x16c>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d102      	bne.n	800785c <HAL_SPI_Transmit+0x172>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007868:	e0ab      	b.n	80079c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1ca      	bne.n	800780a <HAL_SPI_Transmit+0x120>
 8007874:	e080      	b.n	8007978 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_SPI_Transmit+0x19a>
 800787e:	8afb      	ldrh	r3, [r7, #22]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d174      	bne.n	800796e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	d912      	bls.n	80078b4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	881a      	ldrh	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b02      	subs	r3, #2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078b2:	e05c      	b.n	800796e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80078da:	e048      	b.n	800796e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d12b      	bne.n	8007942 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d912      	bls.n	800791a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	881a      	ldrh	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	1c9a      	adds	r2, r3, #2
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b02      	subs	r3, #2
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007918:	e029      	b.n	800796e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	7812      	ldrb	r2, [r2, #0]
 8007926:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007940:	e015      	b.n	800796e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007942:	f7fc f923 	bl	8003b8c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d803      	bhi.n	800795a <HAL_SPI_Transmit+0x270>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d102      	bne.n	8007960 <HAL_SPI_Transmit+0x276>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800796c:	e029      	b.n	80079c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1b1      	bne.n	80078dc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fcef 	bl	8008360 <SPI_EndRxTxTransaction>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e003      	b.n	80079c2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079e2:	2301      	movs	r3, #1
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_SPI_TransmitReceive+0x26>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e20a      	b.n	8007e10 <HAL_SPI_TransmitReceive+0x43c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a02:	f7fc f8c3 	bl	8003b8c <HAL_GetTick>
 8007a06:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a0e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007a16:	887b      	ldrh	r3, [r7, #2]
 8007a18:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007a1a:	887b      	ldrh	r3, [r7, #2]
 8007a1c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a1e:	7efb      	ldrb	r3, [r7, #27]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d00e      	beq.n	8007a42 <HAL_SPI_TransmitReceive+0x6e>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2a:	d106      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x66>
 8007a34:	7efb      	ldrb	r3, [r7, #27]
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d003      	beq.n	8007a42 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a40:	e1e0      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_SPI_TransmitReceive+0x80>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_SPI_TransmitReceive+0x80>
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a5a:	e1d3      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d003      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	887a      	ldrh	r2, [r7, #2]
 8007a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	887a      	ldrh	r2, [r7, #2]
 8007a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	887a      	ldrh	r2, [r7, #2]
 8007a9c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ab2:	d802      	bhi.n	8007aba <HAL_SPI_TransmitReceive+0xe6>
 8007ab4:	8a3b      	ldrh	r3, [r7, #16]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d908      	bls.n	8007acc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	e007      	b.n	8007adc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ada:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d007      	beq.n	8007afa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b02:	f240 8081 	bls.w	8007c08 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_TransmitReceive+0x140>
 8007b0e:	8a7b      	ldrh	r3, [r7, #18]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d16d      	bne.n	8007bf0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b38:	e05a      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d11b      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x1ac>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d016      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x1ac>
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d113      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	881a      	ldrh	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d11c      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x1f4>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bc8:	f7fb ffe0 	bl	8003b8c <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d80b      	bhi.n	8007bf0 <HAL_SPI_TransmitReceive+0x21c>
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d007      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007bee:	e109      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d19f      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x166>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d199      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x166>
 8007c06:	e0e3      	b.n	8007dd0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x244>
 8007c10:	8a7b      	ldrh	r3, [r7, #18]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	f040 80cf 	bne.w	8007db6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d912      	bls.n	8007c48 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	881a      	ldrh	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	1c9a      	adds	r2, r3, #2
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b02      	subs	r3, #2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c46:	e0b6      	b.n	8007db6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c6e:	e0a2      	b.n	8007db6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d134      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x314>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d02f      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x314>
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d12c      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d912      	bls.n	8007cbe <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	881a      	ldrh	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	1c9a      	adds	r2, r3, #2
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b02      	subs	r3, #2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cbc:	e012      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d148      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x3b4>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d042      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d923      	bls.n	8007d56 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	1c9a      	adds	r2, r3, #2
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b02      	subs	r3, #2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d81f      	bhi.n	8007d84 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	e016      	b.n	8007d84 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f103 020c 	add.w	r2, r3, #12
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d84:	2301      	movs	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d88:	f7fb ff00 	bl	8003b8c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d803      	bhi.n	8007da0 <HAL_SPI_TransmitReceive+0x3cc>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d102      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x3d2>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d107      	bne.n	8007db6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007db4:	e026      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f af57 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x29c>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f47f af50 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fac3 	bl	8008360 <SPI_EndRxTxTransaction>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfa:	e003      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_SPI_Transmit_DMA+0x20>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e0d4      	b.n	8007fe2 <HAL_SPI_Transmit_DMA+0x1ca>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e50:	e0c2      	b.n	8007fd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_SPI_Transmit_DMA+0x46>
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e62:	e0b9      	b.n	8007fd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2203      	movs	r2, #3
 8007e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	88fa      	ldrh	r2, [r7, #6]
 8007e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eae:	d10f      	bne.n	8007ed0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ece:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed4:	4a45      	ldr	r2, [pc, #276]	; (8007fec <HAL_SPI_Transmit_DMA+0x1d4>)
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	4a44      	ldr	r2, [pc, #272]	; (8007ff0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee4:	4a43      	ldr	r2, [pc, #268]	; (8007ff4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eec:	2200      	movs	r2, #0
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007efe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f08:	d82d      	bhi.n	8007f66 <HAL_SPI_Transmit_DMA+0x14e>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f14:	d127      	bne.n	8007f66 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10f      	bne.n	8007f44 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f32:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f42:	e010      	b.n	8007f66 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f52:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	4619      	mov	r1, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	330c      	adds	r3, #12
 8007f76:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f7e:	f7fd fa39 	bl	80053f4 <HAL_DMA_Start_IT>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d008      	beq.n	8007f9a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	f043 0210 	orr.w	r2, r3, #16
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007f98:	e01e      	b.n	8007fd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d007      	beq.n	8007fb8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0220 	orr.w	r2, r2, #32
 8007fc6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0202 	orr.w	r2, r2, #2
 8007fd6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	080080c7 	.word	0x080080c7
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	080080e3 	.word	0x080080e3

08007ff8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800802e:	f7fb fdad 	bl	8003b8c <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b20      	cmp	r3, #32
 8008040:	d03b      	beq.n	80080ba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0220 	bic.w	r2, r2, #32
 8008050:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0202 	bic.w	r2, r2, #2
 8008060:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	2164      	movs	r1, #100	; 0x64
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	f000 f97a 	bl	8008360 <SPI_EndRxTxTransaction>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	f043 0220 	orr.w	r2, r3, #32
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2200      	movs	r2, #0
 80080a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7ff ffaa 	bl	800800c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80080b8:	e002      	b.n	80080c0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	f7fb f890 	bl	80031e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f7ff ff8f 	bl	8007ff8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0203 	bic.w	r2, r2, #3
 80080fe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008104:	f043 0210 	orr.w	r2, r3, #16
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff ff79 	bl	800800c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008134:	f7fb fd2a 	bl	8003b8c <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4413      	add	r3, r2
 8008142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008144:	f7fb fd22 	bl	8003b8c <HAL_GetTick>
 8008148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	015b      	lsls	r3, r3, #5
 8008150:	0d1b      	lsrs	r3, r3, #20
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800815a:	e054      	b.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d050      	beq.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008164:	f7fb fd12 	bl	8003b8c <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	429a      	cmp	r2, r3
 8008172:	d902      	bls.n	800817a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d13d      	bne.n	80081f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008192:	d111      	bne.n	80081b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819c:	d004      	beq.n	80081a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a6:	d107      	bne.n	80081b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c0:	d10f      	bne.n	80081e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e017      	b.n	8008226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3b01      	subs	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4013      	ands	r3, r2
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	bf0c      	ite	eq
 8008216:	2301      	moveq	r3, #1
 8008218:	2300      	movne	r3, #0
 800821a:	b2db      	uxtb	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	429a      	cmp	r2, r3
 8008222:	d19b      	bne.n	800815c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20001268 	.word	0x20001268

08008234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008246:	f7fb fca1 	bl	8003b8c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	4413      	add	r3, r2
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008256:	f7fb fc99 	bl	8003b8c <HAL_GetTick>
 800825a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	00da      	lsls	r2, r3, #3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800827c:	e060      	b.n	8008340 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008284:	d107      	bne.n	8008296 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008294:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d050      	beq.n	8008340 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800829e:	f7fb fc75 	bl	8003b8c <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d902      	bls.n	80082b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d13d      	bne.n	8008330 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082cc:	d111      	bne.n	80082f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d6:	d004      	beq.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e0:	d107      	bne.n	80082f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	d10f      	bne.n	800831c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800831a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e010      	b.n	8008352 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	3b01      	subs	r3, #1
 800833e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4013      	ands	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d196      	bne.n	800827e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20001268 	.word	0x20001268

08008360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2200      	movs	r2, #0
 8008374:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff ff5b 	bl	8008234 <SPI_WaitFifoStateUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	f043 0220 	orr.w	r2, r3, #32
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e027      	b.n	80083e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	2180      	movs	r1, #128	; 0x80
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fec0 	bl	8008124 <SPI_WaitFlagStateUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ae:	f043 0220 	orr.w	r2, r3, #32
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e014      	b.n	80083e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff ff34 	bl	8008234 <SPI_WaitFifoStateUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d6:	f043 0220 	orr.w	r2, r3, #32
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e000      	b.n	80083e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e049      	b.n	8008492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fb fa5a 	bl	80038cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f000 fa00 	bl	8008830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d001      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e04f      	b.n	8008554 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a23      	ldr	r2, [pc, #140]	; (8008560 <HAL_TIM_Base_Start_IT+0xc4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01d      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d018      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <HAL_TIM_Base_Start_IT+0xc8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_TIM_Base_Start_IT+0xcc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00e      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <HAL_TIM_Base_Start_IT+0xd0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d009      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <HAL_TIM_Base_Start_IT+0xd4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d004      	beq.n	8008512 <HAL_TIM_Base_Start_IT+0x76>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a19      	ldr	r2, [pc, #100]	; (8008574 <HAL_TIM_Base_Start_IT+0xd8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d115      	bne.n	800853e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	4b17      	ldr	r3, [pc, #92]	; (8008578 <HAL_TIM_Base_Start_IT+0xdc>)
 800851a:	4013      	ands	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b06      	cmp	r3, #6
 8008522:	d015      	beq.n	8008550 <HAL_TIM_Base_Start_IT+0xb4>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852a:	d011      	beq.n	8008550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853c:	e008      	b.n	8008550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0201 	orr.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e000      	b.n	8008552 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40012c00 	.word	0x40012c00
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40013400 	.word	0x40013400
 8008574:	40014000 	.word	0x40014000
 8008578:	00010007 	.word	0x00010007

0800857c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	f241 1311 	movw	r3, #4369	; 0x1111
 800859e:	4013      	ands	r3, r2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10f      	bne.n	80085c4 <HAL_TIM_Base_Stop_IT+0x48>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	f240 4344 	movw	r3, #1092	; 0x444
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <HAL_TIM_Base_Stop_IT+0x48>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d020      	beq.n	800863e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01b      	beq.n	800863e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f06f 0202 	mvn.w	r2, #2
 800860e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f003 0303 	and.w	r3, r3, #3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8e4 	bl	80087f2 <HAL_TIM_IC_CaptureCallback>
 800862a:	e005      	b.n	8008638 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8d6 	bl	80087de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f8e7 	bl	8008806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d020      	beq.n	800868a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f06f 0204 	mvn.w	r2, #4
 800865a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f8be 	bl	80087f2 <HAL_TIM_IC_CaptureCallback>
 8008676:	e005      	b.n	8008684 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8b0 	bl	80087de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f8c1 	bl	8008806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d020      	beq.n	80086d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d01b      	beq.n	80086d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f06f 0208 	mvn.w	r2, #8
 80086a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2204      	movs	r2, #4
 80086ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f898 	bl	80087f2 <HAL_TIM_IC_CaptureCallback>
 80086c2:	e005      	b.n	80086d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f88a 	bl	80087de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f89b 	bl	8008806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d020      	beq.n	8008722 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01b      	beq.n	8008722 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f06f 0210 	mvn.w	r2, #16
 80086f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2208      	movs	r2, #8
 80086f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f872 	bl	80087f2 <HAL_TIM_IC_CaptureCallback>
 800870e:	e005      	b.n	800871c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f864 	bl	80087de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f875 	bl	8008806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00c      	beq.n	8008746 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0201 	mvn.w	r2, #1
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7f9 ff05 	bl	8002550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00c      	beq.n	800876a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f98f 	bl	8008a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00c      	beq.n	800878e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f987 	bl	8008a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00c      	beq.n	80087b2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d007      	beq.n	80087b2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f834 	bl	800881a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00c      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d007      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f06f 0220 	mvn.w	r2, #32
 80087ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f94f 	bl	8008a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
	...

08008830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a40      	ldr	r2, [pc, #256]	; (8008944 <TIM_Base_SetConfig+0x114>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d013      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884e:	d00f      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a3d      	ldr	r2, [pc, #244]	; (8008948 <TIM_Base_SetConfig+0x118>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00b      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a3c      	ldr	r2, [pc, #240]	; (800894c <TIM_Base_SetConfig+0x11c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d007      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a3b      	ldr	r2, [pc, #236]	; (8008950 <TIM_Base_SetConfig+0x120>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a3a      	ldr	r2, [pc, #232]	; (8008954 <TIM_Base_SetConfig+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d108      	bne.n	8008882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2f      	ldr	r2, [pc, #188]	; (8008944 <TIM_Base_SetConfig+0x114>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01f      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008890:	d01b      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2c      	ldr	r2, [pc, #176]	; (8008948 <TIM_Base_SetConfig+0x118>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d017      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2b      	ldr	r2, [pc, #172]	; (800894c <TIM_Base_SetConfig+0x11c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <TIM_Base_SetConfig+0x120>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00f      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a29      	ldr	r2, [pc, #164]	; (8008954 <TIM_Base_SetConfig+0x124>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00b      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a28      	ldr	r2, [pc, #160]	; (8008958 <TIM_Base_SetConfig+0x128>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a27      	ldr	r2, [pc, #156]	; (800895c <TIM_Base_SetConfig+0x12c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_Base_SetConfig+0x9a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a26      	ldr	r2, [pc, #152]	; (8008960 <TIM_Base_SetConfig+0x130>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d108      	bne.n	80088dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <TIM_Base_SetConfig+0x114>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00f      	beq.n	8008928 <TIM_Base_SetConfig+0xf8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a12      	ldr	r2, [pc, #72]	; (8008954 <TIM_Base_SetConfig+0x124>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_Base_SetConfig+0xf8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a11      	ldr	r2, [pc, #68]	; (8008958 <TIM_Base_SetConfig+0x128>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d007      	beq.n	8008928 <TIM_Base_SetConfig+0xf8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a10      	ldr	r2, [pc, #64]	; (800895c <TIM_Base_SetConfig+0x12c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_Base_SetConfig+0xf8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a0f      	ldr	r2, [pc, #60]	; (8008960 <TIM_Base_SetConfig+0x130>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d103      	bne.n	8008930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	615a      	str	r2, [r3, #20]
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40000400 	.word	0x40000400
 800894c:	40000800 	.word	0x40000800
 8008950:	40000c00 	.word	0x40000c00
 8008954:	40013400 	.word	0x40013400
 8008958:	40014000 	.word	0x40014000
 800895c:	40014400 	.word	0x40014400
 8008960:	40014800 	.word	0x40014800

08008964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008978:	2302      	movs	r3, #2
 800897a:	e068      	b.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a2e      	ldr	r2, [pc, #184]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d004      	beq.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a2d      	ldr	r2, [pc, #180]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d108      	bne.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d01d      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ee:	d018      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d013      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1a      	ldr	r2, [pc, #104]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00e      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a14      	ldr	r2, [pc, #80]	; (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d10c      	bne.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40012c00 	.word	0x40012c00
 8008a60:	40013400 	.word	0x40013400
 8008a64:	40000400 	.word	0x40000400
 8008a68:	40000800 	.word	0x40000800
 8008a6c:	40000c00 	.word	0x40000c00
 8008a70:	40014000 	.word	0x40014000

08008a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e040      	b.n	8008b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fa ff6c 	bl	80039b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2224      	movs	r2, #36	; 0x24
 8008adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fb6a 	bl	80091d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8af 	bl	8008c60 <UART_SetConfig>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e01b      	b.n	8008b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fbe9 	bl	8009314 <UART_CheckIdleState>
 8008b42:	4603      	mov	r3, r0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d178      	bne.n	8008c56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_UART_Transmit+0x24>
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e071      	b.n	8008c58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2221      	movs	r2, #33	; 0x21
 8008b80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b82:	f7fb f803 	bl	8003b8c <HAL_GetTick>
 8008b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_UART_Transmit+0x68>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e003      	b.n	8008bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bbc:	e030      	b.n	8008c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2180      	movs	r1, #128	; 0x80
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 fc4b 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e03c      	b.n	8008c58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	881a      	ldrh	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e008      	b.n	8008c0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	b292      	uxth	r2, r2
 8008c06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1c8      	bne.n	8008bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2200      	movs	r2, #0
 8008c34:	2140      	movs	r1, #64	; 0x40
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 fc14 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2220      	movs	r2, #32
 8008c46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e005      	b.n	8008c58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e000      	b.n	8008c58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008c56:	2302      	movs	r3, #2
  }
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c64:	b08a      	sub	sp, #40	; 0x28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4ba4      	ldr	r3, [pc, #656]	; (8008f20 <UART_SetConfig+0x2c0>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a99      	ldr	r2, [pc, #612]	; (8008f24 <UART_SetConfig+0x2c4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a90      	ldr	r2, [pc, #576]	; (8008f28 <UART_SetConfig+0x2c8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d126      	bne.n	8008d38 <UART_SetConfig+0xd8>
 8008cea:	4b90      	ldr	r3, [pc, #576]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d81b      	bhi.n	8008d30 <UART_SetConfig+0xd0>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0xa0>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d11 	.word	0x08008d11
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d19 	.word	0x08008d19
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d16:	e116      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d1e:	e112      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d26:	e10e      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d2e:	e10a      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d36:	e106      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a7c      	ldr	r2, [pc, #496]	; (8008f30 <UART_SetConfig+0x2d0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d138      	bne.n	8008db4 <UART_SetConfig+0x154>
 8008d42:	4b7a      	ldr	r3, [pc, #488]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d48:	f003 030c 	and.w	r3, r3, #12
 8008d4c:	2b0c      	cmp	r3, #12
 8008d4e:	d82d      	bhi.n	8008dac <UART_SetConfig+0x14c>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <UART_SetConfig+0xf8>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008dad 	.word	0x08008dad
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008d9d 	.word	0x08008d9d
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008dad 	.word	0x08008dad
 8008d74:	08008dad 	.word	0x08008dad
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008dad 	.word	0x08008dad
 8008d80:	08008dad 	.word	0x08008dad
 8008d84:	08008dad 	.word	0x08008dad
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d92:	e0d8      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d94:	2302      	movs	r3, #2
 8008d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d9a:	e0d4      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008da2:	e0d0      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008da4:	2308      	movs	r3, #8
 8008da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008daa:	e0cc      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008dac:	2310      	movs	r3, #16
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008db2:	e0c8      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a5e      	ldr	r2, [pc, #376]	; (8008f34 <UART_SetConfig+0x2d4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d125      	bne.n	8008e0a <UART_SetConfig+0x1aa>
 8008dbe:	4b5b      	ldr	r3, [pc, #364]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dc8:	2b30      	cmp	r3, #48	; 0x30
 8008dca:	d016      	beq.n	8008dfa <UART_SetConfig+0x19a>
 8008dcc:	2b30      	cmp	r3, #48	; 0x30
 8008dce:	d818      	bhi.n	8008e02 <UART_SetConfig+0x1a2>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d00a      	beq.n	8008dea <UART_SetConfig+0x18a>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d814      	bhi.n	8008e02 <UART_SetConfig+0x1a2>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <UART_SetConfig+0x182>
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d008      	beq.n	8008df2 <UART_SetConfig+0x192>
 8008de0:	e00f      	b.n	8008e02 <UART_SetConfig+0x1a2>
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de8:	e0ad      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008dea:	2302      	movs	r3, #2
 8008dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df0:	e0a9      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008df2:	2304      	movs	r3, #4
 8008df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df8:	e0a5      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e00:	e0a1      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e02:	2310      	movs	r3, #16
 8008e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e08:	e09d      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a4a      	ldr	r2, [pc, #296]	; (8008f38 <UART_SetConfig+0x2d8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d125      	bne.n	8008e60 <UART_SetConfig+0x200>
 8008e14:	4b45      	ldr	r3, [pc, #276]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e20:	d016      	beq.n	8008e50 <UART_SetConfig+0x1f0>
 8008e22:	2bc0      	cmp	r3, #192	; 0xc0
 8008e24:	d818      	bhi.n	8008e58 <UART_SetConfig+0x1f8>
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d00a      	beq.n	8008e40 <UART_SetConfig+0x1e0>
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	d814      	bhi.n	8008e58 <UART_SetConfig+0x1f8>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <UART_SetConfig+0x1d8>
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d008      	beq.n	8008e48 <UART_SetConfig+0x1e8>
 8008e36:	e00f      	b.n	8008e58 <UART_SetConfig+0x1f8>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3e:	e082      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e40:	2302      	movs	r3, #2
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e46:	e07e      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4e:	e07a      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e50:	2308      	movs	r3, #8
 8008e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e56:	e076      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e5e:	e072      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a35      	ldr	r2, [pc, #212]	; (8008f3c <UART_SetConfig+0x2dc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d12a      	bne.n	8008ec0 <UART_SetConfig+0x260>
 8008e6a:	4b30      	ldr	r3, [pc, #192]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e78:	d01a      	beq.n	8008eb0 <UART_SetConfig+0x250>
 8008e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e7e:	d81b      	bhi.n	8008eb8 <UART_SetConfig+0x258>
 8008e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e84:	d00c      	beq.n	8008ea0 <UART_SetConfig+0x240>
 8008e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8a:	d815      	bhi.n	8008eb8 <UART_SetConfig+0x258>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <UART_SetConfig+0x238>
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e94:	d008      	beq.n	8008ea8 <UART_SetConfig+0x248>
 8008e96:	e00f      	b.n	8008eb8 <UART_SetConfig+0x258>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e9e:	e052      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ea6:	e04e      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eae:	e04a      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eb6:	e046      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ebe:	e042      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a17      	ldr	r2, [pc, #92]	; (8008f24 <UART_SetConfig+0x2c4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d13a      	bne.n	8008f40 <UART_SetConfig+0x2e0>
 8008eca:	4b18      	ldr	r3, [pc, #96]	; (8008f2c <UART_SetConfig+0x2cc>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ed8:	d01a      	beq.n	8008f10 <UART_SetConfig+0x2b0>
 8008eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ede:	d81b      	bhi.n	8008f18 <UART_SetConfig+0x2b8>
 8008ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ee4:	d00c      	beq.n	8008f00 <UART_SetConfig+0x2a0>
 8008ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eea:	d815      	bhi.n	8008f18 <UART_SetConfig+0x2b8>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <UART_SetConfig+0x298>
 8008ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef4:	d008      	beq.n	8008f08 <UART_SetConfig+0x2a8>
 8008ef6:	e00f      	b.n	8008f18 <UART_SetConfig+0x2b8>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008efe:	e022      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008f00:	2302      	movs	r3, #2
 8008f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f06:	e01e      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f0e:	e01a      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f16:	e016      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f1e:	e012      	b.n	8008f46 <UART_SetConfig+0x2e6>
 8008f20:	efff69f3 	.word	0xefff69f3
 8008f24:	40008000 	.word	0x40008000
 8008f28:	40013800 	.word	0x40013800
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	40004400 	.word	0x40004400
 8008f34:	40004800 	.word	0x40004800
 8008f38:	40004c00 	.word	0x40004c00
 8008f3c:	40005000 	.word	0x40005000
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a9f      	ldr	r2, [pc, #636]	; (80091c8 <UART_SetConfig+0x568>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d17a      	bne.n	8009046 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d824      	bhi.n	8008fa2 <UART_SetConfig+0x342>
 8008f58:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <UART_SetConfig+0x300>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008fa3 	.word	0x08008fa3
 8008f68:	08008f8d 	.word	0x08008f8d
 8008f6c:	08008fa3 	.word	0x08008fa3
 8008f70:	08008f93 	.word	0x08008f93
 8008f74:	08008fa3 	.word	0x08008fa3
 8008f78:	08008fa3 	.word	0x08008fa3
 8008f7c:	08008fa3 	.word	0x08008fa3
 8008f80:	08008f9b 	.word	0x08008f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f84:	f7fd fb28 	bl	80065d8 <HAL_RCC_GetPCLK1Freq>
 8008f88:	61f8      	str	r0, [r7, #28]
        break;
 8008f8a:	e010      	b.n	8008fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f8c:	4b8f      	ldr	r3, [pc, #572]	; (80091cc <UART_SetConfig+0x56c>)
 8008f8e:	61fb      	str	r3, [r7, #28]
        break;
 8008f90:	e00d      	b.n	8008fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f92:	f7fd fa89 	bl	80064a8 <HAL_RCC_GetSysClockFreq>
 8008f96:	61f8      	str	r0, [r7, #28]
        break;
 8008f98:	e009      	b.n	8008fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f9e:	61fb      	str	r3, [r7, #28]
        break;
 8008fa0:	e005      	b.n	8008fae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80fb 	beq.w	80091ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	4413      	add	r3, r2
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d305      	bcc.n	8008fd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d903      	bls.n	8008fda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fd8:	e0e8      	b.n	80091ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	461c      	mov	r4, r3
 8008fe0:	4615      	mov	r5, r2
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	f04f 0300 	mov.w	r3, #0
 8008fea:	022b      	lsls	r3, r5, #8
 8008fec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ff0:	0222      	lsls	r2, r4, #8
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6849      	ldr	r1, [r1, #4]
 8008ff6:	0849      	lsrs	r1, r1, #1
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4688      	mov	r8, r1
 8008ffc:	4681      	mov	r9, r0
 8008ffe:	eb12 0a08 	adds.w	sl, r2, r8
 8009002:	eb43 0b09 	adc.w	fp, r3, r9
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	603b      	str	r3, [r7, #0]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009014:	4650      	mov	r0, sl
 8009016:	4659      	mov	r1, fp
 8009018:	f7f7 fdc6 	bl	8000ba8 <__aeabi_uldivmod>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4613      	mov	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800902a:	d308      	bcc.n	800903e <UART_SetConfig+0x3de>
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009032:	d204      	bcs.n	800903e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	60da      	str	r2, [r3, #12]
 800903c:	e0b6      	b.n	80091ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009044:	e0b2      	b.n	80091ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904e:	d15e      	bne.n	800910e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009054:	2b08      	cmp	r3, #8
 8009056:	d828      	bhi.n	80090aa <UART_SetConfig+0x44a>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <UART_SetConfig+0x400>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009085 	.word	0x08009085
 8009064:	0800908d 	.word	0x0800908d
 8009068:	08009095 	.word	0x08009095
 800906c:	080090ab 	.word	0x080090ab
 8009070:	0800909b 	.word	0x0800909b
 8009074:	080090ab 	.word	0x080090ab
 8009078:	080090ab 	.word	0x080090ab
 800907c:	080090ab 	.word	0x080090ab
 8009080:	080090a3 	.word	0x080090a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009084:	f7fd faa8 	bl	80065d8 <HAL_RCC_GetPCLK1Freq>
 8009088:	61f8      	str	r0, [r7, #28]
        break;
 800908a:	e014      	b.n	80090b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800908c:	f7fd faba 	bl	8006604 <HAL_RCC_GetPCLK2Freq>
 8009090:	61f8      	str	r0, [r7, #28]
        break;
 8009092:	e010      	b.n	80090b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009094:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <UART_SetConfig+0x56c>)
 8009096:	61fb      	str	r3, [r7, #28]
        break;
 8009098:	e00d      	b.n	80090b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909a:	f7fd fa05 	bl	80064a8 <HAL_RCC_GetSysClockFreq>
 800909e:	61f8      	str	r0, [r7, #28]
        break;
 80090a0:	e009      	b.n	80090b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a6:	61fb      	str	r3, [r7, #28]
        break;
 80090a8:	e005      	b.n	80090b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d077      	beq.n	80091ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	005a      	lsls	r2, r3, #1
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	441a      	add	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b0f      	cmp	r3, #15
 80090d6:	d916      	bls.n	8009106 <UART_SetConfig+0x4a6>
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090de:	d212      	bcs.n	8009106 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f023 030f 	bic.w	r3, r3, #15
 80090e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	8afb      	ldrh	r3, [r7, #22]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	8afa      	ldrh	r2, [r7, #22]
 8009102:	60da      	str	r2, [r3, #12]
 8009104:	e052      	b.n	80091ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800910c:	e04e      	b.n	80091ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800910e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009112:	2b08      	cmp	r3, #8
 8009114:	d827      	bhi.n	8009166 <UART_SetConfig+0x506>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x4bc>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009141 	.word	0x08009141
 8009120:	08009149 	.word	0x08009149
 8009124:	08009151 	.word	0x08009151
 8009128:	08009167 	.word	0x08009167
 800912c:	08009157 	.word	0x08009157
 8009130:	08009167 	.word	0x08009167
 8009134:	08009167 	.word	0x08009167
 8009138:	08009167 	.word	0x08009167
 800913c:	0800915f 	.word	0x0800915f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009140:	f7fd fa4a 	bl	80065d8 <HAL_RCC_GetPCLK1Freq>
 8009144:	61f8      	str	r0, [r7, #28]
        break;
 8009146:	e014      	b.n	8009172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009148:	f7fd fa5c 	bl	8006604 <HAL_RCC_GetPCLK2Freq>
 800914c:	61f8      	str	r0, [r7, #28]
        break;
 800914e:	e010      	b.n	8009172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <UART_SetConfig+0x56c>)
 8009152:	61fb      	str	r3, [r7, #28]
        break;
 8009154:	e00d      	b.n	8009172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009156:	f7fd f9a7 	bl	80064a8 <HAL_RCC_GetSysClockFreq>
 800915a:	61f8      	str	r0, [r7, #28]
        break;
 800915c:	e009      	b.n	8009172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800915e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009162:	61fb      	str	r3, [r7, #28]
        break;
 8009164:	e005      	b.n	8009172 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009170:	bf00      	nop
    }

    if (pclk != 0U)
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d019      	beq.n	80091ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	085a      	lsrs	r2, r3, #1
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d909      	bls.n	80091a6 <UART_SetConfig+0x546>
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009198:	d205      	bcs.n	80091a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60da      	str	r2, [r3, #12]
 80091a4:	e002      	b.n	80091ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80091b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3728      	adds	r7, #40	; 0x28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091c6:	bf00      	nop
 80091c8:	40008000 	.word	0x40008000
 80091cc:	00f42400 	.word	0x00f42400

080091d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	f003 0310 	and.w	r3, r3, #16
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01a      	beq.n	80092e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ce:	d10a      	bne.n	80092e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	605a      	str	r2, [r3, #4]
  }
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b098      	sub	sp, #96	; 0x60
 8009318:	af02      	add	r7, sp, #8
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009324:	f7fa fc32 	bl	8003b8c <HAL_GetTick>
 8009328:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b08      	cmp	r3, #8
 8009336:	d12e      	bne.n	8009396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009340:	2200      	movs	r2, #0
 8009342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f88c 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d021      	beq.n	8009396 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009366:	653b      	str	r3, [r7, #80]	; 0x50
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	647b      	str	r3, [r7, #68]	; 0x44
 8009372:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e6      	bne.n	8009352 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e062      	b.n	800945c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d149      	bne.n	8009438 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ac:	2200      	movs	r2, #0
 80093ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f856 	bl	8009464 <UART_WaitOnFlagUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d03c      	beq.n	8009438 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	623b      	str	r3, [r7, #32]
   return(result);
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093dc:	633b      	str	r3, [r7, #48]	; 0x30
 80093de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e6      	bne.n	80093be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3308      	adds	r3, #8
 800940e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009410:	61fa      	str	r2, [r7, #28]
 8009412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	617b      	str	r3, [r7, #20]
   return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e5      	bne.n	80093f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e011      	b.n	800945c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3758      	adds	r7, #88	; 0x58
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	4613      	mov	r3, r2
 8009472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009474:	e049      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947c:	d045      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947e:	f7fa fb85 	bl	8003b8c <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	429a      	cmp	r2, r3
 800948c:	d302      	bcc.n	8009494 <UART_WaitOnFlagUntilTimeout+0x30>
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e048      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d031      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d110      	bne.n	80094d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2208      	movs	r2, #8
 80094ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f838 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2208      	movs	r2, #8
 80094c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e029      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e4:	d111      	bne.n	800950a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f81e 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e00f      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69da      	ldr	r2, [r3, #28]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	429a      	cmp	r2, r3
 8009526:	d0a6      	beq.n	8009476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009532:	b480      	push	{r7}
 8009534:	b095      	sub	sp, #84	; 0x54
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800954e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009558:	643b      	str	r3, [r7, #64]	; 0x40
 800955a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800955e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	61fb      	str	r3, [r7, #28]
   return(result);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	64bb      	str	r3, [r7, #72]	; 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d118      	bne.n	80095da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f023 0310 	bic.w	r3, r3, #16
 80095bc:	647b      	str	r3, [r7, #68]	; 0x44
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	6979      	ldr	r1, [r7, #20]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80095ee:	bf00      	nop
 80095f0:	3754      	adds	r7, #84	; 0x54
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <MX_FATFS_Init+0x18>)
 8009602:	4805      	ldr	r0, [pc, #20]	; (8009618 <MX_FATFS_Init+0x1c>)
 8009604:	f003 f9a0 	bl	800c948 <FATFS_LinkDriver>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <MX_FATFS_Init+0x20>)
 800960e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009610:	bf00      	nop
 8009612:	bd80      	pop	{r7, pc}
 8009614:	2000edec 	.word	0x2000edec
 8009618:	20001274 	.word	0x20001274
 800961c:	2000ede8 	.word	0x2000ede8

08009620 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009624:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009626:	4618      	mov	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;   // KP
    //return Stat;		   // KP
    return SD_disk_initialize(pdrv);
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	4618      	mov	r0, r3
 800963e:	f7f7 fee3 	bl	8001408 <SD_disk_initialize>
 8009642:	4603      	mov	r3, r0
 8009644:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	4603      	mov	r3, r0
 8009656:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;	//KP
    //return Stat;			//KP
    return SD_disk_status(pdrv);
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	4618      	mov	r0, r3
 800965c:	f7f7 ffba 	bl	80015d4 <SD_disk_status>
 8009660:	4603      	mov	r3, r0
 8009662:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	607a      	str	r2, [r7, #4]
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;		//KP
    return SD_disk_read(pdrv, buff, sector, count);
 800967c:	7bf8      	ldrb	r0, [r7, #15]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	f7f7 ffbc 	bl	8001600 <SD_disk_read>
 8009688:	4603      	mov	r3, r0
 800968a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4603      	mov	r3, r0
 80096a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;		//KP
    return SD_disk_write(pdrv, buff, sector, count);
 80096a4:	7bf8      	ldrb	r0, [r7, #15]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	f7f8 f812 	bl	80016d4 <SD_disk_write>
 80096b0:	4603      	mov	r3, r0
 80096b2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	603a      	str	r2, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
 80096c8:	460b      	mov	r3, r1
 80096ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;		//KP
    //return res;					//KP
    return SD_disk_ioctl(pdrv, cmd, buff);
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	79b9      	ldrb	r1, [r7, #6]
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f8 f882 	bl	80017dc <SD_disk_ioctl>
 80096d8:	4603      	mov	r3, r0
 80096da:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	4a08      	ldr	r2, [pc, #32]	; (8009714 <disk_status+0x30>)
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	79fa      	ldrb	r2, [r7, #7]
 80096fc:	4905      	ldr	r1, [pc, #20]	; (8009714 <disk_status+0x30>)
 80096fe:	440a      	add	r2, r1
 8009700:	7a12      	ldrb	r2, [r2, #8]
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	73fb      	strb	r3, [r7, #15]
  return stat;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2000f018 	.word	0x2000f018

08009718 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	4a0d      	ldr	r2, [pc, #52]	; (8009760 <disk_initialize+0x48>)
 800972a:	5cd3      	ldrb	r3, [r2, r3]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d111      	bne.n	8009754 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	4a0b      	ldr	r2, [pc, #44]	; (8009760 <disk_initialize+0x48>)
 8009734:	2101      	movs	r1, #1
 8009736:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	4a09      	ldr	r2, [pc, #36]	; (8009760 <disk_initialize+0x48>)
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4906      	ldr	r1, [pc, #24]	; (8009760 <disk_initialize+0x48>)
 8009748:	440a      	add	r2, r1
 800974a:	7a12      	ldrb	r2, [r2, #8]
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	2000f018 	.word	0x2000f018

08009764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4a0a      	ldr	r2, [pc, #40]	; (80097a0 <disk_read+0x3c>)
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	689c      	ldr	r4, [r3, #8]
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4a07      	ldr	r2, [pc, #28]	; (80097a0 <disk_read+0x3c>)
 8009784:	4413      	add	r3, r2
 8009786:	7a18      	ldrb	r0, [r3, #8]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	47a0      	blx	r4
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]
  return res;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd90      	pop	{r4, r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000f018 	.word	0x2000f018

080097a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4a0a      	ldr	r2, [pc, #40]	; (80097e0 <disk_write+0x3c>)
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	68dc      	ldr	r4, [r3, #12]
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4a07      	ldr	r2, [pc, #28]	; (80097e0 <disk_write+0x3c>)
 80097c4:	4413      	add	r3, r2
 80097c6:	7a18      	ldrb	r0, [r3, #8]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	47a0      	blx	r4
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd90      	pop	{r4, r7, pc}
 80097de:	bf00      	nop
 80097e0:	2000f018 	.word	0x2000f018

080097e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	603a      	str	r2, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
 80097f0:	460b      	mov	r3, r1
 80097f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	4a09      	ldr	r2, [pc, #36]	; (800981c <disk_ioctl+0x38>)
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	79fa      	ldrb	r2, [r7, #7]
 8009802:	4906      	ldr	r1, [pc, #24]	; (800981c <disk_ioctl+0x38>)
 8009804:	440a      	add	r2, r1
 8009806:	7a10      	ldrb	r0, [r2, #8]
 8009808:	79b9      	ldrb	r1, [r7, #6]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
  return res;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2000f018 	.word	0x2000f018

08009820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	b21a      	sxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b21b      	sxth	r3, r3
 800983c:	4313      	orrs	r3, r2
 800983e:	b21b      	sxth	r3, r3
 8009840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009842:	89fb      	ldrh	r3, [r7, #14]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3303      	adds	r3, #3
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	3202      	adds	r2, #2
 8009868:	7812      	ldrb	r2, [r2, #0]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	3201      	adds	r2, #1
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
	return rv;
 8009888:	68fb      	ldr	r3, [r7, #12]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	887a      	ldrh	r2, [r7, #2]
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	0a1b      	lsrs	r3, r3, #8
 80098b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	887a      	ldrh	r2, [r7, #2]
 80098bc:	b2d2      	uxtb	r2, r2
 80098be:	701a      	strb	r2, [r3, #0]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	0a1b      	lsrs	r3, r3, #8
 80098e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	0a1b      	lsrs	r3, r3, #8
 800990a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00d      	beq.n	800995a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	1c53      	adds	r3, r2, #1
 8009942:	613b      	str	r3, [r7, #16]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	6179      	str	r1, [r7, #20]
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f1      	bne.n	800993e <mem_cpy+0x1a>
	}
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009966:	b480      	push	{r7}
 8009968:	b087      	sub	sp, #28
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	617a      	str	r2, [r7, #20]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1f3      	bne.n	8009976 <mem_set+0x10>
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	371c      	adds	r7, #28
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	61fa      	str	r2, [r7, #28]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	4619      	mov	r1, r3
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	61ba      	str	r2, [r7, #24]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	1acb      	subs	r3, r1, r3
 80099c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <mem_cmp+0x40>
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0eb      	beq.n	80099b4 <mem_cmp+0x18>

	return r;
 80099dc:	697b      	ldr	r3, [r7, #20]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3724      	adds	r7, #36	; 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099f4:	e002      	b.n	80099fc <chk_chr+0x12>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3301      	adds	r3, #1
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <chk_chr+0x26>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d1f2      	bne.n	80099f6 <chk_chr+0xc>
	return *str;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e029      	b.n	8009a88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a34:	4a27      	ldr	r2, [pc, #156]	; (8009ad4 <chk_lock+0xb4>)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	011b      	lsls	r3, r3, #4
 8009a3a:	4413      	add	r3, r2
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d01d      	beq.n	8009a7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a42:	4a24      	ldr	r2, [pc, #144]	; (8009ad4 <chk_lock+0xb4>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	011b      	lsls	r3, r3, #4
 8009a48:	4413      	add	r3, r2
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d116      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a54:	4a1f      	ldr	r2, [pc, #124]	; (8009ad4 <chk_lock+0xb4>)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d10c      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a68:	4a1a      	ldr	r2, [pc, #104]	; (8009ad4 <chk_lock+0xb4>)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	4413      	add	r3, r2
 8009a70:	3308      	adds	r3, #8
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d102      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a7c:	e007      	b.n	8009a8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d9d2      	bls.n	8009a34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d109      	bne.n	8009aa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <chk_lock+0x80>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d101      	bne.n	8009aa4 <chk_lock+0x84>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e010      	b.n	8009ac6 <chk_lock+0xa6>
 8009aa4:	2312      	movs	r3, #18
 8009aa6:	e00e      	b.n	8009ac6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <chk_lock+0xa0>
 8009aae:	4a09      	ldr	r2, [pc, #36]	; (8009ad4 <chk_lock+0xb4>)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	4413      	add	r3, r2
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009abe:	d101      	bne.n	8009ac4 <chk_lock+0xa4>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	e000      	b.n	8009ac6 <chk_lock+0xa6>
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	2000edf8 	.word	0x2000edf8

08009ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	e002      	b.n	8009aea <enq_lock+0x12>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d806      	bhi.n	8009afe <enq_lock+0x26>
 8009af0:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <enq_lock+0x40>)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	4413      	add	r3, r2
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1f2      	bne.n	8009ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	bf14      	ite	ne
 8009b04:	2301      	movne	r3, #1
 8009b06:	2300      	moveq	r3, #0
 8009b08:	b2db      	uxtb	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	2000edf8 	.word	0x2000edf8

08009b1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e01f      	b.n	8009b6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b2c:	4a41      	ldr	r2, [pc, #260]	; (8009c34 <inc_lock+0x118>)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	4413      	add	r3, r2
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d113      	bne.n	8009b66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b3e:	4a3d      	ldr	r2, [pc, #244]	; (8009c34 <inc_lock+0x118>)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d109      	bne.n	8009b66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b52:	4a38      	ldr	r2, [pc, #224]	; (8009c34 <inc_lock+0x118>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	4413      	add	r3, r2
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d006      	beq.n	8009b74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d9dc      	bls.n	8009b2c <inc_lock+0x10>
 8009b72:	e000      	b.n	8009b76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d132      	bne.n	8009be2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	e002      	b.n	8009b88 <inc_lock+0x6c>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d806      	bhi.n	8009b9c <inc_lock+0x80>
 8009b8e:	4a29      	ldr	r2, [pc, #164]	; (8009c34 <inc_lock+0x118>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	4413      	add	r3, r2
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f2      	bne.n	8009b82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d101      	bne.n	8009ba6 <inc_lock+0x8a>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e040      	b.n	8009c28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4922      	ldr	r1, [pc, #136]	; (8009c34 <inc_lock+0x118>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	440b      	add	r3, r1
 8009bb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	491e      	ldr	r1, [pc, #120]	; (8009c34 <inc_lock+0x118>)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	695a      	ldr	r2, [r3, #20]
 8009bc8:	491a      	ldr	r1, [pc, #104]	; (8009c34 <inc_lock+0x118>)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	440b      	add	r3, r1
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bd4:	4a17      	ldr	r2, [pc, #92]	; (8009c34 <inc_lock+0x118>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	4413      	add	r3, r2
 8009bdc:	330c      	adds	r3, #12
 8009bde:	2200      	movs	r2, #0
 8009be0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <inc_lock+0xe0>
 8009be8:	4a12      	ldr	r2, [pc, #72]	; (8009c34 <inc_lock+0x118>)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	4413      	add	r3, r2
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <inc_lock+0xe0>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e015      	b.n	8009c28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d108      	bne.n	8009c14 <inc_lock+0xf8>
 8009c02:	4a0c      	ldr	r2, [pc, #48]	; (8009c34 <inc_lock+0x118>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	e001      	b.n	8009c18 <inc_lock+0xfc>
 8009c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c18:	4906      	ldr	r1, [pc, #24]	; (8009c34 <inc_lock+0x118>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	440b      	add	r3, r1
 8009c20:	330c      	adds	r3, #12
 8009c22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	2000edf8 	.word	0x2000edf8

08009c38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d825      	bhi.n	8009c98 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c4c:	4a17      	ldr	r2, [pc, #92]	; (8009cac <dec_lock+0x74>)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	4413      	add	r3, r2
 8009c54:	330c      	adds	r3, #12
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c5a:	89fb      	ldrh	r3, [r7, #14]
 8009c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c60:	d101      	bne.n	8009c66 <dec_lock+0x2e>
 8009c62:	2300      	movs	r3, #0
 8009c64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <dec_lock+0x3a>
 8009c6c:	89fb      	ldrh	r3, [r7, #14]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c72:	4a0e      	ldr	r2, [pc, #56]	; (8009cac <dec_lock+0x74>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	330c      	adds	r3, #12
 8009c7c:	89fa      	ldrh	r2, [r7, #14]
 8009c7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <dec_lock+0x5a>
 8009c86:	4a09      	ldr	r2, [pc, #36]	; (8009cac <dec_lock+0x74>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	737b      	strb	r3, [r7, #13]
 8009c96:	e001      	b.n	8009c9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c98:	2302      	movs	r3, #2
 8009c9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	2000edf8 	.word	0x2000edf8

08009cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e010      	b.n	8009ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009cbe:	4a0d      	ldr	r2, [pc, #52]	; (8009cf4 <clear_lock+0x44>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d105      	bne.n	8009cda <clear_lock+0x2a>
 8009cce:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <clear_lock+0x44>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	4413      	add	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d9eb      	bls.n	8009cbe <clear_lock+0xe>
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	2000edf8 	.word	0x2000edf8

08009cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	78db      	ldrb	r3, [r3, #3]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d034      	beq.n	8009d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7858      	ldrb	r0, [r3, #1]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	f7ff fd40 	bl	80097a4 <disk_write>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	73fb      	strb	r3, [r7, #15]
 8009d2e:	e022      	b.n	8009d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	1ad2      	subs	r2, r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d217      	bcs.n	8009d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	789b      	ldrb	r3, [r3, #2]
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	e010      	b.n	8009d70 <sync_window+0x78>
					wsect += fs->fsize;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4413      	add	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7858      	ldrb	r0, [r3, #1]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d62:	2301      	movs	r3, #1
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	f7ff fd1d 	bl	80097a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d8eb      	bhi.n	8009d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d01b      	beq.n	8009dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ffad 	bl	8009cf8 <sync_window>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d113      	bne.n	8009dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7858      	ldrb	r0, [r3, #1]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009db2:	2301      	movs	r3, #1
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	f7ff fcd5 	bl	8009764 <disk_read>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff87 	bl	8009cf8 <sync_window>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d159      	bne.n	8009ea8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d149      	bne.n	8009e90 <sync_fs+0xb4>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d145      	bne.n	8009e90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	899b      	ldrh	r3, [r3, #12]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2100      	movs	r1, #0
 8009e12:	f7ff fda8 	bl	8009966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3338      	adds	r3, #56	; 0x38
 8009e1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e1e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7ff fd37 	bl	8009896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3338      	adds	r3, #56	; 0x38
 8009e2c:	4921      	ldr	r1, [pc, #132]	; (8009eb4 <sync_fs+0xd8>)
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fd4c 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3338      	adds	r3, #56	; 0x38
 8009e38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e3c:	491e      	ldr	r1, [pc, #120]	; (8009eb8 <sync_fs+0xdc>)
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff fd44 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3338      	adds	r3, #56	; 0x38
 8009e48:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7ff fd3a 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3338      	adds	r3, #56	; 0x38
 8009e5c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7ff fd30 	bl	80098cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	7858      	ldrb	r0, [r3, #1]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e84:	2301      	movs	r3, #1
 8009e86:	f7ff fc8d 	bl	80097a4 <disk_write>
			fs->fsi_flag = 0;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2200      	movs	r2, #0
 8009e96:	2100      	movs	r1, #0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff fca3 	bl	80097e4 <disk_ioctl>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <sync_fs+0xcc>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	41615252 	.word	0x41615252
 8009eb8:	61417272 	.word	0x61417272

08009ebc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	3b02      	subs	r3, #2
 8009eca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	3b02      	subs	r3, #2
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d301      	bcc.n	8009edc <clust2sect+0x20>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e008      	b.n	8009eee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	895b      	ldrh	r3, [r3, #10]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	fb03 f202 	mul.w	r2, r3, r2
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	4413      	add	r3, r2
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b086      	sub	sp, #24
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d904      	bls.n	8009f1a <get_fat+0x20>
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d302      	bcc.n	8009f20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e0bb      	b.n	800a098 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295
 8009f24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	f000 8083 	beq.w	800a036 <get_fat+0x13c>
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	f300 80a7 	bgt.w	800a084 <get_fat+0x18a>
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d002      	beq.n	8009f40 <get_fat+0x46>
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d056      	beq.n	8009fec <get_fat+0xf2>
 8009f3e:	e0a1      	b.n	800a084 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	4619      	mov	r1, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f5e:	4413      	add	r3, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	6938      	ldr	r0, [r7, #16]
 8009f64:	f7ff ff0c 	bl	8009d80 <move_window>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 808d 	bne.w	800a08a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1c5a      	adds	r2, r3, #1
 8009f74:	60fa      	str	r2, [r7, #12]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	8992      	ldrh	r2, [r2, #12]
 8009f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f7e:	fb01 f202 	mul.w	r2, r1, r2
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	899b      	ldrh	r3, [r3, #12]
 8009f96:	4619      	mov	r1, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6938      	ldr	r0, [r7, #16]
 8009fa4:	f7ff feec 	bl	8009d80 <move_window>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d16f      	bne.n	800a08e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fba:	fb01 f202 	mul.w	r2, r1, r2
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <get_fat+0xe8>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	091b      	lsrs	r3, r3, #4
 8009fe0:	e002      	b.n	8009fe8 <get_fat+0xee>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe8:	617b      	str	r3, [r7, #20]
			break;
 8009fea:	e055      	b.n	800a098 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	899b      	ldrh	r3, [r3, #12]
 8009ff4:	085b      	lsrs	r3, r3, #1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a000:	4413      	add	r3, r2
 800a002:	4619      	mov	r1, r3
 800a004:	6938      	ldr	r0, [r7, #16]
 800a006:	f7ff febb 	bl	8009d80 <move_window>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d140      	bne.n	800a092 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	8992      	ldrh	r2, [r2, #12]
 800a01e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a022:	fb00 f202 	mul.w	r2, r0, r2
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	440b      	add	r3, r1
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fbf8 	bl	8009820 <ld_word>
 800a030:	4603      	mov	r3, r0
 800a032:	617b      	str	r3, [r7, #20]
			break;
 800a034:	e030      	b.n	800a098 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	899b      	ldrh	r3, [r3, #12]
 800a03e:	089b      	lsrs	r3, r3, #2
 800a040:	b29b      	uxth	r3, r3
 800a042:	4619      	mov	r1, r3
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	fbb3 f3f1 	udiv	r3, r3, r1
 800a04a:	4413      	add	r3, r2
 800a04c:	4619      	mov	r1, r3
 800a04e:	6938      	ldr	r0, [r7, #16]
 800a050:	f7ff fe96 	bl	8009d80 <move_window>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d11d      	bne.n	800a096 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	8992      	ldrh	r2, [r2, #12]
 800a068:	fbb3 f0f2 	udiv	r0, r3, r2
 800a06c:	fb00 f202 	mul.w	r2, r0, r2
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	440b      	add	r3, r1
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fbeb 	bl	8009850 <ld_dword>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a080:	617b      	str	r3, [r7, #20]
			break;
 800a082:	e009      	b.n	800a098 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a084:	2301      	movs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e006      	b.n	800a098 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a08a:	bf00      	nop
 800a08c:	e004      	b.n	800a098 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a08e:	bf00      	nop
 800a090:	e002      	b.n	800a098 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a092:	bf00      	nop
 800a094:	e000      	b.n	800a098 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a096:	bf00      	nop
		}
	}

	return val;
 800a098:	697b      	ldr	r3, [r7, #20]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a0a2:	b590      	push	{r4, r7, lr}
 800a0a4:	b089      	sub	sp, #36	; 0x24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	f240 8109 	bls.w	800a2cc <put_fat+0x22a>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	f080 8103 	bcs.w	800a2cc <put_fat+0x22a>
		switch (fs->fs_type) {
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	f000 80b6 	beq.w	800a23c <put_fat+0x19a>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	f300 80fb 	bgt.w	800a2cc <put_fat+0x22a>
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d003      	beq.n	800a0e2 <put_fat+0x40>
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	f000 8083 	beq.w	800a1e6 <put_fat+0x144>
 800a0e0:	e0f4      	b.n	800a2cc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	61bb      	str	r3, [r7, #24]
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	085b      	lsrs	r3, r3, #1
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	899b      	ldrh	r3, [r3, #12]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a100:	4413      	add	r3, r2
 800a102:	4619      	mov	r1, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff fe3b 	bl	8009d80 <move_window>
 800a10a:	4603      	mov	r3, r0
 800a10c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10e:	7ffb      	ldrb	r3, [r7, #31]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f040 80d4 	bne.w	800a2be <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	61ba      	str	r2, [r7, #24]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	8992      	ldrh	r2, [r2, #12]
 800a126:	fbb3 f0f2 	udiv	r0, r3, r2
 800a12a:	fb00 f202 	mul.w	r2, r0, r2
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	440b      	add	r3, r1
 800a132:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00d      	beq.n	800a15a <put_fat+0xb8>
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b25b      	sxtb	r3, r3
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	b25a      	sxtb	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	b25b      	sxtb	r3, r3
 800a152:	4313      	orrs	r3, r2
 800a154:	b25b      	sxtb	r3, r3
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e001      	b.n	800a15e <put_fat+0xbc>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	899b      	ldrh	r3, [r3, #12]
 800a170:	4619      	mov	r1, r3
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	fbb3 f3f1 	udiv	r3, r3, r1
 800a178:	4413      	add	r3, r2
 800a17a:	4619      	mov	r1, r3
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff fdff 	bl	8009d80 <move_window>
 800a182:	4603      	mov	r3, r0
 800a184:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a186:	7ffb      	ldrb	r3, [r7, #31]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 809a 	bne.w	800a2c2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	899b      	ldrh	r3, [r3, #12]
 800a198:	461a      	mov	r2, r3
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1a0:	fb00 f202 	mul.w	r2, r0, r2
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <put_fat+0x11a>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	091b      	lsrs	r3, r3, #4
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	e00e      	b.n	800a1da <put_fat+0x138>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	f023 030f 	bic.w	r3, r3, #15
 800a1c6:	b25a      	sxtb	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0a1b      	lsrs	r3, r3, #8
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	b25b      	sxtb	r3, r3
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	70da      	strb	r2, [r3, #3]
			break;
 800a1e4:	e072      	b.n	800a2cc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	899b      	ldrh	r3, [r3, #12]
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff fdbe 	bl	8009d80 <move_window>
 800a204:	4603      	mov	r3, r0
 800a206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a208:	7ffb      	ldrb	r3, [r7, #31]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d15b      	bne.n	800a2c6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	8992      	ldrh	r2, [r2, #12]
 800a21c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a220:	fb00 f202 	mul.w	r2, r0, r2
 800a224:	1a9b      	subs	r3, r3, r2
 800a226:	440b      	add	r3, r1
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	b292      	uxth	r2, r2
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff fb31 	bl	8009896 <st_word>
			fs->wflag = 1;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	70da      	strb	r2, [r3, #3]
			break;
 800a23a:	e047      	b.n	800a2cc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	899b      	ldrh	r3, [r3, #12]
 800a244:	089b      	lsrs	r3, r3, #2
 800a246:	b29b      	uxth	r3, r3
 800a248:	4619      	mov	r1, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a250:	4413      	add	r3, r2
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fd93 	bl	8009d80 <move_window>
 800a25a:	4603      	mov	r3, r0
 800a25c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a25e:	7ffb      	ldrb	r3, [r7, #31]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d132      	bne.n	800a2ca <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	8992      	ldrh	r2, [r2, #12]
 800a278:	fbb3 f0f2 	udiv	r0, r3, r2
 800a27c:	fb00 f202 	mul.w	r2, r0, r2
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	440b      	add	r3, r1
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff fae3 	bl	8009850 <ld_dword>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a290:	4323      	orrs	r3, r4
 800a292:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	8992      	ldrh	r2, [r2, #12]
 800a2a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2a6:	fb00 f202 	mul.w	r2, r0, r2
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fb0b 	bl	80098cc <st_dword>
			fs->wflag = 1;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	70da      	strb	r2, [r3, #3]
			break;
 800a2bc:	e006      	b.n	800a2cc <put_fat+0x22a>
			if (res != FR_OK) break;
 800a2be:	bf00      	nop
 800a2c0:	e004      	b.n	800a2cc <put_fat+0x22a>
			if (res != FR_OK) break;
 800a2c2:	bf00      	nop
 800a2c4:	e002      	b.n	800a2cc <put_fat+0x22a>
			if (res != FR_OK) break;
 800a2c6:	bf00      	nop
 800a2c8:	e000      	b.n	800a2cc <put_fat+0x22a>
			if (res != FR_OK) break;
 800a2ca:	bf00      	nop
		}
	}
	return res;
 800a2cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3724      	adds	r7, #36	; 0x24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd90      	pop	{r4, r7, pc}

0800a2d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b088      	sub	sp, #32
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d904      	bls.n	800a2fc <remove_chain+0x26>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d301      	bcc.n	800a300 <remove_chain+0x2a>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e04b      	b.n	800a398 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a306:	f04f 32ff 	mov.w	r2, #4294967295
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f7ff fec8 	bl	800a0a2 <put_fat>
 800a312:	4603      	mov	r3, r0
 800a314:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a316:	7ffb      	ldrb	r3, [r7, #31]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <remove_chain+0x4a>
 800a31c:	7ffb      	ldrb	r3, [r7, #31]
 800a31e:	e03b      	b.n	800a398 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff fde9 	bl	8009efa <get_fat>
 800a328:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d031      	beq.n	800a394 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <remove_chain+0x64>
 800a336:	2302      	movs	r3, #2
 800a338:	e02e      	b.n	800a398 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a340:	d101      	bne.n	800a346 <remove_chain+0x70>
 800a342:	2301      	movs	r3, #1
 800a344:	e028      	b.n	800a398 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a346:	2200      	movs	r2, #0
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f7ff fea9 	bl	800a0a2 <put_fat>
 800a350:	4603      	mov	r3, r0
 800a352:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a354:	7ffb      	ldrb	r3, [r7, #31]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <remove_chain+0x88>
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
 800a35c:	e01c      	b.n	800a398 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	3b02      	subs	r3, #2
 800a368:	429a      	cmp	r2, r3
 800a36a:	d20b      	bcs.n	800a384 <remove_chain+0xae>
			fs->free_clst++;
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	791b      	ldrb	r3, [r3, #4]
 800a37a:	f043 0301 	orr.w	r3, r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d3c6      	bcc.n	800a320 <remove_chain+0x4a>
 800a392:	e000      	b.n	800a396 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a394:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3720      	adds	r7, #32
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10d      	bne.n	800a3d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d004      	beq.n	800a3cc <create_chain+0x2c>
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d31b      	bcc.n	800a404 <create_chain+0x64>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	61bb      	str	r3, [r7, #24]
 800a3d0:	e018      	b.n	800a404 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff fd90 	bl	8009efa <get_fat>
 800a3da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d801      	bhi.n	800a3e6 <create_chain+0x46>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e070      	b.n	800a4c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d101      	bne.n	800a3f2 <create_chain+0x52>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	e06a      	b.n	800a4c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d201      	bcs.n	800a400 <create_chain+0x60>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	e063      	b.n	800a4c8 <create_chain+0x128>
		scl = clst;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	429a      	cmp	r2, r3
 800a416:	d307      	bcc.n	800a428 <create_chain+0x88>
				ncl = 2;
 800a418:	2302      	movs	r3, #2
 800a41a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	429a      	cmp	r2, r3
 800a422:	d901      	bls.n	800a428 <create_chain+0x88>
 800a424:	2300      	movs	r3, #0
 800a426:	e04f      	b.n	800a4c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a428:	69f9      	ldr	r1, [r7, #28]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff fd65 	bl	8009efa <get_fat>
 800a430:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d003      	beq.n	800a446 <create_chain+0xa6>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d101      	bne.n	800a44a <create_chain+0xaa>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	e03e      	b.n	800a4c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d1da      	bne.n	800a408 <create_chain+0x68>
 800a452:	2300      	movs	r3, #0
 800a454:	e038      	b.n	800a4c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a456:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	69f9      	ldr	r1, [r7, #28]
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f7ff fe1f 	bl	800a0a2 <put_fat>
 800a464:	4603      	mov	r3, r0
 800a466:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d109      	bne.n	800a482 <create_chain+0xe2>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d006      	beq.n	800a482 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a474:	69fa      	ldr	r2, [r7, #28]
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6938      	ldr	r0, [r7, #16]
 800a47a:	f7ff fe12 	bl	800a0a2 <put_fat>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d116      	bne.n	800a4b6 <create_chain+0x116>
		fs->last_clst = ncl;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	699a      	ldr	r2, [r3, #24]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	3b02      	subs	r3, #2
 800a498:	429a      	cmp	r2, r3
 800a49a:	d804      	bhi.n	800a4a6 <create_chain+0x106>
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	791b      	ldrb	r3, [r3, #4]
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	711a      	strb	r2, [r3, #4]
 800a4b4:	e007      	b.n	800a4c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d102      	bne.n	800a4c2 <create_chain+0x122>
 800a4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c0:	e000      	b.n	800a4c4 <create_chain+0x124>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a4c6:	69fb      	ldr	r3, [r7, #28]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3720      	adds	r7, #32
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	899b      	ldrh	r3, [r3, #12]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	8952      	ldrh	r2, [r2, #10]
 800a4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	613a      	str	r2, [r7, #16]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <clmt_clust+0x42>
 800a50e:	2300      	movs	r3, #0
 800a510:	e010      	b.n	800a534 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	429a      	cmp	r2, r3
 800a518:	d307      	bcc.n	800a52a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	3304      	adds	r3, #4
 800a526:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a528:	e7e9      	b.n	800a4fe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a52a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	4413      	add	r3, r2
}
 800a534:	4618      	mov	r0, r3
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a556:	d204      	bcs.n	800a562 <dir_sdi+0x22>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f003 031f 	and.w	r3, r3, #31
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a562:	2302      	movs	r3, #2
 800a564:	e071      	b.n	800a64a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <dir_sdi+0x46>
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d902      	bls.n	800a586 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10c      	bne.n	800a5a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	095b      	lsrs	r3, r3, #5
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	8912      	ldrh	r2, [r2, #8]
 800a594:	4293      	cmp	r3, r2
 800a596:	d301      	bcc.n	800a59c <dir_sdi+0x5c>
 800a598:	2302      	movs	r3, #2
 800a59a:	e056      	b.n	800a64a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	61da      	str	r2, [r3, #28]
 800a5a4:	e02d      	b.n	800a602 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	895b      	ldrh	r3, [r3, #10]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	899b      	ldrh	r3, [r3, #12]
 800a5b0:	fb02 f303 	mul.w	r3, r2, r3
 800a5b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5b6:	e019      	b.n	800a5ec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6979      	ldr	r1, [r7, #20]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fc9c 	bl	8009efa <get_fat>
 800a5c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d101      	bne.n	800a5d0 <dir_sdi+0x90>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e03c      	b.n	800a64a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d904      	bls.n	800a5e0 <dir_sdi+0xa0>
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d301      	bcc.n	800a5e4 <dir_sdi+0xa4>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e032      	b.n	800a64a <dir_sdi+0x10a>
			ofs -= csz;
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d2e1      	bcs.n	800a5b8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a5f4:	6979      	ldr	r1, [r7, #20]
 800a5f6:	6938      	ldr	r0, [r7, #16]
 800a5f8:	f7ff fc60 	bl	8009ebc <clust2sect>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	69db      	ldr	r3, [r3, #28]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <dir_sdi+0xd4>
 800a610:	2302      	movs	r3, #2
 800a612:	e01a      	b.n	800a64a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69da      	ldr	r2, [r3, #28]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	899b      	ldrh	r3, [r3, #12]
 800a61c:	4619      	mov	r1, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	fbb3 f3f1 	udiv	r3, r3, r1
 800a624:	441a      	add	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	899b      	ldrh	r3, [r3, #12]
 800a634:	461a      	mov	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	fbb3 f0f2 	udiv	r0, r3, r2
 800a63c:	fb00 f202 	mul.w	r2, r0, r2
 800a640:	1a9b      	subs	r3, r3, r2
 800a642:	18ca      	adds	r2, r1, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b086      	sub	sp, #24
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	3320      	adds	r3, #32
 800a668:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <dir_next+0x28>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a678:	d301      	bcc.n	800a67e <dir_next+0x2c>
 800a67a:	2304      	movs	r3, #4
 800a67c:	e0bb      	b.n	800a7f6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	899b      	ldrh	r3, [r3, #12]
 800a682:	461a      	mov	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	fbb3 f1f2 	udiv	r1, r3, r2
 800a68a:	fb01 f202 	mul.w	r2, r1, r2
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 809d 	bne.w	800a7d0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	095b      	lsrs	r3, r3, #5
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	8912      	ldrh	r2, [r2, #8]
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	f0c0 808d 	bcc.w	800a7d0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	61da      	str	r2, [r3, #28]
 800a6bc:	2304      	movs	r3, #4
 800a6be:	e09a      	b.n	800a7f6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	899b      	ldrh	r3, [r3, #12]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	8952      	ldrh	r2, [r2, #10]
 800a6d0:	3a01      	subs	r2, #1
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d17b      	bne.n	800a7d0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7ff fc0a 	bl	8009efa <get_fat>
 800a6e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d801      	bhi.n	800a6f2 <dir_next+0xa0>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e081      	b.n	800a7f6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d101      	bne.n	800a6fe <dir_next+0xac>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e07b      	b.n	800a7f6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	429a      	cmp	r2, r3
 800a706:	d359      	bcc.n	800a7bc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d104      	bne.n	800a718 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	61da      	str	r2, [r3, #28]
 800a714:	2304      	movs	r3, #4
 800a716:	e06e      	b.n	800a7f6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7ff fe3d 	bl	800a3a0 <create_chain>
 800a726:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <dir_next+0xe0>
 800a72e:	2307      	movs	r3, #7
 800a730:	e061      	b.n	800a7f6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <dir_next+0xea>
 800a738:	2302      	movs	r3, #2
 800a73a:	e05c      	b.n	800a7f6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d101      	bne.n	800a748 <dir_next+0xf6>
 800a744:	2301      	movs	r3, #1
 800a746:	e056      	b.n	800a7f6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff fad5 	bl	8009cf8 <sync_window>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <dir_next+0x106>
 800a754:	2301      	movs	r3, #1
 800a756:	e04e      	b.n	800a7f6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	2100      	movs	r1, #0
 800a766:	f7ff f8fe 	bl	8009966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	6979      	ldr	r1, [r7, #20]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f7ff fba3 	bl	8009ebc <clust2sect>
 800a776:	4602      	mov	r2, r0
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	635a      	str	r2, [r3, #52]	; 0x34
 800a77c:	e012      	b.n	800a7a4 <dir_next+0x152>
						fs->wflag = 1;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff fab7 	bl	8009cf8 <sync_window>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <dir_next+0x142>
 800a790:	2301      	movs	r3, #1
 800a792:	e030      	b.n	800a7f6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3301      	adds	r3, #1
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	635a      	str	r2, [r3, #52]	; 0x34
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	895b      	ldrh	r3, [r3, #10]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d3e6      	bcc.n	800a77e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	1ad2      	subs	r2, r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a7c2:	6979      	ldr	r1, [r7, #20]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff fb79 	bl	8009ebc <clust2sect>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7e8:	fb00 f202 	mul.w	r2, r0, r2
 800a7ec:	1a9b      	subs	r3, r3, r2
 800a7ee:	18ca      	adds	r2, r1, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a80e:	2100      	movs	r1, #0
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fe95 	bl	800a540 <dir_sdi>
 800a816:	4603      	mov	r3, r0
 800a818:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d12b      	bne.n	800a878 <dir_alloc+0x7a>
		n = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	4619      	mov	r1, r3
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff faa8 	bl	8009d80 <move_window>
 800a830:	4603      	mov	r3, r0
 800a832:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a834:	7dfb      	ldrb	r3, [r7, #23]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d11d      	bne.n	800a876 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2be5      	cmp	r3, #229	; 0xe5
 800a842:	d004      	beq.n	800a84e <dir_alloc+0x50>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	3301      	adds	r3, #1
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d102      	bne.n	800a862 <dir_alloc+0x64>
 800a85c:	e00c      	b.n	800a878 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a85e:	2300      	movs	r3, #0
 800a860:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a862:	2101      	movs	r1, #1
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff fef4 	bl	800a652 <dir_next>
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0d7      	beq.n	800a824 <dir_alloc+0x26>
 800a874:	e000      	b.n	800a878 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a876:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d101      	bne.n	800a882 <dir_alloc+0x84>
 800a87e:	2307      	movs	r3, #7
 800a880:	75fb      	strb	r3, [r7, #23]
	return res;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	331a      	adds	r3, #26
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe ffc0 	bl	8009820 <ld_word>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d109      	bne.n	800a8c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	3314      	adds	r3, #20
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe ffb5 	bl	8009820 <ld_word>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	331a      	adds	r3, #26
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	b292      	uxth	r2, r2
 800a8de:	4611      	mov	r1, r2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe ffd8 	bl	8009896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d109      	bne.n	800a902 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	f103 0214 	add.w	r2, r3, #20
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	0c1b      	lsrs	r3, r3, #16
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7fe ffca 	bl	8009896 <st_word>
	}
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a90c:	b590      	push	{r4, r7, lr}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	331a      	adds	r3, #26
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe ff80 	bl	8009820 <ld_word>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <cmp_lfn+0x1e>
 800a926:	2300      	movs	r3, #0
 800a928:	e059      	b.n	800a9de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a940:	2301      	movs	r3, #1
 800a942:	81fb      	strh	r3, [r7, #14]
 800a944:	2300      	movs	r3, #0
 800a946:	613b      	str	r3, [r7, #16]
 800a948:	e033      	b.n	800a9b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a94a:	4a27      	ldr	r2, [pc, #156]	; (800a9e8 <cmp_lfn+0xdc>)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	4413      	add	r3, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe ff61 	bl	8009820 <ld_word>
 800a95e:	4603      	mov	r3, r0
 800a960:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a962:	89fb      	ldrh	r3, [r7, #14]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01a      	beq.n	800a99e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2bfe      	cmp	r3, #254	; 0xfe
 800a96c:	d812      	bhi.n	800a994 <cmp_lfn+0x88>
 800a96e:	89bb      	ldrh	r3, [r7, #12]
 800a970:	4618      	mov	r0, r3
 800a972:	f002 f835 	bl	800c9e0 <ff_wtoupper>
 800a976:	4603      	mov	r3, r0
 800a978:	461c      	mov	r4, r3
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	617a      	str	r2, [r7, #20]
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	4413      	add	r3, r2
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	f002 f829 	bl	800c9e0 <ff_wtoupper>
 800a98e:	4603      	mov	r3, r0
 800a990:	429c      	cmp	r4, r3
 800a992:	d001      	beq.n	800a998 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a994:	2300      	movs	r3, #0
 800a996:	e022      	b.n	800a9de <cmp_lfn+0xd2>
			}
			wc = uc;
 800a998:	89bb      	ldrh	r3, [r7, #12]
 800a99a:	81fb      	strh	r3, [r7, #14]
 800a99c:	e006      	b.n	800a9ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a99e:	89bb      	ldrh	r3, [r7, #12]
 800a9a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d001      	beq.n	800a9ac <cmp_lfn+0xa0>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	e018      	b.n	800a9de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	613b      	str	r3, [r7, #16]
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b0c      	cmp	r3, #12
 800a9b6:	d9c8      	bls.n	800a94a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00b      	beq.n	800a9dc <cmp_lfn+0xd0>
 800a9c4:	89fb      	ldrh	r3, [r7, #14]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <cmp_lfn+0xd0>
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <cmp_lfn+0xd0>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e000      	b.n	800a9de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a9dc:	2301      	movs	r3, #1
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd90      	pop	{r4, r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800fa5c 	.word	0x0800fa5c

0800a9ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	71fb      	strb	r3, [r7, #7]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	330d      	adds	r3, #13
 800aa06:	79ba      	ldrb	r2, [r7, #6]
 800aa08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	330b      	adds	r3, #11
 800aa0e:	220f      	movs	r2, #15
 800aa10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	330c      	adds	r3, #12
 800aa16:	2200      	movs	r2, #0
 800aa18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	331a      	adds	r3, #26
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe ff38 	bl	8009896 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	82fb      	strh	r3, [r7, #22]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800aa3e:	8afb      	ldrh	r3, [r7, #22]
 800aa40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d007      	beq.n	800aa58 <put_lfn+0x6c>
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	1c5a      	adds	r2, r3, #1
 800aa4c:	61fa      	str	r2, [r7, #28]
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800aa58:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <put_lfn+0xcc>)
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4413      	add	r3, r2
 800aa66:	8afa      	ldrh	r2, [r7, #22]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe ff13 	bl	8009896 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800aa70:	8afb      	ldrh	r3, [r7, #22]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <put_lfn+0x90>
 800aa76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	61bb      	str	r3, [r7, #24]
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	2b0c      	cmp	r3, #12
 800aa86:	d9da      	bls.n	800aa3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800aa88:	8afb      	ldrh	r3, [r7, #22]
 800aa8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d006      	beq.n	800aaa0 <put_lfn+0xb4>
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <put_lfn+0xbc>
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	79fa      	ldrb	r2, [r7, #7]
 800aaac:	701a      	strb	r2, [r3, #0]
}
 800aaae:	bf00      	nop
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	0800fa5c 	.word	0x0800fa5c

0800aabc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08c      	sub	sp, #48	; 0x30
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800aaca:	220b      	movs	r2, #11
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fe ff28 	bl	8009924 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b05      	cmp	r3, #5
 800aad8:	d92b      	bls.n	800ab32 <gen_numname+0x76>
		sr = seq;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800aade:	e022      	b.n	800ab26 <gen_numname+0x6a>
			wc = *lfn++;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	1c9a      	adds	r2, r3, #2
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800aaea:	2300      	movs	r3, #0
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaee:	e017      	b.n	800ab20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	005a      	lsls	r2, r3, #1
 800aaf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800aafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab00:	085b      	lsrs	r3, r3, #1
 800ab02:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d005      	beq.n	800ab1a <gen_numname+0x5e>
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ab14:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ab18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d9e4      	bls.n	800aaf0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1d8      	bne.n	800aae0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ab32:	2307      	movs	r3, #7
 800ab34:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	f003 030f 	and.w	r3, r3, #15
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	3330      	adds	r3, #48	; 0x30
 800ab42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ab46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab4a:	2b39      	cmp	r3, #57	; 0x39
 800ab4c:	d904      	bls.n	800ab58 <gen_numname+0x9c>
 800ab4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab52:	3307      	adds	r3, #7
 800ab54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	1e5a      	subs	r2, r3, #1
 800ab5c:	62ba      	str	r2, [r7, #40]	; 0x28
 800ab5e:	3330      	adds	r3, #48	; 0x30
 800ab60:	443b      	add	r3, r7
 800ab62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ab66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	091b      	lsrs	r3, r3, #4
 800ab6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1df      	bne.n	800ab36 <gen_numname+0x7a>
	ns[i] = '~';
 800ab76:	f107 0214 	add.w	r2, r7, #20
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	4413      	add	r3, r2
 800ab7e:	227e      	movs	r2, #126	; 0x7e
 800ab80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ab82:	2300      	movs	r3, #0
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
 800ab86:	e002      	b.n	800ab8e <gen_numname+0xd2>
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d205      	bcs.n	800aba2 <gen_numname+0xe6>
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	4413      	add	r3, r2
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d1f2      	bne.n	800ab88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	d807      	bhi.n	800abb8 <gen_numname+0xfc>
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	62ba      	str	r2, [r7, #40]	; 0x28
 800abae:	3330      	adds	r3, #48	; 0x30
 800abb0:	443b      	add	r3, r7
 800abb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800abb6:	e000      	b.n	800abba <gen_numname+0xfe>
 800abb8:	2120      	movs	r1, #32
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	627a      	str	r2, [r7, #36]	; 0x24
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	460a      	mov	r2, r1
 800abc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	2b07      	cmp	r3, #7
 800abcc:	d9e9      	bls.n	800aba2 <gen_numname+0xe6>
}
 800abce:	bf00      	nop
 800abd0:	bf00      	nop
 800abd2:	3730      	adds	r7, #48	; 0x30
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800abe4:	230b      	movs	r3, #11
 800abe6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	0852      	lsrs	r2, r2, #1
 800abee:	01db      	lsls	r3, r3, #7
 800abf0:	4313      	orrs	r3, r2
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	1c59      	adds	r1, r3, #1
 800abf8:	6079      	str	r1, [r7, #4]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60bb      	str	r3, [r7, #8]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1ed      	bne.n	800abe8 <sum_sfn+0x10>
	return sum;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac28:	2100      	movs	r1, #0
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fc88 	bl	800a540 <dir_sdi>
 800ac30:	4603      	mov	r3, r0
 800ac32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <dir_find+0x24>
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	e0a9      	b.n	800ad92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ac3e:	23ff      	movs	r3, #255	; 0xff
 800ac40:	753b      	strb	r3, [r7, #20]
 800ac42:	7d3b      	ldrb	r3, [r7, #20]
 800ac44:	757b      	strb	r3, [r7, #21]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6938      	ldr	r0, [r7, #16]
 800ac56:	f7ff f893 	bl	8009d80 <move_window>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 8090 	bne.w	800ad86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac6e:	7dbb      	ldrb	r3, [r7, #22]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <dir_find+0x60>
 800ac74:	2304      	movs	r3, #4
 800ac76:	75fb      	strb	r3, [r7, #23]
 800ac78:	e08a      	b.n	800ad90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	330b      	adds	r3, #11
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac86:	73fb      	strb	r3, [r7, #15]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7bfa      	ldrb	r2, [r7, #15]
 800ac8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ac8e:	7dbb      	ldrb	r3, [r7, #22]
 800ac90:	2be5      	cmp	r3, #229	; 0xe5
 800ac92:	d007      	beq.n	800aca4 <dir_find+0x8a>
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d009      	beq.n	800acb2 <dir_find+0x98>
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	2b0f      	cmp	r3, #15
 800aca2:	d006      	beq.n	800acb2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aca4:	23ff      	movs	r3, #255	; 0xff
 800aca6:	757b      	strb	r3, [r7, #21]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	631a      	str	r2, [r3, #48]	; 0x30
 800acb0:	e05e      	b.n	800ad70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	2b0f      	cmp	r3, #15
 800acb6:	d136      	bne.n	800ad26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d154      	bne.n	800ad70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800acc6:	7dbb      	ldrb	r3, [r7, #22]
 800acc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00d      	beq.n	800acec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	7b5b      	ldrb	r3, [r3, #13]
 800acd6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800acd8:	7dbb      	ldrb	r3, [r7, #22]
 800acda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acde:	75bb      	strb	r3, [r7, #22]
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
 800ace2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	695a      	ldr	r2, [r3, #20]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800acec:	7dba      	ldrb	r2, [r7, #22]
 800acee:	7d7b      	ldrb	r3, [r7, #21]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d115      	bne.n	800ad20 <dir_find+0x106>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	330d      	adds	r3, #13
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	7d3a      	ldrb	r2, [r7, #20]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d10e      	bne.n	800ad20 <dir_find+0x106>
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	f7ff fdfd 	bl	800a90c <cmp_lfn>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <dir_find+0x106>
 800ad18:	7d7b      	ldrb	r3, [r7, #21]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	e000      	b.n	800ad22 <dir_find+0x108>
 800ad20:	23ff      	movs	r3, #255	; 0xff
 800ad22:	757b      	strb	r3, [r7, #21]
 800ad24:	e024      	b.n	800ad70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ad26:	7d7b      	ldrb	r3, [r7, #21]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d109      	bne.n	800ad40 <dir_find+0x126>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff ff51 	bl	800abd8 <sum_sfn>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	7d3b      	ldrb	r3, [r7, #20]
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d024      	beq.n	800ad8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <dir_find+0x14a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a18      	ldr	r0, [r3, #32]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3324      	adds	r3, #36	; 0x24
 800ad56:	220b      	movs	r2, #11
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7fe fe1f 	bl	800999c <mem_cmp>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d014      	beq.n	800ad8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad64:	23ff      	movs	r3, #255	; 0xff
 800ad66:	757b      	strb	r3, [r7, #21]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ad70:	2100      	movs	r1, #0
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff fc6d 	bl	800a652 <dir_next>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f43f af65 	beq.w	800ac4e <dir_find+0x34>
 800ad84:	e004      	b.n	800ad90 <dir_find+0x176>
		if (res != FR_OK) break;
 800ad86:	bf00      	nop
 800ad88:	e002      	b.n	800ad90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ad8a:	bf00      	nop
 800ad8c:	e000      	b.n	800ad90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ad8e:	bf00      	nop

	return res;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adb0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <dir_register+0x20>
 800adb8:	2306      	movs	r3, #6
 800adba:	e0e0      	b.n	800af7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800adbc:	2300      	movs	r3, #0
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
 800adc0:	e002      	b.n	800adc8 <dir_register+0x2c>
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	3301      	adds	r3, #1
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	4413      	add	r3, r2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1f4      	bne.n	800adc2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800adde:	f107 030c 	add.w	r3, r7, #12
 800ade2:	220c      	movs	r2, #12
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fd9d 	bl	8009924 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d032      	beq.n	800ae5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2240      	movs	r2, #64	; 0x40
 800adf8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800adfc:	2301      	movs	r3, #1
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae00:	e016      	b.n	800ae30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	691a      	ldr	r2, [r3, #16]
 800ae0c:	f107 010c 	add.w	r1, r7, #12
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	f7ff fe53 	bl	800aabc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff feff 	bl	800ac1a <dir_find>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ae22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	2b63      	cmp	r3, #99	; 0x63
 800ae34:	d9e5      	bls.n	800ae02 <dir_register+0x66>
 800ae36:	e000      	b.n	800ae3a <dir_register+0x9e>
			if (res != FR_OK) break;
 800ae38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3c:	2b64      	cmp	r3, #100	; 0x64
 800ae3e:	d101      	bne.n	800ae44 <dir_register+0xa8>
 800ae40:	2307      	movs	r3, #7
 800ae42:	e09c      	b.n	800af7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ae44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d002      	beq.n	800ae52 <dir_register+0xb6>
 800ae4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae50:	e095      	b.n	800af7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ae52:	7dfa      	ldrb	r2, [r7, #23]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <dir_register+0xd8>
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	330c      	adds	r3, #12
 800ae68:	4a47      	ldr	r2, [pc, #284]	; (800af88 <dir_register+0x1ec>)
 800ae6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6e:	089b      	lsrs	r3, r3, #2
 800ae70:	3301      	adds	r3, #1
 800ae72:	e000      	b.n	800ae76 <dir_register+0xda>
 800ae74:	2301      	movs	r3, #1
 800ae76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ae78:	6a39      	ldr	r1, [r7, #32]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fcbf 	bl	800a7fe <dir_alloc>
 800ae80:	4603      	mov	r3, r0
 800ae82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ae86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d148      	bne.n	800af20 <dir_register+0x184>
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	623b      	str	r3, [r7, #32]
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d042      	beq.n	800af20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695a      	ldr	r2, [r3, #20]
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	015b      	lsls	r3, r3, #5
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fb4a 	bl	800a540 <dir_sdi>
 800aeac:	4603      	mov	r3, r0
 800aeae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800aeb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d132      	bne.n	800af20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3324      	adds	r3, #36	; 0x24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff fe8a 	bl	800abd8 <sum_sfn>
 800aec4:	4603      	mov	r3, r0
 800aec6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	4619      	mov	r1, r3
 800aece:	69f8      	ldr	r0, [r7, #28]
 800aed0:	f7fe ff56 	bl	8009d80 <move_window>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800aeda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d11d      	bne.n	800af1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	6918      	ldr	r0, [r3, #16]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a19      	ldr	r1, [r3, #32]
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	7efb      	ldrb	r3, [r7, #27]
 800aef0:	f7ff fd7c 	bl	800a9ec <put_lfn>
				fs->wflag = 1;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	2201      	movs	r2, #1
 800aef8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800aefa:	2100      	movs	r1, #0
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff fba8 	bl	800a652 <dir_next>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800af08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d107      	bne.n	800af20 <dir_register+0x184>
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	3b01      	subs	r3, #1
 800af14:	623b      	str	r3, [r7, #32]
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1d5      	bne.n	800aec8 <dir_register+0x12c>
 800af1c:	e000      	b.n	800af20 <dir_register+0x184>
				if (res != FR_OK) break;
 800af1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af24:	2b00      	cmp	r3, #0
 800af26:	d128      	bne.n	800af7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	4619      	mov	r1, r3
 800af2e:	69f8      	ldr	r0, [r7, #28]
 800af30:	f7fe ff26 	bl	8009d80 <move_window>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800af3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d11b      	bne.n	800af7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	2220      	movs	r2, #32
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fd0b 	bl	8009966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a18      	ldr	r0, [r3, #32]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3324      	adds	r3, #36	; 0x24
 800af58:	220b      	movs	r2, #11
 800af5a:	4619      	mov	r1, r3
 800af5c:	f7fe fce2 	bl	8009924 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	330c      	adds	r3, #12
 800af6c:	f002 0218 	and.w	r2, r2, #24
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	2201      	movs	r2, #1
 800af78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800af7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	4ec4ec4f 	.word	0x4ec4ec4f

0800af8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	61ba      	str	r2, [r7, #24]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4413      	add	r3, r2
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800afba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afbc:	2b1f      	cmp	r3, #31
 800afbe:	d940      	bls.n	800b042 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800afc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc2:	2b2f      	cmp	r3, #47	; 0x2f
 800afc4:	d006      	beq.n	800afd4 <create_name+0x48>
 800afc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc8:	2b5c      	cmp	r3, #92	; 0x5c
 800afca:	d110      	bne.n	800afee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800afcc:	e002      	b.n	800afd4 <create_name+0x48>
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	3301      	adds	r3, #1
 800afd2:	61bb      	str	r3, [r7, #24]
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	4413      	add	r3, r2
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b2f      	cmp	r3, #47	; 0x2f
 800afde:	d0f6      	beq.n	800afce <create_name+0x42>
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	4413      	add	r3, r2
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	2b5c      	cmp	r3, #92	; 0x5c
 800afea:	d0f0      	beq.n	800afce <create_name+0x42>
			break;
 800afec:	e02a      	b.n	800b044 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2bfe      	cmp	r3, #254	; 0xfe
 800aff2:	d901      	bls.n	800aff8 <create_name+0x6c>
 800aff4:	2306      	movs	r3, #6
 800aff6:	e17d      	b.n	800b2f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800affa:	b2db      	uxtb	r3, r3
 800affc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800affe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b000:	2101      	movs	r1, #1
 800b002:	4618      	mov	r0, r3
 800b004:	f001 fcb0 	bl	800c968 <ff_convert>
 800b008:	4603      	mov	r3, r0
 800b00a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <create_name+0x8a>
 800b012:	2306      	movs	r3, #6
 800b014:	e16e      	b.n	800b2f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b018:	2b7f      	cmp	r3, #127	; 0x7f
 800b01a:	d809      	bhi.n	800b030 <create_name+0xa4>
 800b01c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b01e:	4619      	mov	r1, r3
 800b020:	488d      	ldr	r0, [pc, #564]	; (800b258 <create_name+0x2cc>)
 800b022:	f7fe fce2 	bl	80099ea <chk_chr>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <create_name+0xa4>
 800b02c:	2306      	movs	r3, #6
 800b02e:	e161      	b.n	800b2f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	617a      	str	r2, [r7, #20]
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b03e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b040:	e7b4      	b.n	800afac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b042:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	441a      	add	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b050:	2b1f      	cmp	r3, #31
 800b052:	d801      	bhi.n	800b058 <create_name+0xcc>
 800b054:	2304      	movs	r3, #4
 800b056:	e000      	b.n	800b05a <create_name+0xce>
 800b058:	2300      	movs	r3, #0
 800b05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b05e:	e011      	b.n	800b084 <create_name+0xf8>
		w = lfn[di - 1];
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b066:	3b01      	subs	r3, #1
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	4413      	add	r3, r2
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b074:	2b20      	cmp	r3, #32
 800b076:	d002      	beq.n	800b07e <create_name+0xf2>
 800b078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07a:	2b2e      	cmp	r3, #46	; 0x2e
 800b07c:	d106      	bne.n	800b08c <create_name+0x100>
		di--;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3b01      	subs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1ea      	bne.n	800b060 <create_name+0xd4>
 800b08a:	e000      	b.n	800b08e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b08c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4413      	add	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <create_name+0x118>
 800b0a0:	2306      	movs	r3, #6
 800b0a2:	e127      	b.n	800b2f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3324      	adds	r3, #36	; 0x24
 800b0a8:	220b      	movs	r2, #11
 800b0aa:	2120      	movs	r1, #32
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe fc5a 	bl	8009966 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	e002      	b.n	800b0be <create_name+0x132>
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d0f5      	beq.n	800b0b8 <create_name+0x12c>
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0d8:	d0ee      	beq.n	800b0b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d009      	beq.n	800b0f4 <create_name+0x168>
 800b0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0e4:	f043 0303 	orr.w	r3, r3, #3
 800b0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b0ec:	e002      	b.n	800b0f4 <create_name+0x168>
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d009      	beq.n	800b10e <create_name+0x182>
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b100:	3b01      	subs	r3, #1
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	2b2e      	cmp	r3, #46	; 0x2e
 800b10c:	d1ef      	bne.n	800b0ee <create_name+0x162>

	i = b = 0; ni = 8;
 800b10e:	2300      	movs	r3, #0
 800b110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b114:	2300      	movs	r3, #0
 800b116:	623b      	str	r3, [r7, #32]
 800b118:	2308      	movs	r3, #8
 800b11a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	61ba      	str	r2, [r7, #24]
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 8090 	beq.w	800b254 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b136:	2b20      	cmp	r3, #32
 800b138:	d006      	beq.n	800b148 <create_name+0x1bc>
 800b13a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b13c:	2b2e      	cmp	r3, #46	; 0x2e
 800b13e:	d10a      	bne.n	800b156 <create_name+0x1ca>
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	429a      	cmp	r2, r3
 800b146:	d006      	beq.n	800b156 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b14c:	f043 0303 	orr.w	r3, r3, #3
 800b150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b154:	e07d      	b.n	800b252 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b156:	6a3a      	ldr	r2, [r7, #32]
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d203      	bcs.n	800b166 <create_name+0x1da>
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	429a      	cmp	r2, r3
 800b164:	d123      	bne.n	800b1ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	2b0b      	cmp	r3, #11
 800b16a:	d106      	bne.n	800b17a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b170:	f043 0303 	orr.w	r3, r3, #3
 800b174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b178:	e075      	b.n	800b266 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d005      	beq.n	800b18e <create_name+0x202>
 800b182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b186:	f043 0303 	orr.w	r3, r3, #3
 800b18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	429a      	cmp	r2, r3
 800b194:	d866      	bhi.n	800b264 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	61bb      	str	r3, [r7, #24]
 800b19a:	2308      	movs	r3, #8
 800b19c:	623b      	str	r3, [r7, #32]
 800b19e:	230b      	movs	r3, #11
 800b1a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b1a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b1ac:	e051      	b.n	800b252 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b1ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b0:	2b7f      	cmp	r3, #127	; 0x7f
 800b1b2:	d914      	bls.n	800b1de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 fbd5 	bl	800c968 <ff_convert>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <create_name+0x246>
 800b1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ca:	3b80      	subs	r3, #128	; 0x80
 800b1cc:	4a23      	ldr	r2, [pc, #140]	; (800b25c <create_name+0x2d0>)
 800b1ce:	5cd3      	ldrb	r3, [r2, r3]
 800b1d0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1d6:	f043 0302 	orr.w	r3, r3, #2
 800b1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d007      	beq.n	800b1f4 <create_name+0x268>
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	481d      	ldr	r0, [pc, #116]	; (800b260 <create_name+0x2d4>)
 800b1ea:	f7fe fbfe 	bl	80099ea <chk_chr>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d008      	beq.n	800b206 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b1f4:	235f      	movs	r3, #95	; 0x5f
 800b1f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1fc:	f043 0303 	orr.w	r3, r3, #3
 800b200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b204:	e01b      	b.n	800b23e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b208:	2b40      	cmp	r3, #64	; 0x40
 800b20a:	d909      	bls.n	800b220 <create_name+0x294>
 800b20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b20e:	2b5a      	cmp	r3, #90	; 0x5a
 800b210:	d806      	bhi.n	800b220 <create_name+0x294>
					b |= 2;
 800b212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b216:	f043 0302 	orr.w	r3, r3, #2
 800b21a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b21e:	e00e      	b.n	800b23e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b222:	2b60      	cmp	r3, #96	; 0x60
 800b224:	d90b      	bls.n	800b23e <create_name+0x2b2>
 800b226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b228:	2b7a      	cmp	r3, #122	; 0x7a
 800b22a:	d808      	bhi.n	800b23e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b22c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b230:	f043 0301 	orr.w	r3, r3, #1
 800b234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b23a:	3b20      	subs	r3, #32
 800b23c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	623a      	str	r2, [r7, #32]
 800b244:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b246:	b2d1      	uxtb	r1, r2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	4413      	add	r3, r2
 800b24c:	460a      	mov	r2, r1
 800b24e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b252:	e763      	b.n	800b11c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b254:	bf00      	nop
 800b256:	e006      	b.n	800b266 <create_name+0x2da>
 800b258:	0800f8b4 	.word	0x0800f8b4
 800b25c:	0800f9dc 	.word	0x0800f9dc
 800b260:	0800f8c0 	.word	0x0800f8c0
			if (si > di) break;			/* No extension */
 800b264:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b26c:	2be5      	cmp	r3, #229	; 0xe5
 800b26e:	d103      	bne.n	800b278 <create_name+0x2ec>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2205      	movs	r2, #5
 800b274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	d104      	bne.n	800b288 <create_name+0x2fc>
 800b27e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b28c:	f003 030c 	and.w	r3, r3, #12
 800b290:	2b0c      	cmp	r3, #12
 800b292:	d005      	beq.n	800b2a0 <create_name+0x314>
 800b294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d105      	bne.n	800b2ac <create_name+0x320>
 800b2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2a4:	f043 0302 	orr.w	r3, r3, #2
 800b2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d117      	bne.n	800b2e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b2b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2bc:	f003 0303 	and.w	r3, r3, #3
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d105      	bne.n	800b2d0 <create_name+0x344>
 800b2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c8:	f043 0310 	orr.w	r3, r3, #16
 800b2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2d4:	f003 030c 	and.w	r3, r3, #12
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	d105      	bne.n	800b2e8 <create_name+0x35c>
 800b2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e0:	f043 0308 	orr.w	r3, r3, #8
 800b2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b2ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b2f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3728      	adds	r7, #40	; 0x28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b310:	e002      	b.n	800b318 <follow_path+0x1c>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	3301      	adds	r3, #1
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b2f      	cmp	r3, #47	; 0x2f
 800b31e:	d0f8      	beq.n	800b312 <follow_path+0x16>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b5c      	cmp	r3, #92	; 0x5c
 800b326:	d0f4      	beq.n	800b312 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2200      	movs	r2, #0
 800b32c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b1f      	cmp	r3, #31
 800b334:	d80a      	bhi.n	800b34c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2280      	movs	r2, #128	; 0x80
 800b33a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b33e:	2100      	movs	r1, #0
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff f8fd 	bl	800a540 <dir_sdi>
 800b346:	4603      	mov	r3, r0
 800b348:	75fb      	strb	r3, [r7, #23]
 800b34a:	e048      	b.n	800b3de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b34c:	463b      	mov	r3, r7
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fe1b 	bl	800af8c <create_name>
 800b356:	4603      	mov	r3, r0
 800b358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d139      	bne.n	800b3d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fc5a 	bl	800ac1a <dir_find>
 800b366:	4603      	mov	r3, r0
 800b368:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b370:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	d12c      	bne.n	800b3d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d127      	bne.n	800b3d8 <follow_path+0xdc>
 800b388:	2305      	movs	r3, #5
 800b38a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b38c:	e024      	b.n	800b3d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d121      	bne.n	800b3dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	799b      	ldrb	r3, [r3, #6]
 800b39c:	f003 0310 	and.w	r3, r3, #16
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b3a4:	2305      	movs	r3, #5
 800b3a6:	75fb      	strb	r3, [r7, #23]
 800b3a8:	e019      	b.n	800b3de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	8992      	ldrh	r2, [r2, #12]
 800b3b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3bc:	fb00 f202 	mul.w	r2, r0, r2
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fa60 	bl	800a88c <ld_clust>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3d2:	e7bb      	b.n	800b34c <follow_path+0x50>
			if (res != FR_OK) break;
 800b3d4:	bf00      	nop
 800b3d6:	e002      	b.n	800b3de <follow_path+0xe2>
				break;
 800b3d8:	bf00      	nop
 800b3da:	e000      	b.n	800b3de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b3dc:	bf00      	nop
			}
		}
	}

	return res;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d031      	beq.n	800b462 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	e002      	b.n	800b40c <get_ldnumber+0x24>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3301      	adds	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b1f      	cmp	r3, #31
 800b412:	d903      	bls.n	800b41c <get_ldnumber+0x34>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b3a      	cmp	r3, #58	; 0x3a
 800b41a:	d1f4      	bne.n	800b406 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b3a      	cmp	r3, #58	; 0x3a
 800b422:	d11c      	bne.n	800b45e <get_ldnumber+0x76>
			tp = *path;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	60fa      	str	r2, [r7, #12]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	3b30      	subs	r3, #48	; 0x30
 800b434:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b09      	cmp	r3, #9
 800b43a:	d80e      	bhi.n	800b45a <get_ldnumber+0x72>
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	429a      	cmp	r2, r3
 800b442:	d10a      	bne.n	800b45a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d107      	bne.n	800b45a <get_ldnumber+0x72>
					vol = (int)i;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	3301      	adds	r3, #1
 800b452:	617b      	str	r3, [r7, #20]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	e002      	b.n	800b464 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b462:	693b      	ldr	r3, [r7, #16]
}
 800b464:	4618      	mov	r0, r3
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	70da      	strb	r2, [r3, #3]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f04f 32ff 	mov.w	r2, #4294967295
 800b486:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7fe fc78 	bl	8009d80 <move_window>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <check_fs+0x2a>
 800b496:	2304      	movs	r3, #4
 800b498:	e038      	b.n	800b50c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3338      	adds	r3, #56	; 0x38
 800b49e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe f9bc 	bl	8009820 <ld_word>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d001      	beq.n	800b4b8 <check_fs+0x48>
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e029      	b.n	800b50c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b4be:	2be9      	cmp	r3, #233	; 0xe9
 800b4c0:	d009      	beq.n	800b4d6 <check_fs+0x66>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b4c8:	2beb      	cmp	r3, #235	; 0xeb
 800b4ca:	d11e      	bne.n	800b50a <check_fs+0x9a>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b4d2:	2b90      	cmp	r3, #144	; 0x90
 800b4d4:	d119      	bne.n	800b50a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3338      	adds	r3, #56	; 0x38
 800b4da:	3336      	adds	r3, #54	; 0x36
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe f9b7 	bl	8009850 <ld_dword>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b4e8:	4a0a      	ldr	r2, [pc, #40]	; (800b514 <check_fs+0xa4>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d101      	bne.n	800b4f2 <check_fs+0x82>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e00c      	b.n	800b50c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3338      	adds	r3, #56	; 0x38
 800b4f6:	3352      	adds	r3, #82	; 0x52
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fe f9a9 	bl	8009850 <ld_dword>
 800b4fe:	4603      	mov	r3, r0
 800b500:	4a05      	ldr	r2, [pc, #20]	; (800b518 <check_fs+0xa8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d101      	bne.n	800b50a <check_fs+0x9a>
 800b506:	2300      	movs	r3, #0
 800b508:	e000      	b.n	800b50c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b50a:	2302      	movs	r3, #2
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	00544146 	.word	0x00544146
 800b518:	33544146 	.word	0x33544146

0800b51c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b096      	sub	sp, #88	; 0x58
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	4613      	mov	r3, r2
 800b528:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff ff59 	bl	800b3e8 <get_ldnumber>
 800b536:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da01      	bge.n	800b542 <find_volume+0x26>
 800b53e:	230b      	movs	r3, #11
 800b540:	e265      	b.n	800ba0e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b542:	4a9f      	ldr	r2, [pc, #636]	; (800b7c0 <find_volume+0x2a4>)
 800b544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b54a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <find_volume+0x3a>
 800b552:	230c      	movs	r3, #12
 800b554:	e25b      	b.n	800ba0e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b55a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	f023 0301 	bic.w	r3, r3, #1
 800b562:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01a      	beq.n	800b5a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe f8b7 	bl	80096e4 <disk_status>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b57c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10c      	bne.n	800b5a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d007      	beq.n	800b59e <find_volume+0x82>
 800b58e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b59a:	230a      	movs	r3, #10
 800b59c:	e237      	b.n	800ba0e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e235      	b.n	800ba0e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fe f8af 	bl	8009718 <disk_initialize>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b5c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e21e      	b.n	800ba0e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d007      	beq.n	800b5e6 <find_volume+0xca>
 800b5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5da:	f003 0304 	and.w	r3, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	e213      	b.n	800ba0e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	7858      	ldrb	r0, [r3, #1]
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	2102      	movs	r1, #2
 800b5f2:	f7fe f8f7 	bl	80097e4 <disk_ioctl>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <find_volume+0xe4>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e206      	b.n	800ba0e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	899b      	ldrh	r3, [r3, #12]
 800b604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b608:	d80d      	bhi.n	800b626 <find_volume+0x10a>
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	899b      	ldrh	r3, [r3, #12]
 800b60e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b612:	d308      	bcc.n	800b626 <find_volume+0x10a>
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	899b      	ldrh	r3, [r3, #12]
 800b618:	461a      	mov	r2, r3
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	3b01      	subs	r3, #1
 800b620:	4013      	ands	r3, r2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <find_volume+0x10e>
 800b626:	2301      	movs	r3, #1
 800b628:	e1f1      	b.n	800ba0e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b62e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b632:	f7ff ff1d 	bl	800b470 <check_fs>
 800b636:	4603      	mov	r3, r0
 800b638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b63c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b640:	2b02      	cmp	r3, #2
 800b642:	d149      	bne.n	800b6d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b644:	2300      	movs	r3, #0
 800b646:	643b      	str	r3, [r7, #64]	; 0x40
 800b648:	e01e      	b.n	800b688 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b658:	4413      	add	r3, r2
 800b65a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	3304      	adds	r3, #4
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d006      	beq.n	800b674 <find_volume+0x158>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	3308      	adds	r3, #8
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe f8f0 	bl	8009850 <ld_dword>
 800b670:	4602      	mov	r2, r0
 800b672:	e000      	b.n	800b676 <find_volume+0x15a>
 800b674:	2200      	movs	r2, #0
 800b676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	3358      	adds	r3, #88	; 0x58
 800b67c:	443b      	add	r3, r7
 800b67e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b684:	3301      	adds	r3, #1
 800b686:	643b      	str	r3, [r7, #64]	; 0x40
 800b688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d9dd      	bls.n	800b64a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b68e:	2300      	movs	r3, #0
 800b690:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <find_volume+0x182>
 800b698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69a:	3b01      	subs	r3, #1
 800b69c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	3358      	adds	r3, #88	; 0x58
 800b6a4:	443b      	add	r3, r7
 800b6a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b6aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <find_volume+0x1a2>
 800b6b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6b6:	f7ff fedb 	bl	800b470 <check_fs>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	e000      	b.n	800b6c0 <find_volume+0x1a4>
 800b6be:	2303      	movs	r3, #3
 800b6c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d905      	bls.n	800b6d8 <find_volume+0x1bc>
 800b6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d9e2      	bls.n	800b69e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	d101      	bne.n	800b6e4 <find_volume+0x1c8>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e194      	b.n	800ba0e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b6e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d901      	bls.n	800b6f0 <find_volume+0x1d4>
 800b6ec:	230d      	movs	r3, #13
 800b6ee:	e18e      	b.n	800ba0e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	3338      	adds	r3, #56	; 0x38
 800b6f4:	330b      	adds	r3, #11
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe f892 	bl	8009820 <ld_word>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461a      	mov	r2, r3
 800b700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b702:	899b      	ldrh	r3, [r3, #12]
 800b704:	429a      	cmp	r2, r3
 800b706:	d001      	beq.n	800b70c <find_volume+0x1f0>
 800b708:	230d      	movs	r3, #13
 800b70a:	e180      	b.n	800ba0e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	3338      	adds	r3, #56	; 0x38
 800b710:	3316      	adds	r3, #22
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe f884 	bl	8009820 <ld_word>
 800b718:	4603      	mov	r3, r0
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <find_volume+0x214>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	3338      	adds	r3, #56	; 0x38
 800b726:	3324      	adds	r3, #36	; 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe f891 	bl	8009850 <ld_dword>
 800b72e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b734:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	789b      	ldrb	r3, [r3, #2]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d005      	beq.n	800b754 <find_volume+0x238>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d001      	beq.n	800b754 <find_volume+0x238>
 800b750:	230d      	movs	r3, #13
 800b752:	e15c      	b.n	800ba0e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	789b      	ldrb	r3, [r3, #2]
 800b758:	461a      	mov	r2, r3
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	fb02 f303 	mul.w	r3, r2, r3
 800b760:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b768:	b29a      	uxth	r2, r3
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	895b      	ldrh	r3, [r3, #10]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <find_volume+0x26c>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	895b      	ldrh	r3, [r3, #10]
 800b780:	3b01      	subs	r3, #1
 800b782:	4013      	ands	r3, r2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <find_volume+0x270>
 800b788:	230d      	movs	r3, #13
 800b78a:	e140      	b.n	800ba0e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	3338      	adds	r3, #56	; 0x38
 800b790:	3311      	adds	r3, #17
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe f844 	bl	8009820 <ld_word>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	891b      	ldrh	r3, [r3, #8]
 800b7a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7a6:	8992      	ldrh	r2, [r2, #12]
 800b7a8:	0952      	lsrs	r2, r2, #5
 800b7aa:	b292      	uxth	r2, r2
 800b7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7b0:	fb01 f202 	mul.w	r2, r1, r2
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d003      	beq.n	800b7c4 <find_volume+0x2a8>
 800b7bc:	230d      	movs	r3, #13
 800b7be:	e126      	b.n	800ba0e <find_volume+0x4f2>
 800b7c0:	2000edf0 	.word	0x2000edf0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	3338      	adds	r3, #56	; 0x38
 800b7c8:	3313      	adds	r3, #19
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe f828 	bl	8009820 <ld_word>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <find_volume+0x2cc>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	3338      	adds	r3, #56	; 0x38
 800b7de:	3320      	adds	r3, #32
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe f835 	bl	8009850 <ld_dword>
 800b7e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	3338      	adds	r3, #56	; 0x38
 800b7ec:	330e      	adds	r3, #14
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe f816 	bl	8009820 <ld_word>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b7f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <find_volume+0x2e6>
 800b7fe:	230d      	movs	r3, #13
 800b800:	e105      	b.n	800ba0e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b802:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b806:	4413      	add	r3, r2
 800b808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b80a:	8911      	ldrh	r1, [r2, #8]
 800b80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b80e:	8992      	ldrh	r2, [r2, #12]
 800b810:	0952      	lsrs	r2, r2, #5
 800b812:	b292      	uxth	r2, r2
 800b814:	fbb1 f2f2 	udiv	r2, r1, r2
 800b818:	b292      	uxth	r2, r2
 800b81a:	4413      	add	r3, r2
 800b81c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b81e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	429a      	cmp	r2, r3
 800b824:	d201      	bcs.n	800b82a <find_volume+0x30e>
 800b826:	230d      	movs	r3, #13
 800b828:	e0f1      	b.n	800ba0e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b82a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b832:	8952      	ldrh	r2, [r2, #10]
 800b834:	fbb3 f3f2 	udiv	r3, r3, r2
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d101      	bne.n	800b844 <find_volume+0x328>
 800b840:	230d      	movs	r3, #13
 800b842:	e0e4      	b.n	800ba0e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b844:	2303      	movs	r3, #3
 800b846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b850:	4293      	cmp	r3, r2
 800b852:	d802      	bhi.n	800b85a <find_volume+0x33e>
 800b854:	2302      	movs	r3, #2
 800b856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b860:	4293      	cmp	r3, r2
 800b862:	d802      	bhi.n	800b86a <find_volume+0x34e>
 800b864:	2301      	movs	r3, #1
 800b866:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	1c9a      	adds	r2, r3, #2
 800b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b870:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b876:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87c:	441a      	add	r2, r3
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	441a      	add	r2, r3
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b88c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b890:	2b03      	cmp	r3, #3
 800b892:	d11e      	bne.n	800b8d2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	3338      	adds	r3, #56	; 0x38
 800b898:	332a      	adds	r3, #42	; 0x2a
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd ffc0 	bl	8009820 <ld_word>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <find_volume+0x38e>
 800b8a6:	230d      	movs	r3, #13
 800b8a8:	e0b1      	b.n	800ba0e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	891b      	ldrh	r3, [r3, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <find_volume+0x39a>
 800b8b2:	230d      	movs	r3, #13
 800b8b4:	e0ab      	b.n	800ba0e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b8:	3338      	adds	r3, #56	; 0x38
 800b8ba:	332c      	adds	r3, #44	; 0x2c
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fd ffc7 	bl	8009850 <ld_dword>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	69db      	ldr	r3, [r3, #28]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d0:	e01f      	b.n	800b912 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	891b      	ldrh	r3, [r3, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <find_volume+0x3c2>
 800b8da:	230d      	movs	r3, #13
 800b8dc:	e097      	b.n	800ba0e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e4:	441a      	add	r2, r3
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b8ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d103      	bne.n	800b8fa <find_volume+0x3de>
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	e00a      	b.n	800b910 <find_volume+0x3f4>
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	69da      	ldr	r2, [r3, #28]
 800b8fe:	4613      	mov	r3, r2
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	4413      	add	r3, r2
 800b904:	085a      	lsrs	r2, r3, #1
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b910:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	6a1a      	ldr	r2, [r3, #32]
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	899b      	ldrh	r3, [r3, #12]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b91e:	440b      	add	r3, r1
 800b920:	3b01      	subs	r3, #1
 800b922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b924:	8989      	ldrh	r1, [r1, #12]
 800b926:	fbb3 f3f1 	udiv	r3, r3, r1
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d201      	bcs.n	800b932 <find_volume+0x416>
 800b92e:	230d      	movs	r3, #13
 800b930:	e06d      	b.n	800ba0e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	619a      	str	r2, [r3, #24]
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	2280      	movs	r2, #128	; 0x80
 800b946:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d149      	bne.n	800b9e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b952:	3338      	adds	r3, #56	; 0x38
 800b954:	3330      	adds	r3, #48	; 0x30
 800b956:	4618      	mov	r0, r3
 800b958:	f7fd ff62 	bl	8009820 <ld_word>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d140      	bne.n	800b9e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b964:	3301      	adds	r3, #1
 800b966:	4619      	mov	r1, r3
 800b968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b96a:	f7fe fa09 	bl	8009d80 <move_window>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d137      	bne.n	800b9e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	2200      	movs	r2, #0
 800b978:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97c:	3338      	adds	r3, #56	; 0x38
 800b97e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b982:	4618      	mov	r0, r3
 800b984:	f7fd ff4c 	bl	8009820 <ld_word>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b990:	429a      	cmp	r2, r3
 800b992:	d127      	bne.n	800b9e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	3338      	adds	r3, #56	; 0x38
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fd ff59 	bl	8009850 <ld_dword>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4a1d      	ldr	r2, [pc, #116]	; (800ba18 <find_volume+0x4fc>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d11e      	bne.n	800b9e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	3338      	adds	r3, #56	; 0x38
 800b9aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fd ff4e 	bl	8009850 <ld_dword>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	4a19      	ldr	r2, [pc, #100]	; (800ba1c <find_volume+0x500>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d113      	bne.n	800b9e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	3338      	adds	r3, #56	; 0x38
 800b9c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd ff43 	bl	8009850 <ld_dword>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	3338      	adds	r3, #56	; 0x38
 800b9d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd ff39 	bl	8009850 <ld_dword>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b9ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <find_volume+0x504>)
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <find_volume+0x504>)
 800b9f6:	801a      	strh	r2, [r3, #0]
 800b9f8:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <find_volume+0x504>)
 800b9fa:	881a      	ldrh	r2, [r3, #0]
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	4a08      	ldr	r2, [pc, #32]	; (800ba24 <find_volume+0x508>)
 800ba04:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ba06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba08:	f7fe f952 	bl	8009cb0 <clear_lock>
#endif
	return FR_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3758      	adds	r7, #88	; 0x58
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	41615252 	.word	0x41615252
 800ba1c:	61417272 	.word	0x61417272
 800ba20:	2000edf4 	.word	0x2000edf4
 800ba24:	2000ee18 	.word	0x2000ee18

0800ba28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba32:	2309      	movs	r3, #9
 800ba34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01c      	beq.n	800ba76 <validate+0x4e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d018      	beq.n	800ba76 <validate+0x4e>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d013      	beq.n	800ba76 <validate+0x4e>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	889a      	ldrh	r2, [r3, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	88db      	ldrh	r3, [r3, #6]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d10c      	bne.n	800ba76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fe3e 	bl	80096e4 <disk_status>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <validate+0x4e>
			res = FR_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <validate+0x5a>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	e000      	b.n	800ba84 <validate+0x5c>
 800ba82:	2300      	movs	r3, #0
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	6013      	str	r3, [r2, #0]
	return res;
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800baa6:	f107 0310 	add.w	r3, r7, #16
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc9c 	bl	800b3e8 <get_ldnumber>
 800bab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da01      	bge.n	800babc <f_mount+0x28>
 800bab8:	230b      	movs	r3, #11
 800baba:	e02b      	b.n	800bb14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800babc:	4a17      	ldr	r2, [pc, #92]	; (800bb1c <f_mount+0x88>)
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bacc:	69b8      	ldr	r0, [r7, #24]
 800bace:	f7fe f8ef 	bl	8009cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	2200      	movs	r2, #0
 800bad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	490d      	ldr	r1, [pc, #52]	; (800bb1c <f_mount+0x88>)
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <f_mount+0x66>
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d001      	beq.n	800bafe <f_mount+0x6a>
 800bafa:	2300      	movs	r3, #0
 800bafc:	e00a      	b.n	800bb14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bafe:	f107 010c 	add.w	r1, r7, #12
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	2200      	movs	r2, #0
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fd07 	bl	800b51c <find_volume>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	2000edf0 	.word	0x2000edf0

0800bb20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b09a      	sub	sp, #104	; 0x68
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <f_open+0x18>
 800bb34:	2309      	movs	r3, #9
 800bb36:	e1bb      	b.n	800beb0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bb40:	79fa      	ldrb	r2, [r7, #7]
 800bb42:	f107 0114 	add.w	r1, r7, #20
 800bb46:	f107 0308 	add.w	r3, r7, #8
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff fce6 	bl	800b51c <find_volume>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bb56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f040 819f 	bne.w	800be9e <f_open+0x37e>
		dj.obj.fs = fs;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	f107 0318 	add.w	r3, r7, #24
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff fbc5 	bl	800b2fc <follow_path>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bb78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11a      	bne.n	800bbb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bb80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bb84:	b25b      	sxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	da03      	bge.n	800bb92 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bb8a:	2306      	movs	r3, #6
 800bb8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bb90:	e011      	b.n	800bbb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	f023 0301 	bic.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bf14      	ite	ne
 800bb9c:	2301      	movne	r3, #1
 800bb9e:	2300      	moveq	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	f107 0318 	add.w	r3, r7, #24
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd ff38 	bl	8009a20 <chk_lock>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	f003 031c 	and.w	r3, r3, #28
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d07f      	beq.n	800bcc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bbc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d017      	beq.n	800bbf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bbc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d10e      	bne.n	800bbee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bbd0:	f7fd ff82 	bl	8009ad8 <enq_lock>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d006      	beq.n	800bbe8 <f_open+0xc8>
 800bbda:	f107 0318 	add.w	r3, r7, #24
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff f8dc 	bl	800ad9c <dir_register>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	e000      	b.n	800bbea <f_open+0xca>
 800bbe8:	2312      	movs	r3, #18
 800bbea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bbee:	79fb      	ldrb	r3, [r7, #7]
 800bbf0:	f043 0308 	orr.w	r3, r3, #8
 800bbf4:	71fb      	strb	r3, [r7, #7]
 800bbf6:	e010      	b.n	800bc1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bbf8:	7fbb      	ldrb	r3, [r7, #30]
 800bbfa:	f003 0311 	and.w	r3, r3, #17
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <f_open+0xea>
					res = FR_DENIED;
 800bc02:	2307      	movs	r3, #7
 800bc04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bc08:	e007      	b.n	800bc1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <f_open+0xfa>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bc1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d168      	bne.n	800bcf4 <f_open+0x1d4>
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d063      	beq.n	800bcf4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bc2c:	f7fd fcf8 	bl	8009620 <get_fattime>
 800bc30:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	330e      	adds	r3, #14
 800bc36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fd fe47 	bl	80098cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	3316      	adds	r3, #22
 800bc42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fd fe41 	bl	80098cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	330b      	adds	r3, #11
 800bc4e:	2220      	movs	r2, #32
 800bc50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fe17 	bl	800a88c <ld_clust>
 800bc5e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc64:	2200      	movs	r2, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe fe2f 	bl	800a8ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	331c      	adds	r3, #28
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd fe2a 	bl	80098cc <st_dword>
					fs->wflag = 1;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bc7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d037      	beq.n	800bcf4 <f_open+0x1d4>
						dw = fs->winsect;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bc8a:	f107 0318 	add.w	r3, r7, #24
 800bc8e:	2200      	movs	r2, #0
 800bc90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe fb1f 	bl	800a2d6 <remove_chain>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bc9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d126      	bne.n	800bcf4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe f868 	bl	8009d80 <move_window>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcba:	3a01      	subs	r2, #1
 800bcbc:	615a      	str	r2, [r3, #20]
 800bcbe:	e019      	b.n	800bcf4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bcc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d115      	bne.n	800bcf4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bcc8:	7fbb      	ldrb	r3, [r7, #30]
 800bcca:	f003 0310 	and.w	r3, r3, #16
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <f_open+0x1ba>
					res = FR_NO_FILE;
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bcd8:	e00c      	b.n	800bcf4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <f_open+0x1d4>
 800bce4:	7fbb      	ldrb	r3, [r7, #30]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <f_open+0x1d4>
						res = FR_DENIED;
 800bcee:	2307      	movs	r3, #7
 800bcf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bcf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d128      	bne.n	800bd4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f003 0308 	and.w	r3, r3, #8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bd16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
 800bd1e:	f023 0301 	bic.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	f107 0318 	add.w	r3, r7, #24
 800bd32:	4611      	mov	r1, r2
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fd fef1 	bl	8009b1c <inc_lock>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <f_open+0x22e>
 800bd48:	2302      	movs	r3, #2
 800bd4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bd4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f040 80a3 	bne.w	800be9e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe fd94 	bl	800a88c <ld_clust>
 800bd64:	4602      	mov	r2, r0
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	331c      	adds	r3, #28
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fd fd6e 	bl	8009850 <ld_dword>
 800bd74:	4602      	mov	r2, r0
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	88da      	ldrh	r2, [r3, #6]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	79fa      	ldrb	r2, [r7, #7]
 800bd92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3330      	adds	r3, #48	; 0x30
 800bdaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fd fdd8 	bl	8009966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	f003 0320 	and.w	r3, r3, #32
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d06e      	beq.n	800be9e <f_open+0x37e>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d06a      	beq.n	800be9e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	895b      	ldrh	r3, [r3, #10]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	899b      	ldrh	r3, [r3, #12]
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
 800bdde:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdec:	e016      	b.n	800be1c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe f881 	bl	8009efa <get_fat>
 800bdf8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bdfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d802      	bhi.n	800be06 <f_open+0x2e6>
 800be00:	2302      	movs	r3, #2
 800be02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0c:	d102      	bne.n	800be14 <f_open+0x2f4>
 800be0e:	2301      	movs	r3, #1
 800be10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <f_open+0x30c>
 800be24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be28:	429a      	cmp	r2, r3
 800be2a:	d8e0      	bhi.n	800bdee <f_open+0x2ce>
				}
				fp->clust = clst;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800be32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be36:	2b00      	cmp	r3, #0
 800be38:	d131      	bne.n	800be9e <f_open+0x37e>
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	899b      	ldrh	r3, [r3, #12]
 800be3e:	461a      	mov	r2, r3
 800be40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be42:	fbb3 f1f2 	udiv	r1, r3, r2
 800be46:	fb01 f202 	mul.w	r2, r1, r2
 800be4a:	1a9b      	subs	r3, r3, r2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d026      	beq.n	800be9e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe f831 	bl	8009ebc <clust2sect>
 800be5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800be5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d103      	bne.n	800be6a <f_open+0x34a>
						res = FR_INT_ERR;
 800be62:	2302      	movs	r3, #2
 800be64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800be68:	e019      	b.n	800be9e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	899b      	ldrh	r3, [r3, #12]
 800be6e:	461a      	mov	r2, r3
 800be70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be72:	fbb3 f2f2 	udiv	r2, r3, r2
 800be76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be78:	441a      	add	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	7858      	ldrb	r0, [r3, #1]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a1a      	ldr	r2, [r3, #32]
 800be8c:	2301      	movs	r3, #1
 800be8e:	f7fd fc69 	bl	8009764 <disk_read>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <f_open+0x37e>
 800be98:	2301      	movs	r3, #1
 800be9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800be9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d002      	beq.n	800beac <f_open+0x38c>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800beac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3768      	adds	r7, #104	; 0x68
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08c      	sub	sp, #48	; 0x30
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f107 0210 	add.w	r2, r7, #16
 800bed6:	4611      	mov	r1, r2
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff fda5 	bl	800ba28 <validate>
 800bede:	4603      	mov	r3, r0
 800bee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d107      	bne.n	800befc <f_write+0x44>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	7d5b      	ldrb	r3, [r3, #21]
 800bef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <f_write+0x4a>
 800befc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf00:	e16a      	b.n	800c1d8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	7d1b      	ldrb	r3, [r3, #20]
 800bf06:	f003 0302 	and.w	r3, r3, #2
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <f_write+0x5a>
 800bf0e:	2307      	movs	r3, #7
 800bf10:	e162      	b.n	800c1d8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	699a      	ldr	r2, [r3, #24]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	441a      	add	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	f080 814c 	bcs.w	800c1bc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	43db      	mvns	r3, r3
 800bf2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bf2c:	e146      	b.n	800c1bc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	8992      	ldrh	r2, [r2, #12]
 800bf36:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf3a:	fb01 f202 	mul.w	r2, r1, r2
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f040 80f1 	bne.w	800c128 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	8992      	ldrh	r2, [r2, #12]
 800bf4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	8952      	ldrh	r2, [r2, #10]
 800bf56:	3a01      	subs	r2, #1
 800bf58:	4013      	ands	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d143      	bne.n	800bfea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10c      	bne.n	800bf84 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d11a      	bne.n	800bfac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fa10 	bl	800a3a0 <create_chain>
 800bf80:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf82:	e013      	b.n	800bfac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	4619      	mov	r1, r3
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7fe fa9c 	bl	800a4d0 <clmt_clust>
 800bf98:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf9a:	e007      	b.n	800bfac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fe f9fb 	bl	800a3a0 <create_chain>
 800bfaa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 8109 	beq.w	800c1c6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d104      	bne.n	800bfc4 <f_write+0x10c>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	755a      	strb	r2, [r3, #21]
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	e109      	b.n	800c1d8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d104      	bne.n	800bfd6 <f_write+0x11e>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	755a      	strb	r2, [r3, #21]
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e100      	b.n	800c1d8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfda:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <f_write+0x132>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	7d1b      	ldrb	r3, [r3, #20]
 800bfee:	b25b      	sxtb	r3, r3
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	da18      	bge.n	800c026 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	7858      	ldrb	r0, [r3, #1]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a1a      	ldr	r2, [r3, #32]
 800c002:	2301      	movs	r3, #1
 800c004:	f7fd fbce 	bl	80097a4 <disk_write>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <f_write+0x160>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	755a      	strb	r2, [r3, #21]
 800c014:	2301      	movs	r3, #1
 800c016:	e0df      	b.n	800c1d8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	7d1b      	ldrb	r3, [r3, #20]
 800c01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c020:	b2da      	uxtb	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	4619      	mov	r1, r3
 800c02e:	4610      	mov	r0, r2
 800c030:	f7fd ff44 	bl	8009ebc <clust2sect>
 800c034:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <f_write+0x18e>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2202      	movs	r2, #2
 800c040:	755a      	strb	r2, [r3, #21]
 800c042:	2302      	movs	r3, #2
 800c044:	e0c8      	b.n	800c1d8 <f_write+0x320>
			sect += csect;
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	4413      	add	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	899b      	ldrh	r3, [r3, #12]
 800c052:	461a      	mov	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	fbb3 f3f2 	udiv	r3, r3, r2
 800c05a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d043      	beq.n	800c0ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	4413      	add	r3, r2
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	8952      	ldrh	r2, [r2, #10]
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d905      	bls.n	800c07c <f_write+0x1c4>
					cc = fs->csize - csect;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	895b      	ldrh	r3, [r3, #10]
 800c074:	461a      	mov	r2, r3
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	7858      	ldrb	r0, [r3, #1]
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	69f9      	ldr	r1, [r7, #28]
 800c086:	f7fd fb8d 	bl	80097a4 <disk_write>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d004      	beq.n	800c09a <f_write+0x1e2>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	755a      	strb	r2, [r3, #21]
 800c096:	2301      	movs	r3, #1
 800c098:	e09e      	b.n	800c1d8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6a1a      	ldr	r2, [r3, #32]
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	6a3a      	ldr	r2, [r7, #32]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d918      	bls.n	800c0da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6a1a      	ldr	r2, [r3, #32]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	8992      	ldrh	r2, [r2, #12]
 800c0ba:	fb02 f303 	mul.w	r3, r2, r3
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	18d1      	adds	r1, r2, r3
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	899b      	ldrh	r3, [r3, #12]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f7fd fc2c 	bl	8009924 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	7d1b      	ldrb	r3, [r3, #20]
 800c0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	fb02 f303 	mul.w	r3, r2, r3
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c0e8:	e04b      	b.n	800c182 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d016      	beq.n	800c122 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	699a      	ldr	r2, [r3, #24]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d210      	bcs.n	800c122 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	7858      	ldrb	r0, [r3, #1]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c10a:	2301      	movs	r3, #1
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	f7fd fb29 	bl	8009764 <disk_read>
 800c112:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	755a      	strb	r2, [r3, #21]
 800c11e:	2301      	movs	r3, #1
 800c120:	e05a      	b.n	800c1d8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	899b      	ldrh	r3, [r3, #12]
 800c12c:	4618      	mov	r0, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	8992      	ldrh	r2, [r2, #12]
 800c136:	fbb3 f1f2 	udiv	r1, r3, r2
 800c13a:	fb01 f202 	mul.w	r2, r1, r2
 800c13e:	1a9b      	subs	r3, r3, r2
 800c140:	1ac3      	subs	r3, r0, r3
 800c142:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d901      	bls.n	800c150 <f_write+0x298>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	8992      	ldrh	r2, [r2, #12]
 800c15e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c162:	fb00 f202 	mul.w	r2, r0, r2
 800c166:	1a9b      	subs	r3, r3, r2
 800c168:	440b      	add	r3, r1
 800c16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16c:	69f9      	ldr	r1, [r7, #28]
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fd fbd8 	bl	8009924 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	4413      	add	r3, r2
 800c188:	61fb      	str	r3, [r7, #28]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	699a      	ldr	r2, [r3, #24]
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	619a      	str	r2, [r3, #24]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	bf38      	it	cc
 800c1a2:	461a      	movcc	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	60da      	str	r2, [r3, #12]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	441a      	add	r2, r3
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f47f aeb5 	bne.w	800bf2e <f_write+0x76>
 800c1c4:	e000      	b.n	800c1c8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c1c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3730      	adds	r7, #48	; 0x30
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f107 0208 	add.w	r2, r7, #8
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff fc19 	bl	800ba28 <validate>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d168      	bne.n	800c2d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7d1b      	ldrb	r3, [r3, #20]
 800c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d062      	beq.n	800c2d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
 800c210:	b25b      	sxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	da15      	bge.n	800c242 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	7858      	ldrb	r0, [r3, #1]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a1a      	ldr	r2, [r3, #32]
 800c224:	2301      	movs	r3, #1
 800c226:	f7fd fabd 	bl	80097a4 <disk_write>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <f_sync+0x54>
 800c230:	2301      	movs	r3, #1
 800c232:	e04f      	b.n	800c2d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	7d1b      	ldrb	r3, [r3, #20]
 800c238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c242:	f7fd f9ed 	bl	8009620 <get_fattime>
 800c246:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24e:	4619      	mov	r1, r3
 800c250:	4610      	mov	r0, r2
 800c252:	f7fd fd95 	bl	8009d80 <move_window>
 800c256:	4603      	mov	r3, r0
 800c258:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d138      	bne.n	800c2d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c264:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	330b      	adds	r3, #11
 800c26a:	781a      	ldrb	r2, [r3, #0]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	330b      	adds	r3, #11
 800c270:	f042 0220 	orr.w	r2, r2, #32
 800c274:	b2d2      	uxtb	r2, r2
 800c276:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6818      	ldr	r0, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	461a      	mov	r2, r3
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	f7fe fb21 	bl	800a8ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f103 021c 	add.w	r2, r3, #28
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd fb19 	bl	80098cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3316      	adds	r3, #22
 800c29e:	6939      	ldr	r1, [r7, #16]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fd fb13 	bl	80098cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3312      	adds	r3, #18
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd faf2 	bl	8009896 <st_word>
					fs->wflag = 1;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fd8e 	bl	8009ddc <sync_fs>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7d1b      	ldrb	r3, [r3, #20]
 800c2c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff7b 	bl	800c1e0 <f_sync>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d118      	bne.n	800c326 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f107 0208 	add.w	r2, r7, #8
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff fb93 	bl	800ba28 <validate>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10c      	bne.n	800c326 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	4618      	mov	r0, r3
 800c312:	f7fd fc91 	bl	8009c38 <dec_lock>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b090      	sub	sp, #64	; 0x40
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f107 0208 	add.w	r2, r7, #8
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff fb70 	bl	800ba28 <validate>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c34e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c352:	2b00      	cmp	r3, #0
 800c354:	d103      	bne.n	800c35e <f_lseek+0x2e>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	7d5b      	ldrb	r3, [r3, #21]
 800c35a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c35e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <f_lseek+0x3c>
 800c366:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c36a:	e201      	b.n	800c770 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 80d9 	beq.w	800c528 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37c:	d15a      	bne.n	800c434 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	1d1a      	adds	r2, r3, #4
 800c388:	627a      	str	r2, [r7, #36]	; 0x24
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	617b      	str	r3, [r7, #20]
 800c38e:	2302      	movs	r3, #2
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d03a      	beq.n	800c414 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	613b      	str	r3, [r7, #16]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	3302      	adds	r3, #2
 800c3aa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd fd9d 	bl	8009efa <get_fat>
 800c3c0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d804      	bhi.n	800c3d2 <f_lseek+0xa2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	755a      	strb	r2, [r3, #21]
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e1ce      	b.n	800c770 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d8:	d104      	bne.n	800c3e4 <f_lseek+0xb4>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	755a      	strb	r2, [r3, #21]
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e1c5      	b.n	800c770 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d0de      	beq.n	800c3ac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d809      	bhi.n	800c40a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	1d1a      	adds	r2, r3, #4
 800c3fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	1d1a      	adds	r2, r3, #4
 800c404:	627a      	str	r2, [r7, #36]	; 0x24
 800c406:	693a      	ldr	r2, [r7, #16]
 800c408:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c410:	429a      	cmp	r2, r3
 800c412:	d3c4      	bcc.n	800c39e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	429a      	cmp	r2, r3
 800c422:	d803      	bhi.n	800c42c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	2200      	movs	r2, #0
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	e19f      	b.n	800c76c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c42c:	2311      	movs	r3, #17
 800c42e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c432:	e19b      	b.n	800c76c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d902      	bls.n	800c444 <f_lseek+0x114>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 818d 	beq.w	800c76c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	3b01      	subs	r3, #1
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7fe f839 	bl	800a4d0 <clmt_clust>
 800c45e:	4602      	mov	r2, r0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	4619      	mov	r1, r3
 800c46c:	4610      	mov	r0, r2
 800c46e:	f7fd fd25 	bl	8009ebc <clust2sect>
 800c472:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d104      	bne.n	800c484 <f_lseek+0x154>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2202      	movs	r2, #2
 800c47e:	755a      	strb	r2, [r3, #21]
 800c480:	2302      	movs	r3, #2
 800c482:	e175      	b.n	800c770 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	3b01      	subs	r3, #1
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	8992      	ldrh	r2, [r2, #12]
 800c48c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	8952      	ldrh	r2, [r2, #10]
 800c494:	3a01      	subs	r2, #1
 800c496:	4013      	ands	r3, r2
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	4413      	add	r3, r2
 800c49c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	8992      	ldrh	r2, [r2, #12]
 800c4a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4aa:	fb01 f202 	mul.w	r2, r1, r2
 800c4ae:	1a9b      	subs	r3, r3, r2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 815b 	beq.w	800c76c <f_lseek+0x43c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	f000 8155 	beq.w	800c76c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	7d1b      	ldrb	r3, [r3, #20]
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da18      	bge.n	800c4fe <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	7858      	ldrb	r0, [r3, #1]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a1a      	ldr	r2, [r3, #32]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	f7fd f962 	bl	80097a4 <disk_write>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <f_lseek+0x1c0>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	755a      	strb	r2, [r3, #21]
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e13f      	b.n	800c770 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7d1b      	ldrb	r3, [r3, #20]
 800c4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	7858      	ldrb	r0, [r3, #1]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c508:	2301      	movs	r3, #1
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	f7fd f92a 	bl	8009764 <disk_read>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <f_lseek+0x1f0>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	755a      	strb	r2, [r3, #21]
 800c51c:	2301      	movs	r3, #1
 800c51e:	e127      	b.n	800c770 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	621a      	str	r2, [r3, #32]
 800c526:	e121      	b.n	800c76c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d908      	bls.n	800c544 <f_lseek+0x214>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7d1b      	ldrb	r3, [r3, #20]
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	637b      	str	r3, [r7, #52]	; 0x34
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c552:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80b5 	beq.w	800c6c6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	461a      	mov	r2, r3
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	899b      	ldrh	r3, [r3, #12]
 800c566:	fb02 f303 	mul.w	r3, r2, r3
 800c56a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d01b      	beq.n	800c5aa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	1e5a      	subs	r2, r3, #1
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	fbb2 f2f3 	udiv	r2, r2, r3
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	1e59      	subs	r1, r3, #1
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c586:	429a      	cmp	r2, r3
 800c588:	d30f      	bcc.n	800c5aa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	425b      	negs	r3, r3
 800c592:	401a      	ands	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5a8:	e022      	b.n	800c5f0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d119      	bne.n	800c5ea <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd fef0 	bl	800a3a0 <create_chain>
 800c5c0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d104      	bne.n	800c5d2 <f_lseek+0x2a2>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	755a      	strb	r2, [r3, #21]
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	e0ce      	b.n	800c770 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d8:	d104      	bne.n	800c5e4 <f_lseek+0x2b4>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	755a      	strb	r2, [r3, #21]
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e0c5      	b.n	800c770 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d067      	beq.n	800c6c6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c5f6:	e03a      	b.n	800c66e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	603b      	str	r3, [r7, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	699a      	ldr	r2, [r3, #24]
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	441a      	add	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	f003 0302 	and.w	r3, r3, #2
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00b      	beq.n	800c630 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fd febf 	bl	800a3a0 <create_chain>
 800c622:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	2b00      	cmp	r3, #0
 800c628:	d108      	bne.n	800c63c <f_lseek+0x30c>
							ofs = 0; break;
 800c62a:	2300      	movs	r3, #0
 800c62c:	603b      	str	r3, [r7, #0]
 800c62e:	e022      	b.n	800c676 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c634:	4618      	mov	r0, r3
 800c636:	f7fd fc60 	bl	8009efa <get_fat>
 800c63a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c642:	d104      	bne.n	800c64e <f_lseek+0x31e>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	755a      	strb	r2, [r3, #21]
 800c64a:	2301      	movs	r3, #1
 800c64c:	e090      	b.n	800c770 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b01      	cmp	r3, #1
 800c652:	d904      	bls.n	800c65e <f_lseek+0x32e>
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d304      	bcc.n	800c668 <f_lseek+0x338>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	755a      	strb	r2, [r3, #21]
 800c664:	2302      	movs	r3, #2
 800c666:	e083      	b.n	800c770 <f_lseek+0x440>
					fp->clust = clst;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c66c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	429a      	cmp	r2, r3
 800c674:	d8c0      	bhi.n	800c5f8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	699a      	ldr	r2, [r3, #24]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	441a      	add	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	899b      	ldrh	r3, [r3, #12]
 800c686:	461a      	mov	r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c68e:	fb01 f202 	mul.w	r2, r1, r2
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d016      	beq.n	800c6c6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd fc0d 	bl	8009ebc <clust2sect>
 800c6a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d104      	bne.n	800c6b4 <f_lseek+0x384>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	755a      	strb	r2, [r3, #21]
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	e05d      	b.n	800c770 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	899b      	ldrh	r3, [r3, #12]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c2:	4413      	add	r3, r2
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	699a      	ldr	r2, [r3, #24]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d90a      	bls.n	800c6e8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	699a      	ldr	r2, [r3, #24]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	7d1b      	ldrb	r3, [r3, #20]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	8992      	ldrh	r2, [r2, #12]
 800c6f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6f4:	fb01 f202 	mul.w	r2, r1, r2
 800c6f8:	1a9b      	subs	r3, r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d036      	beq.n	800c76c <f_lseek+0x43c>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c704:	429a      	cmp	r2, r3
 800c706:	d031      	beq.n	800c76c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7d1b      	ldrb	r3, [r3, #20]
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	da18      	bge.n	800c744 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	7858      	ldrb	r0, [r3, #1]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a1a      	ldr	r2, [r3, #32]
 800c720:	2301      	movs	r3, #1
 800c722:	f7fd f83f 	bl	80097a4 <disk_write>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <f_lseek+0x406>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	755a      	strb	r2, [r3, #21]
 800c732:	2301      	movs	r3, #1
 800c734:	e01c      	b.n	800c770 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7d1b      	ldrb	r3, [r3, #20]
 800c73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	7858      	ldrb	r0, [r3, #1]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c74e:	2301      	movs	r3, #1
 800c750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c752:	f7fd f807 	bl	8009764 <disk_read>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <f_lseek+0x436>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	755a      	strb	r2, [r3, #21]
 800c762:	2301      	movs	r3, #1
 800c764:	e004      	b.n	800c770 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c76a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c76c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c770:	4618      	mov	r0, r3
 800c772:	3740      	adds	r7, #64	; 0x40
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	2b0a      	cmp	r3, #10
 800c788:	d103      	bne.n	800c792 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c78a:	210d      	movs	r1, #13
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff fff3 	bl	800c778 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	db25      	blt.n	800c7ea <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	60fa      	str	r2, [r7, #12]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	78fa      	ldrb	r2, [r7, #3]
 800c7aa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b3c      	cmp	r3, #60	; 0x3c
 800c7b0:	dd12      	ble.n	800c7d8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 010c 	add.w	r1, r3, #12
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	f107 0308 	add.w	r3, r7, #8
 800c7c2:	f7ff fb79 	bl	800beb8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d101      	bne.n	800c7d2 <putc_bfd+0x5a>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e001      	b.n	800c7d6 <putc_bfd+0x5e>
 800c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	1c5a      	adds	r2, r3, #1
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	609a      	str	r2, [r3, #8]
 800c7e8:	e000      	b.n	800c7ec <putc_bfd+0x74>
	if (i < 0) return;
 800c7ea:	bf00      	nop
}
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	db16      	blt.n	800c830 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6818      	ldr	r0, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f103 010c 	add.w	r1, r3, #12
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	461a      	mov	r2, r3
 800c812:	f107 030c 	add.w	r3, r7, #12
 800c816:	f7ff fb4f 	bl	800beb8 <f_write>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d107      	bne.n	800c830 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4293      	cmp	r3, r2
 800c828:	d102      	bne.n	800c830 <putc_flush+0x3e>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	e001      	b.n	800c834 <putc_flush+0x42>
	return EOF;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	605a      	str	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	609a      	str	r2, [r3, #8]
}
 800c85a:	bf00      	nop
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b096      	sub	sp, #88	; 0x58
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c870:	f107 030c 	add.w	r3, r7, #12
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ffe0 	bl	800c83c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c87c:	e009      	b.n	800c892 <f_puts+0x2c>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	781a      	ldrb	r2, [r3, #0]
 800c886:	f107 030c 	add.w	r3, r7, #12
 800c88a:	4611      	mov	r1, r2
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff ff73 	bl	800c778 <putc_bfd>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1f1      	bne.n	800c87e <f_puts+0x18>
	return putc_flush(&pb);
 800c89a:	f107 030c 	add.w	r3, r7, #12
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff ffa7 	bl	800c7f2 <putc_flush>
 800c8a4:	4603      	mov	r3, r0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3758      	adds	r7, #88	; 0x58
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8c6:	4b1f      	ldr	r3, [pc, #124]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8c8:	7a5b      	ldrb	r3, [r3, #9]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d131      	bne.n	800c934 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8d0:	4b1c      	ldr	r3, [pc, #112]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8d2:	7a5b      	ldrb	r3, [r3, #9]
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4b1a      	ldr	r3, [pc, #104]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8da:	2100      	movs	r1, #0
 800c8dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8de:	4b19      	ldr	r3, [pc, #100]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8e0:	7a5b      	ldrb	r3, [r3, #9]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4a17      	ldr	r2, [pc, #92]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c8ee:	4b15      	ldr	r3, [pc, #84]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8f0:	7a5b      	ldrb	r3, [r3, #9]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	4b13      	ldr	r3, [pc, #76]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c8f8:	4413      	add	r3, r2
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c900:	7a5b      	ldrb	r3, [r3, #9]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	1c5a      	adds	r2, r3, #1
 800c906:	b2d1      	uxtb	r1, r2
 800c908:	4a0e      	ldr	r2, [pc, #56]	; (800c944 <FATFS_LinkDriverEx+0x94>)
 800c90a:	7251      	strb	r1, [r2, #9]
 800c90c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c90e:	7dbb      	ldrb	r3, [r7, #22]
 800c910:	3330      	adds	r3, #48	; 0x30
 800c912:	b2da      	uxtb	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	3301      	adds	r3, #1
 800c91c:	223a      	movs	r2, #58	; 0x3a
 800c91e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	3302      	adds	r3, #2
 800c924:	222f      	movs	r2, #47	; 0x2f
 800c926:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	3303      	adds	r3, #3
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
}
 800c936:	4618      	mov	r0, r3
 800c938:	371c      	adds	r7, #28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000f018 	.word	0x2000f018

0800c948 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c952:	2200      	movs	r2, #0
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff ffaa 	bl	800c8b0 <FATFS_LinkDriverEx>
 800c95c:	4603      	mov	r3, r0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	6039      	str	r1, [r7, #0]
 800c972:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c974:	88fb      	ldrh	r3, [r7, #6]
 800c976:	2b7f      	cmp	r3, #127	; 0x7f
 800c978:	d802      	bhi.n	800c980 <ff_convert+0x18>
		c = chr;
 800c97a:	88fb      	ldrh	r3, [r7, #6]
 800c97c:	81fb      	strh	r3, [r7, #14]
 800c97e:	e025      	b.n	800c9cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c986:	88fb      	ldrh	r3, [r7, #6]
 800c988:	2bff      	cmp	r3, #255	; 0xff
 800c98a:	d805      	bhi.n	800c998 <ff_convert+0x30>
 800c98c:	88fb      	ldrh	r3, [r7, #6]
 800c98e:	3b80      	subs	r3, #128	; 0x80
 800c990:	4a12      	ldr	r2, [pc, #72]	; (800c9dc <ff_convert+0x74>)
 800c992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c996:	e000      	b.n	800c99a <ff_convert+0x32>
 800c998:	2300      	movs	r3, #0
 800c99a:	81fb      	strh	r3, [r7, #14]
 800c99c:	e016      	b.n	800c9cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c99e:	2300      	movs	r3, #0
 800c9a0:	81fb      	strh	r3, [r7, #14]
 800c9a2:	e009      	b.n	800c9b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
 800c9a6:	4a0d      	ldr	r2, [pc, #52]	; (800c9dc <ff_convert+0x74>)
 800c9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d006      	beq.n	800c9c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c9b2:	89fb      	ldrh	r3, [r7, #14]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	81fb      	strh	r3, [r7, #14]
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c9bc:	d9f2      	bls.n	800c9a4 <ff_convert+0x3c>
 800c9be:	e000      	b.n	800c9c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c9c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c9c2:	89fb      	ldrh	r3, [r7, #14]
 800c9c4:	3380      	adds	r3, #128	; 0x80
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	0800fa6c 	.word	0x0800fa6c

0800c9e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c9ea:	88fb      	ldrh	r3, [r7, #6]
 800c9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f0:	d201      	bcs.n	800c9f6 <ff_wtoupper+0x16>
 800c9f2:	4b3e      	ldr	r3, [pc, #248]	; (800caec <ff_wtoupper+0x10c>)
 800c9f4:	e000      	b.n	800c9f8 <ff_wtoupper+0x18>
 800c9f6:	4b3e      	ldr	r3, [pc, #248]	; (800caf0 <ff_wtoupper+0x110>)
 800c9f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	1c9a      	adds	r2, r3, #2
 800c9fe:	617a      	str	r2, [r7, #20]
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ca04:	8a7b      	ldrh	r3, [r7, #18]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d068      	beq.n	800cadc <ff_wtoupper+0xfc>
 800ca0a:	88fa      	ldrh	r2, [r7, #6]
 800ca0c:	8a7b      	ldrh	r3, [r7, #18]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d364      	bcc.n	800cadc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	1c9a      	adds	r2, r3, #2
 800ca16:	617a      	str	r2, [r7, #20]
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	823b      	strh	r3, [r7, #16]
 800ca1c:	8a3b      	ldrh	r3, [r7, #16]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	81fb      	strh	r3, [r7, #14]
 800ca22:	8a3b      	ldrh	r3, [r7, #16]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ca28:	88fa      	ldrh	r2, [r7, #6]
 800ca2a:	8a79      	ldrh	r1, [r7, #18]
 800ca2c:	8a3b      	ldrh	r3, [r7, #16]
 800ca2e:	440b      	add	r3, r1
 800ca30:	429a      	cmp	r2, r3
 800ca32:	da49      	bge.n	800cac8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ca34:	89fb      	ldrh	r3, [r7, #14]
 800ca36:	2b08      	cmp	r3, #8
 800ca38:	d84f      	bhi.n	800cada <ff_wtoupper+0xfa>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <ff_wtoupper+0x60>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca65 	.word	0x0800ca65
 800ca44:	0800ca77 	.word	0x0800ca77
 800ca48:	0800ca8d 	.word	0x0800ca8d
 800ca4c:	0800ca95 	.word	0x0800ca95
 800ca50:	0800ca9d 	.word	0x0800ca9d
 800ca54:	0800caa5 	.word	0x0800caa5
 800ca58:	0800caad 	.word	0x0800caad
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800cabd 	.word	0x0800cabd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ca64:	88fa      	ldrh	r2, [r7, #6]
 800ca66:	8a7b      	ldrh	r3, [r7, #18]
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4413      	add	r3, r2
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	80fb      	strh	r3, [r7, #6]
 800ca74:	e027      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	8a7b      	ldrh	r3, [r7, #18]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	88fa      	ldrh	r2, [r7, #6]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	80fb      	strh	r3, [r7, #6]
 800ca8a:	e01c      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ca8c:	88fb      	ldrh	r3, [r7, #6]
 800ca8e:	3b10      	subs	r3, #16
 800ca90:	80fb      	strh	r3, [r7, #6]
 800ca92:	e018      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ca94:	88fb      	ldrh	r3, [r7, #6]
 800ca96:	3b20      	subs	r3, #32
 800ca98:	80fb      	strh	r3, [r7, #6]
 800ca9a:	e014      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ca9c:	88fb      	ldrh	r3, [r7, #6]
 800ca9e:	3b30      	subs	r3, #48	; 0x30
 800caa0:	80fb      	strh	r3, [r7, #6]
 800caa2:	e010      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800caa4:	88fb      	ldrh	r3, [r7, #6]
 800caa6:	3b1a      	subs	r3, #26
 800caa8:	80fb      	strh	r3, [r7, #6]
 800caaa:	e00c      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800caac:	88fb      	ldrh	r3, [r7, #6]
 800caae:	3308      	adds	r3, #8
 800cab0:	80fb      	strh	r3, [r7, #6]
 800cab2:	e008      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cab4:	88fb      	ldrh	r3, [r7, #6]
 800cab6:	3b50      	subs	r3, #80	; 0x50
 800cab8:	80fb      	strh	r3, [r7, #6]
 800caba:	e004      	b.n	800cac6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cac2:	80fb      	strh	r3, [r7, #6]
 800cac4:	bf00      	nop
			}
			break;
 800cac6:	e008      	b.n	800cada <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cac8:	89fb      	ldrh	r3, [r7, #14]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d195      	bne.n	800c9fa <ff_wtoupper+0x1a>
 800cace:	8a3b      	ldrh	r3, [r7, #16]
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4413      	add	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cad8:	e78f      	b.n	800c9fa <ff_wtoupper+0x1a>
			break;
 800cada:	bf00      	nop
	}

	return chr;
 800cadc:	88fb      	ldrh	r3, [r7, #6]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	371c      	adds	r7, #28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	0800fb6c 	.word	0x0800fb6c
 800caf0:	0800fd60 	.word	0x0800fd60

0800caf4 <__cvt>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	ec55 4b10 	vmov	r4, r5, d0
 800cafc:	2d00      	cmp	r5, #0
 800cafe:	460e      	mov	r6, r1
 800cb00:	4619      	mov	r1, r3
 800cb02:	462b      	mov	r3, r5
 800cb04:	bfbb      	ittet	lt
 800cb06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb0a:	461d      	movlt	r5, r3
 800cb0c:	2300      	movge	r3, #0
 800cb0e:	232d      	movlt	r3, #45	; 0x2d
 800cb10:	700b      	strb	r3, [r1, #0]
 800cb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb18:	4691      	mov	r9, r2
 800cb1a:	f023 0820 	bic.w	r8, r3, #32
 800cb1e:	bfbc      	itt	lt
 800cb20:	4622      	movlt	r2, r4
 800cb22:	4614      	movlt	r4, r2
 800cb24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb28:	d005      	beq.n	800cb36 <__cvt+0x42>
 800cb2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb2e:	d100      	bne.n	800cb32 <__cvt+0x3e>
 800cb30:	3601      	adds	r6, #1
 800cb32:	2102      	movs	r1, #2
 800cb34:	e000      	b.n	800cb38 <__cvt+0x44>
 800cb36:	2103      	movs	r1, #3
 800cb38:	ab03      	add	r3, sp, #12
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	ab02      	add	r3, sp, #8
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	ec45 4b10 	vmov	d0, r4, r5
 800cb44:	4653      	mov	r3, sl
 800cb46:	4632      	mov	r2, r6
 800cb48:	f000 fe7a 	bl	800d840 <_dtoa_r>
 800cb4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb50:	4607      	mov	r7, r0
 800cb52:	d102      	bne.n	800cb5a <__cvt+0x66>
 800cb54:	f019 0f01 	tst.w	r9, #1
 800cb58:	d022      	beq.n	800cba0 <__cvt+0xac>
 800cb5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb5e:	eb07 0906 	add.w	r9, r7, r6
 800cb62:	d110      	bne.n	800cb86 <__cvt+0x92>
 800cb64:	783b      	ldrb	r3, [r7, #0]
 800cb66:	2b30      	cmp	r3, #48	; 0x30
 800cb68:	d10a      	bne.n	800cb80 <__cvt+0x8c>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb76:	b918      	cbnz	r0, 800cb80 <__cvt+0x8c>
 800cb78:	f1c6 0601 	rsb	r6, r6, #1
 800cb7c:	f8ca 6000 	str.w	r6, [sl]
 800cb80:	f8da 3000 	ldr.w	r3, [sl]
 800cb84:	4499      	add	r9, r3
 800cb86:	2200      	movs	r2, #0
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7f3 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb92:	b108      	cbz	r0, 800cb98 <__cvt+0xa4>
 800cb94:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb98:	2230      	movs	r2, #48	; 0x30
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	454b      	cmp	r3, r9
 800cb9e:	d307      	bcc.n	800cbb0 <__cvt+0xbc>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cba4:	1bdb      	subs	r3, r3, r7
 800cba6:	4638      	mov	r0, r7
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	b004      	add	sp, #16
 800cbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb0:	1c59      	adds	r1, r3, #1
 800cbb2:	9103      	str	r1, [sp, #12]
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e7f0      	b.n	800cb9a <__cvt+0xa6>

0800cbb8 <__exponent>:
 800cbb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	bfb8      	it	lt
 800cbc0:	4249      	neglt	r1, r1
 800cbc2:	f803 2b02 	strb.w	r2, [r3], #2
 800cbc6:	bfb4      	ite	lt
 800cbc8:	222d      	movlt	r2, #45	; 0x2d
 800cbca:	222b      	movge	r2, #43	; 0x2b
 800cbcc:	2909      	cmp	r1, #9
 800cbce:	7042      	strb	r2, [r0, #1]
 800cbd0:	dd2a      	ble.n	800cc28 <__exponent+0x70>
 800cbd2:	f10d 0207 	add.w	r2, sp, #7
 800cbd6:	4617      	mov	r7, r2
 800cbd8:	260a      	movs	r6, #10
 800cbda:	4694      	mov	ip, r2
 800cbdc:	fb91 f5f6 	sdiv	r5, r1, r6
 800cbe0:	fb06 1415 	mls	r4, r6, r5, r1
 800cbe4:	3430      	adds	r4, #48	; 0x30
 800cbe6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cbea:	460c      	mov	r4, r1
 800cbec:	2c63      	cmp	r4, #99	; 0x63
 800cbee:	f102 32ff 	add.w	r2, r2, #4294967295
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	dcf1      	bgt.n	800cbda <__exponent+0x22>
 800cbf6:	3130      	adds	r1, #48	; 0x30
 800cbf8:	f1ac 0402 	sub.w	r4, ip, #2
 800cbfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc00:	1c41      	adds	r1, r0, #1
 800cc02:	4622      	mov	r2, r4
 800cc04:	42ba      	cmp	r2, r7
 800cc06:	d30a      	bcc.n	800cc1e <__exponent+0x66>
 800cc08:	f10d 0209 	add.w	r2, sp, #9
 800cc0c:	eba2 020c 	sub.w	r2, r2, ip
 800cc10:	42bc      	cmp	r4, r7
 800cc12:	bf88      	it	hi
 800cc14:	2200      	movhi	r2, #0
 800cc16:	4413      	add	r3, r2
 800cc18:	1a18      	subs	r0, r3, r0
 800cc1a:	b003      	add	sp, #12
 800cc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cc22:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cc26:	e7ed      	b.n	800cc04 <__exponent+0x4c>
 800cc28:	2330      	movs	r3, #48	; 0x30
 800cc2a:	3130      	adds	r1, #48	; 0x30
 800cc2c:	7083      	strb	r3, [r0, #2]
 800cc2e:	70c1      	strb	r1, [r0, #3]
 800cc30:	1d03      	adds	r3, r0, #4
 800cc32:	e7f1      	b.n	800cc18 <__exponent+0x60>

0800cc34 <_printf_float>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	ed2d 8b02 	vpush	{d8}
 800cc3c:	b08d      	sub	sp, #52	; 0x34
 800cc3e:	460c      	mov	r4, r1
 800cc40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc44:	4616      	mov	r6, r2
 800cc46:	461f      	mov	r7, r3
 800cc48:	4605      	mov	r5, r0
 800cc4a:	f000 fcf9 	bl	800d640 <_localeconv_r>
 800cc4e:	f8d0 a000 	ldr.w	sl, [r0]
 800cc52:	4650      	mov	r0, sl
 800cc54:	f7f3 fb0c 	bl	8000270 <strlen>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	9305      	str	r3, [sp, #20]
 800cc60:	f8d8 3000 	ldr.w	r3, [r8]
 800cc64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc68:	3307      	adds	r3, #7
 800cc6a:	f023 0307 	bic.w	r3, r3, #7
 800cc6e:	f103 0208 	add.w	r2, r3, #8
 800cc72:	f8c8 2000 	str.w	r2, [r8]
 800cc76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc7e:	9307      	str	r3, [sp, #28]
 800cc80:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc84:	ee08 0a10 	vmov	s16, r0
 800cc88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cc8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc90:	4b9e      	ldr	r3, [pc, #632]	; (800cf0c <_printf_float+0x2d8>)
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295
 800cc96:	f7f3 ff49 	bl	8000b2c <__aeabi_dcmpun>
 800cc9a:	bb88      	cbnz	r0, 800cd00 <_printf_float+0xcc>
 800cc9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cca0:	4b9a      	ldr	r3, [pc, #616]	; (800cf0c <_printf_float+0x2d8>)
 800cca2:	f04f 32ff 	mov.w	r2, #4294967295
 800cca6:	f7f3 ff23 	bl	8000af0 <__aeabi_dcmple>
 800ccaa:	bb48      	cbnz	r0, 800cd00 <_printf_float+0xcc>
 800ccac:	2200      	movs	r2, #0
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	f7f3 ff12 	bl	8000adc <__aeabi_dcmplt>
 800ccb8:	b110      	cbz	r0, 800ccc0 <_printf_float+0x8c>
 800ccba:	232d      	movs	r3, #45	; 0x2d
 800ccbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccc0:	4a93      	ldr	r2, [pc, #588]	; (800cf10 <_printf_float+0x2dc>)
 800ccc2:	4b94      	ldr	r3, [pc, #592]	; (800cf14 <_printf_float+0x2e0>)
 800ccc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ccc8:	bf94      	ite	ls
 800ccca:	4690      	movls	r8, r2
 800cccc:	4698      	movhi	r8, r3
 800ccce:	2303      	movs	r3, #3
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	9b05      	ldr	r3, [sp, #20]
 800ccd4:	f023 0304 	bic.w	r3, r3, #4
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	f04f 0900 	mov.w	r9, #0
 800ccde:	9700      	str	r7, [sp, #0]
 800cce0:	4633      	mov	r3, r6
 800cce2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cce4:	4621      	mov	r1, r4
 800cce6:	4628      	mov	r0, r5
 800cce8:	f000 f9da 	bl	800d0a0 <_printf_common>
 800ccec:	3001      	adds	r0, #1
 800ccee:	f040 8090 	bne.w	800ce12 <_printf_float+0x1de>
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf6:	b00d      	add	sp, #52	; 0x34
 800ccf8:	ecbd 8b02 	vpop	{d8}
 800ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd00:	4642      	mov	r2, r8
 800cd02:	464b      	mov	r3, r9
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 ff10 	bl	8000b2c <__aeabi_dcmpun>
 800cd0c:	b140      	cbz	r0, 800cd20 <_printf_float+0xec>
 800cd0e:	464b      	mov	r3, r9
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	bfbc      	itt	lt
 800cd14:	232d      	movlt	r3, #45	; 0x2d
 800cd16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd1a:	4a7f      	ldr	r2, [pc, #508]	; (800cf18 <_printf_float+0x2e4>)
 800cd1c:	4b7f      	ldr	r3, [pc, #508]	; (800cf1c <_printf_float+0x2e8>)
 800cd1e:	e7d1      	b.n	800ccc4 <_printf_float+0x90>
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd26:	9206      	str	r2, [sp, #24]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	d13f      	bne.n	800cdac <_printf_float+0x178>
 800cd2c:	2306      	movs	r3, #6
 800cd2e:	6063      	str	r3, [r4, #4]
 800cd30:	9b05      	ldr	r3, [sp, #20]
 800cd32:	6861      	ldr	r1, [r4, #4]
 800cd34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9303      	str	r3, [sp, #12]
 800cd3c:	ab0a      	add	r3, sp, #40	; 0x28
 800cd3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd42:	ab09      	add	r3, sp, #36	; 0x24
 800cd44:	ec49 8b10 	vmov	d0, r8, r9
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	6022      	str	r2, [r4, #0]
 800cd4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd50:	4628      	mov	r0, r5
 800cd52:	f7ff fecf 	bl	800caf4 <__cvt>
 800cd56:	9b06      	ldr	r3, [sp, #24]
 800cd58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd5a:	2b47      	cmp	r3, #71	; 0x47
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	d108      	bne.n	800cd72 <_printf_float+0x13e>
 800cd60:	1cc8      	adds	r0, r1, #3
 800cd62:	db02      	blt.n	800cd6a <_printf_float+0x136>
 800cd64:	6863      	ldr	r3, [r4, #4]
 800cd66:	4299      	cmp	r1, r3
 800cd68:	dd41      	ble.n	800cdee <_printf_float+0x1ba>
 800cd6a:	f1ab 0302 	sub.w	r3, fp, #2
 800cd6e:	fa5f fb83 	uxtb.w	fp, r3
 800cd72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd76:	d820      	bhi.n	800cdba <_printf_float+0x186>
 800cd78:	3901      	subs	r1, #1
 800cd7a:	465a      	mov	r2, fp
 800cd7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd80:	9109      	str	r1, [sp, #36]	; 0x24
 800cd82:	f7ff ff19 	bl	800cbb8 <__exponent>
 800cd86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd88:	1813      	adds	r3, r2, r0
 800cd8a:	2a01      	cmp	r2, #1
 800cd8c:	4681      	mov	r9, r0
 800cd8e:	6123      	str	r3, [r4, #16]
 800cd90:	dc02      	bgt.n	800cd98 <_printf_float+0x164>
 800cd92:	6822      	ldr	r2, [r4, #0]
 800cd94:	07d2      	lsls	r2, r2, #31
 800cd96:	d501      	bpl.n	800cd9c <_printf_float+0x168>
 800cd98:	3301      	adds	r3, #1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d09c      	beq.n	800ccde <_printf_float+0xaa>
 800cda4:	232d      	movs	r3, #45	; 0x2d
 800cda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdaa:	e798      	b.n	800ccde <_printf_float+0xaa>
 800cdac:	9a06      	ldr	r2, [sp, #24]
 800cdae:	2a47      	cmp	r2, #71	; 0x47
 800cdb0:	d1be      	bne.n	800cd30 <_printf_float+0xfc>
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1bc      	bne.n	800cd30 <_printf_float+0xfc>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e7b9      	b.n	800cd2e <_printf_float+0xfa>
 800cdba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdbe:	d118      	bne.n	800cdf2 <_printf_float+0x1be>
 800cdc0:	2900      	cmp	r1, #0
 800cdc2:	6863      	ldr	r3, [r4, #4]
 800cdc4:	dd0b      	ble.n	800cdde <_printf_float+0x1aa>
 800cdc6:	6121      	str	r1, [r4, #16]
 800cdc8:	b913      	cbnz	r3, 800cdd0 <_printf_float+0x19c>
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	07d0      	lsls	r0, r2, #31
 800cdce:	d502      	bpl.n	800cdd6 <_printf_float+0x1a2>
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	440b      	add	r3, r1
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdd8:	f04f 0900 	mov.w	r9, #0
 800cddc:	e7de      	b.n	800cd9c <_printf_float+0x168>
 800cdde:	b913      	cbnz	r3, 800cde6 <_printf_float+0x1b2>
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	07d2      	lsls	r2, r2, #31
 800cde4:	d501      	bpl.n	800cdea <_printf_float+0x1b6>
 800cde6:	3302      	adds	r3, #2
 800cde8:	e7f4      	b.n	800cdd4 <_printf_float+0x1a0>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7f2      	b.n	800cdd4 <_printf_float+0x1a0>
 800cdee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf4:	4299      	cmp	r1, r3
 800cdf6:	db05      	blt.n	800ce04 <_printf_float+0x1d0>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	6121      	str	r1, [r4, #16]
 800cdfc:	07d8      	lsls	r0, r3, #31
 800cdfe:	d5ea      	bpl.n	800cdd6 <_printf_float+0x1a2>
 800ce00:	1c4b      	adds	r3, r1, #1
 800ce02:	e7e7      	b.n	800cdd4 <_printf_float+0x1a0>
 800ce04:	2900      	cmp	r1, #0
 800ce06:	bfd4      	ite	le
 800ce08:	f1c1 0202 	rsble	r2, r1, #2
 800ce0c:	2201      	movgt	r2, #1
 800ce0e:	4413      	add	r3, r2
 800ce10:	e7e0      	b.n	800cdd4 <_printf_float+0x1a0>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	055a      	lsls	r2, r3, #21
 800ce16:	d407      	bmi.n	800ce28 <_printf_float+0x1f4>
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	4642      	mov	r2, r8
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	d12c      	bne.n	800ce80 <_printf_float+0x24c>
 800ce26:	e764      	b.n	800ccf2 <_printf_float+0xbe>
 800ce28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce2c:	f240 80e0 	bls.w	800cff0 <_printf_float+0x3bc>
 800ce30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce34:	2200      	movs	r2, #0
 800ce36:	2300      	movs	r3, #0
 800ce38:	f7f3 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d034      	beq.n	800ceaa <_printf_float+0x276>
 800ce40:	4a37      	ldr	r2, [pc, #220]	; (800cf20 <_printf_float+0x2ec>)
 800ce42:	2301      	movs	r3, #1
 800ce44:	4631      	mov	r1, r6
 800ce46:	4628      	mov	r0, r5
 800ce48:	47b8      	blx	r7
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	f43f af51 	beq.w	800ccf2 <_printf_float+0xbe>
 800ce50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce54:	429a      	cmp	r2, r3
 800ce56:	db02      	blt.n	800ce5e <_printf_float+0x22a>
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	07d8      	lsls	r0, r3, #31
 800ce5c:	d510      	bpl.n	800ce80 <_printf_float+0x24c>
 800ce5e:	ee18 3a10 	vmov	r3, s16
 800ce62:	4652      	mov	r2, sl
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f43f af41 	beq.w	800ccf2 <_printf_float+0xbe>
 800ce70:	f04f 0800 	mov.w	r8, #0
 800ce74:	f104 091a 	add.w	r9, r4, #26
 800ce78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	4543      	cmp	r3, r8
 800ce7e:	dc09      	bgt.n	800ce94 <_printf_float+0x260>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	079b      	lsls	r3, r3, #30
 800ce84:	f100 8107 	bmi.w	800d096 <_printf_float+0x462>
 800ce88:	68e0      	ldr	r0, [r4, #12]
 800ce8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce8c:	4298      	cmp	r0, r3
 800ce8e:	bfb8      	it	lt
 800ce90:	4618      	movlt	r0, r3
 800ce92:	e730      	b.n	800ccf6 <_printf_float+0xc2>
 800ce94:	2301      	movs	r3, #1
 800ce96:	464a      	mov	r2, r9
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	47b8      	blx	r7
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f43f af27 	beq.w	800ccf2 <_printf_float+0xbe>
 800cea4:	f108 0801 	add.w	r8, r8, #1
 800cea8:	e7e6      	b.n	800ce78 <_printf_float+0x244>
 800ceaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dc39      	bgt.n	800cf24 <_printf_float+0x2f0>
 800ceb0:	4a1b      	ldr	r2, [pc, #108]	; (800cf20 <_printf_float+0x2ec>)
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b8      	blx	r7
 800ceba:	3001      	adds	r0, #1
 800cebc:	f43f af19 	beq.w	800ccf2 <_printf_float+0xbe>
 800cec0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cec4:	4313      	orrs	r3, r2
 800cec6:	d102      	bne.n	800cece <_printf_float+0x29a>
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	07d9      	lsls	r1, r3, #31
 800cecc:	d5d8      	bpl.n	800ce80 <_printf_float+0x24c>
 800cece:	ee18 3a10 	vmov	r3, s16
 800ced2:	4652      	mov	r2, sl
 800ced4:	4631      	mov	r1, r6
 800ced6:	4628      	mov	r0, r5
 800ced8:	47b8      	blx	r7
 800ceda:	3001      	adds	r0, #1
 800cedc:	f43f af09 	beq.w	800ccf2 <_printf_float+0xbe>
 800cee0:	f04f 0900 	mov.w	r9, #0
 800cee4:	f104 0a1a 	add.w	sl, r4, #26
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	425b      	negs	r3, r3
 800ceec:	454b      	cmp	r3, r9
 800ceee:	dc01      	bgt.n	800cef4 <_printf_float+0x2c0>
 800cef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef2:	e792      	b.n	800ce1a <_printf_float+0x1e6>
 800cef4:	2301      	movs	r3, #1
 800cef6:	4652      	mov	r2, sl
 800cef8:	4631      	mov	r1, r6
 800cefa:	4628      	mov	r0, r5
 800cefc:	47b8      	blx	r7
 800cefe:	3001      	adds	r0, #1
 800cf00:	f43f aef7 	beq.w	800ccf2 <_printf_float+0xbe>
 800cf04:	f109 0901 	add.w	r9, r9, #1
 800cf08:	e7ee      	b.n	800cee8 <_printf_float+0x2b4>
 800cf0a:	bf00      	nop
 800cf0c:	7fefffff 	.word	0x7fefffff
 800cf10:	0800fe1c 	.word	0x0800fe1c
 800cf14:	0800fe20 	.word	0x0800fe20
 800cf18:	0800fe24 	.word	0x0800fe24
 800cf1c:	0800fe28 	.word	0x0800fe28
 800cf20:	0800fe2c 	.word	0x0800fe2c
 800cf24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	bfa8      	it	ge
 800cf2c:	461a      	movge	r2, r3
 800cf2e:	2a00      	cmp	r2, #0
 800cf30:	4691      	mov	r9, r2
 800cf32:	dc37      	bgt.n	800cfa4 <_printf_float+0x370>
 800cf34:	f04f 0b00 	mov.w	fp, #0
 800cf38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf3c:	f104 021a 	add.w	r2, r4, #26
 800cf40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	eba3 0309 	sub.w	r3, r3, r9
 800cf48:	455b      	cmp	r3, fp
 800cf4a:	dc33      	bgt.n	800cfb4 <_printf_float+0x380>
 800cf4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf50:	429a      	cmp	r2, r3
 800cf52:	db3b      	blt.n	800cfcc <_printf_float+0x398>
 800cf54:	6823      	ldr	r3, [r4, #0]
 800cf56:	07da      	lsls	r2, r3, #31
 800cf58:	d438      	bmi.n	800cfcc <_printf_float+0x398>
 800cf5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cf5e:	eba2 0903 	sub.w	r9, r2, r3
 800cf62:	9b05      	ldr	r3, [sp, #20]
 800cf64:	1ad2      	subs	r2, r2, r3
 800cf66:	4591      	cmp	r9, r2
 800cf68:	bfa8      	it	ge
 800cf6a:	4691      	movge	r9, r2
 800cf6c:	f1b9 0f00 	cmp.w	r9, #0
 800cf70:	dc35      	bgt.n	800cfde <_printf_float+0x3aa>
 800cf72:	f04f 0800 	mov.w	r8, #0
 800cf76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf7a:	f104 0a1a 	add.w	sl, r4, #26
 800cf7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf82:	1a9b      	subs	r3, r3, r2
 800cf84:	eba3 0309 	sub.w	r3, r3, r9
 800cf88:	4543      	cmp	r3, r8
 800cf8a:	f77f af79 	ble.w	800ce80 <_printf_float+0x24c>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	4652      	mov	r2, sl
 800cf92:	4631      	mov	r1, r6
 800cf94:	4628      	mov	r0, r5
 800cf96:	47b8      	blx	r7
 800cf98:	3001      	adds	r0, #1
 800cf9a:	f43f aeaa 	beq.w	800ccf2 <_printf_float+0xbe>
 800cf9e:	f108 0801 	add.w	r8, r8, #1
 800cfa2:	e7ec      	b.n	800cf7e <_printf_float+0x34a>
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	4628      	mov	r0, r5
 800cfac:	47b8      	blx	r7
 800cfae:	3001      	adds	r0, #1
 800cfb0:	d1c0      	bne.n	800cf34 <_printf_float+0x300>
 800cfb2:	e69e      	b.n	800ccf2 <_printf_float+0xbe>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	9205      	str	r2, [sp, #20]
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f43f ae97 	beq.w	800ccf2 <_printf_float+0xbe>
 800cfc4:	9a05      	ldr	r2, [sp, #20]
 800cfc6:	f10b 0b01 	add.w	fp, fp, #1
 800cfca:	e7b9      	b.n	800cf40 <_printf_float+0x30c>
 800cfcc:	ee18 3a10 	vmov	r3, s16
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d1be      	bne.n	800cf5a <_printf_float+0x326>
 800cfdc:	e689      	b.n	800ccf2 <_printf_float+0xbe>
 800cfde:	9a05      	ldr	r2, [sp, #20]
 800cfe0:	464b      	mov	r3, r9
 800cfe2:	4442      	add	r2, r8
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	d1c1      	bne.n	800cf72 <_printf_float+0x33e>
 800cfee:	e680      	b.n	800ccf2 <_printf_float+0xbe>
 800cff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cff2:	2a01      	cmp	r2, #1
 800cff4:	dc01      	bgt.n	800cffa <_printf_float+0x3c6>
 800cff6:	07db      	lsls	r3, r3, #31
 800cff8:	d53a      	bpl.n	800d070 <_printf_float+0x43c>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4642      	mov	r2, r8
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	f43f ae74 	beq.w	800ccf2 <_printf_float+0xbe>
 800d00a:	ee18 3a10 	vmov	r3, s16
 800d00e:	4652      	mov	r2, sl
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	47b8      	blx	r7
 800d016:	3001      	adds	r0, #1
 800d018:	f43f ae6b 	beq.w	800ccf2 <_printf_float+0xbe>
 800d01c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d020:	2200      	movs	r2, #0
 800d022:	2300      	movs	r3, #0
 800d024:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d028:	f7f3 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d02c:	b9d8      	cbnz	r0, 800d066 <_printf_float+0x432>
 800d02e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d032:	f108 0201 	add.w	r2, r8, #1
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	d10e      	bne.n	800d05e <_printf_float+0x42a>
 800d040:	e657      	b.n	800ccf2 <_printf_float+0xbe>
 800d042:	2301      	movs	r3, #1
 800d044:	4652      	mov	r2, sl
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	f43f ae50 	beq.w	800ccf2 <_printf_float+0xbe>
 800d052:	f108 0801 	add.w	r8, r8, #1
 800d056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d058:	3b01      	subs	r3, #1
 800d05a:	4543      	cmp	r3, r8
 800d05c:	dcf1      	bgt.n	800d042 <_printf_float+0x40e>
 800d05e:	464b      	mov	r3, r9
 800d060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d064:	e6da      	b.n	800ce1c <_printf_float+0x1e8>
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	f104 0a1a 	add.w	sl, r4, #26
 800d06e:	e7f2      	b.n	800d056 <_printf_float+0x422>
 800d070:	2301      	movs	r3, #1
 800d072:	4642      	mov	r2, r8
 800d074:	e7df      	b.n	800d036 <_printf_float+0x402>
 800d076:	2301      	movs	r3, #1
 800d078:	464a      	mov	r2, r9
 800d07a:	4631      	mov	r1, r6
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b8      	blx	r7
 800d080:	3001      	adds	r0, #1
 800d082:	f43f ae36 	beq.w	800ccf2 <_printf_float+0xbe>
 800d086:	f108 0801 	add.w	r8, r8, #1
 800d08a:	68e3      	ldr	r3, [r4, #12]
 800d08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d08e:	1a5b      	subs	r3, r3, r1
 800d090:	4543      	cmp	r3, r8
 800d092:	dcf0      	bgt.n	800d076 <_printf_float+0x442>
 800d094:	e6f8      	b.n	800ce88 <_printf_float+0x254>
 800d096:	f04f 0800 	mov.w	r8, #0
 800d09a:	f104 0919 	add.w	r9, r4, #25
 800d09e:	e7f4      	b.n	800d08a <_printf_float+0x456>

0800d0a0 <_printf_common>:
 800d0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	4616      	mov	r6, r2
 800d0a6:	4699      	mov	r9, r3
 800d0a8:	688a      	ldr	r2, [r1, #8]
 800d0aa:	690b      	ldr	r3, [r1, #16]
 800d0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	bfb8      	it	lt
 800d0b4:	4613      	movlt	r3, r2
 800d0b6:	6033      	str	r3, [r6, #0]
 800d0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0bc:	4607      	mov	r7, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	b10a      	cbz	r2, 800d0c6 <_printf_common+0x26>
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	6033      	str	r3, [r6, #0]
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	0699      	lsls	r1, r3, #26
 800d0ca:	bf42      	ittt	mi
 800d0cc:	6833      	ldrmi	r3, [r6, #0]
 800d0ce:	3302      	addmi	r3, #2
 800d0d0:	6033      	strmi	r3, [r6, #0]
 800d0d2:	6825      	ldr	r5, [r4, #0]
 800d0d4:	f015 0506 	ands.w	r5, r5, #6
 800d0d8:	d106      	bne.n	800d0e8 <_printf_common+0x48>
 800d0da:	f104 0a19 	add.w	sl, r4, #25
 800d0de:	68e3      	ldr	r3, [r4, #12]
 800d0e0:	6832      	ldr	r2, [r6, #0]
 800d0e2:	1a9b      	subs	r3, r3, r2
 800d0e4:	42ab      	cmp	r3, r5
 800d0e6:	dc26      	bgt.n	800d136 <_printf_common+0x96>
 800d0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0ec:	1e13      	subs	r3, r2, #0
 800d0ee:	6822      	ldr	r2, [r4, #0]
 800d0f0:	bf18      	it	ne
 800d0f2:	2301      	movne	r3, #1
 800d0f4:	0692      	lsls	r2, r2, #26
 800d0f6:	d42b      	bmi.n	800d150 <_printf_common+0xb0>
 800d0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	4638      	mov	r0, r7
 800d100:	47c0      	blx	r8
 800d102:	3001      	adds	r0, #1
 800d104:	d01e      	beq.n	800d144 <_printf_common+0xa4>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	6922      	ldr	r2, [r4, #16]
 800d10a:	f003 0306 	and.w	r3, r3, #6
 800d10e:	2b04      	cmp	r3, #4
 800d110:	bf02      	ittt	eq
 800d112:	68e5      	ldreq	r5, [r4, #12]
 800d114:	6833      	ldreq	r3, [r6, #0]
 800d116:	1aed      	subeq	r5, r5, r3
 800d118:	68a3      	ldr	r3, [r4, #8]
 800d11a:	bf0c      	ite	eq
 800d11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d120:	2500      	movne	r5, #0
 800d122:	4293      	cmp	r3, r2
 800d124:	bfc4      	itt	gt
 800d126:	1a9b      	subgt	r3, r3, r2
 800d128:	18ed      	addgt	r5, r5, r3
 800d12a:	2600      	movs	r6, #0
 800d12c:	341a      	adds	r4, #26
 800d12e:	42b5      	cmp	r5, r6
 800d130:	d11a      	bne.n	800d168 <_printf_common+0xc8>
 800d132:	2000      	movs	r0, #0
 800d134:	e008      	b.n	800d148 <_printf_common+0xa8>
 800d136:	2301      	movs	r3, #1
 800d138:	4652      	mov	r2, sl
 800d13a:	4649      	mov	r1, r9
 800d13c:	4638      	mov	r0, r7
 800d13e:	47c0      	blx	r8
 800d140:	3001      	adds	r0, #1
 800d142:	d103      	bne.n	800d14c <_printf_common+0xac>
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14c:	3501      	adds	r5, #1
 800d14e:	e7c6      	b.n	800d0de <_printf_common+0x3e>
 800d150:	18e1      	adds	r1, r4, r3
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	2030      	movs	r0, #48	; 0x30
 800d156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d15a:	4422      	add	r2, r4
 800d15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d164:	3302      	adds	r3, #2
 800d166:	e7c7      	b.n	800d0f8 <_printf_common+0x58>
 800d168:	2301      	movs	r3, #1
 800d16a:	4622      	mov	r2, r4
 800d16c:	4649      	mov	r1, r9
 800d16e:	4638      	mov	r0, r7
 800d170:	47c0      	blx	r8
 800d172:	3001      	adds	r0, #1
 800d174:	d0e6      	beq.n	800d144 <_printf_common+0xa4>
 800d176:	3601      	adds	r6, #1
 800d178:	e7d9      	b.n	800d12e <_printf_common+0x8e>
	...

0800d17c <_printf_i>:
 800d17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	7e0f      	ldrb	r7, [r1, #24]
 800d182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d184:	2f78      	cmp	r7, #120	; 0x78
 800d186:	4691      	mov	r9, r2
 800d188:	4680      	mov	r8, r0
 800d18a:	460c      	mov	r4, r1
 800d18c:	469a      	mov	sl, r3
 800d18e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d192:	d807      	bhi.n	800d1a4 <_printf_i+0x28>
 800d194:	2f62      	cmp	r7, #98	; 0x62
 800d196:	d80a      	bhi.n	800d1ae <_printf_i+0x32>
 800d198:	2f00      	cmp	r7, #0
 800d19a:	f000 80d4 	beq.w	800d346 <_printf_i+0x1ca>
 800d19e:	2f58      	cmp	r7, #88	; 0x58
 800d1a0:	f000 80c0 	beq.w	800d324 <_printf_i+0x1a8>
 800d1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1ac:	e03a      	b.n	800d224 <_printf_i+0xa8>
 800d1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1b2:	2b15      	cmp	r3, #21
 800d1b4:	d8f6      	bhi.n	800d1a4 <_printf_i+0x28>
 800d1b6:	a101      	add	r1, pc, #4	; (adr r1, 800d1bc <_printf_i+0x40>)
 800d1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1bc:	0800d215 	.word	0x0800d215
 800d1c0:	0800d229 	.word	0x0800d229
 800d1c4:	0800d1a5 	.word	0x0800d1a5
 800d1c8:	0800d1a5 	.word	0x0800d1a5
 800d1cc:	0800d1a5 	.word	0x0800d1a5
 800d1d0:	0800d1a5 	.word	0x0800d1a5
 800d1d4:	0800d229 	.word	0x0800d229
 800d1d8:	0800d1a5 	.word	0x0800d1a5
 800d1dc:	0800d1a5 	.word	0x0800d1a5
 800d1e0:	0800d1a5 	.word	0x0800d1a5
 800d1e4:	0800d1a5 	.word	0x0800d1a5
 800d1e8:	0800d32d 	.word	0x0800d32d
 800d1ec:	0800d255 	.word	0x0800d255
 800d1f0:	0800d2e7 	.word	0x0800d2e7
 800d1f4:	0800d1a5 	.word	0x0800d1a5
 800d1f8:	0800d1a5 	.word	0x0800d1a5
 800d1fc:	0800d34f 	.word	0x0800d34f
 800d200:	0800d1a5 	.word	0x0800d1a5
 800d204:	0800d255 	.word	0x0800d255
 800d208:	0800d1a5 	.word	0x0800d1a5
 800d20c:	0800d1a5 	.word	0x0800d1a5
 800d210:	0800d2ef 	.word	0x0800d2ef
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	1d1a      	adds	r2, r3, #4
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	602a      	str	r2, [r5, #0]
 800d21c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d224:	2301      	movs	r3, #1
 800d226:	e09f      	b.n	800d368 <_printf_i+0x1ec>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	682b      	ldr	r3, [r5, #0]
 800d22c:	0607      	lsls	r7, r0, #24
 800d22e:	f103 0104 	add.w	r1, r3, #4
 800d232:	6029      	str	r1, [r5, #0]
 800d234:	d501      	bpl.n	800d23a <_printf_i+0xbe>
 800d236:	681e      	ldr	r6, [r3, #0]
 800d238:	e003      	b.n	800d242 <_printf_i+0xc6>
 800d23a:	0646      	lsls	r6, r0, #25
 800d23c:	d5fb      	bpl.n	800d236 <_printf_i+0xba>
 800d23e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d242:	2e00      	cmp	r6, #0
 800d244:	da03      	bge.n	800d24e <_printf_i+0xd2>
 800d246:	232d      	movs	r3, #45	; 0x2d
 800d248:	4276      	negs	r6, r6
 800d24a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d24e:	485a      	ldr	r0, [pc, #360]	; (800d3b8 <_printf_i+0x23c>)
 800d250:	230a      	movs	r3, #10
 800d252:	e012      	b.n	800d27a <_printf_i+0xfe>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	6820      	ldr	r0, [r4, #0]
 800d258:	1d19      	adds	r1, r3, #4
 800d25a:	6029      	str	r1, [r5, #0]
 800d25c:	0605      	lsls	r5, r0, #24
 800d25e:	d501      	bpl.n	800d264 <_printf_i+0xe8>
 800d260:	681e      	ldr	r6, [r3, #0]
 800d262:	e002      	b.n	800d26a <_printf_i+0xee>
 800d264:	0641      	lsls	r1, r0, #25
 800d266:	d5fb      	bpl.n	800d260 <_printf_i+0xe4>
 800d268:	881e      	ldrh	r6, [r3, #0]
 800d26a:	4853      	ldr	r0, [pc, #332]	; (800d3b8 <_printf_i+0x23c>)
 800d26c:	2f6f      	cmp	r7, #111	; 0x6f
 800d26e:	bf0c      	ite	eq
 800d270:	2308      	moveq	r3, #8
 800d272:	230a      	movne	r3, #10
 800d274:	2100      	movs	r1, #0
 800d276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d27a:	6865      	ldr	r5, [r4, #4]
 800d27c:	60a5      	str	r5, [r4, #8]
 800d27e:	2d00      	cmp	r5, #0
 800d280:	bfa2      	ittt	ge
 800d282:	6821      	ldrge	r1, [r4, #0]
 800d284:	f021 0104 	bicge.w	r1, r1, #4
 800d288:	6021      	strge	r1, [r4, #0]
 800d28a:	b90e      	cbnz	r6, 800d290 <_printf_i+0x114>
 800d28c:	2d00      	cmp	r5, #0
 800d28e:	d04b      	beq.n	800d328 <_printf_i+0x1ac>
 800d290:	4615      	mov	r5, r2
 800d292:	fbb6 f1f3 	udiv	r1, r6, r3
 800d296:	fb03 6711 	mls	r7, r3, r1, r6
 800d29a:	5dc7      	ldrb	r7, [r0, r7]
 800d29c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2a0:	4637      	mov	r7, r6
 800d2a2:	42bb      	cmp	r3, r7
 800d2a4:	460e      	mov	r6, r1
 800d2a6:	d9f4      	bls.n	800d292 <_printf_i+0x116>
 800d2a8:	2b08      	cmp	r3, #8
 800d2aa:	d10b      	bne.n	800d2c4 <_printf_i+0x148>
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	07de      	lsls	r6, r3, #31
 800d2b0:	d508      	bpl.n	800d2c4 <_printf_i+0x148>
 800d2b2:	6923      	ldr	r3, [r4, #16]
 800d2b4:	6861      	ldr	r1, [r4, #4]
 800d2b6:	4299      	cmp	r1, r3
 800d2b8:	bfde      	ittt	le
 800d2ba:	2330      	movle	r3, #48	; 0x30
 800d2bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2c4:	1b52      	subs	r2, r2, r5
 800d2c6:	6122      	str	r2, [r4, #16]
 800d2c8:	f8cd a000 	str.w	sl, [sp]
 800d2cc:	464b      	mov	r3, r9
 800d2ce:	aa03      	add	r2, sp, #12
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	f7ff fee4 	bl	800d0a0 <_printf_common>
 800d2d8:	3001      	adds	r0, #1
 800d2da:	d14a      	bne.n	800d372 <_printf_i+0x1f6>
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	b004      	add	sp, #16
 800d2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	f043 0320 	orr.w	r3, r3, #32
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	4833      	ldr	r0, [pc, #204]	; (800d3bc <_printf_i+0x240>)
 800d2f0:	2778      	movs	r7, #120	; 0x78
 800d2f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	6829      	ldr	r1, [r5, #0]
 800d2fa:	061f      	lsls	r7, r3, #24
 800d2fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d300:	d402      	bmi.n	800d308 <_printf_i+0x18c>
 800d302:	065f      	lsls	r7, r3, #25
 800d304:	bf48      	it	mi
 800d306:	b2b6      	uxthmi	r6, r6
 800d308:	07df      	lsls	r7, r3, #31
 800d30a:	bf48      	it	mi
 800d30c:	f043 0320 	orrmi.w	r3, r3, #32
 800d310:	6029      	str	r1, [r5, #0]
 800d312:	bf48      	it	mi
 800d314:	6023      	strmi	r3, [r4, #0]
 800d316:	b91e      	cbnz	r6, 800d320 <_printf_i+0x1a4>
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	f023 0320 	bic.w	r3, r3, #32
 800d31e:	6023      	str	r3, [r4, #0]
 800d320:	2310      	movs	r3, #16
 800d322:	e7a7      	b.n	800d274 <_printf_i+0xf8>
 800d324:	4824      	ldr	r0, [pc, #144]	; (800d3b8 <_printf_i+0x23c>)
 800d326:	e7e4      	b.n	800d2f2 <_printf_i+0x176>
 800d328:	4615      	mov	r5, r2
 800d32a:	e7bd      	b.n	800d2a8 <_printf_i+0x12c>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	6826      	ldr	r6, [r4, #0]
 800d330:	6961      	ldr	r1, [r4, #20]
 800d332:	1d18      	adds	r0, r3, #4
 800d334:	6028      	str	r0, [r5, #0]
 800d336:	0635      	lsls	r5, r6, #24
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	d501      	bpl.n	800d340 <_printf_i+0x1c4>
 800d33c:	6019      	str	r1, [r3, #0]
 800d33e:	e002      	b.n	800d346 <_printf_i+0x1ca>
 800d340:	0670      	lsls	r0, r6, #25
 800d342:	d5fb      	bpl.n	800d33c <_printf_i+0x1c0>
 800d344:	8019      	strh	r1, [r3, #0]
 800d346:	2300      	movs	r3, #0
 800d348:	6123      	str	r3, [r4, #16]
 800d34a:	4615      	mov	r5, r2
 800d34c:	e7bc      	b.n	800d2c8 <_printf_i+0x14c>
 800d34e:	682b      	ldr	r3, [r5, #0]
 800d350:	1d1a      	adds	r2, r3, #4
 800d352:	602a      	str	r2, [r5, #0]
 800d354:	681d      	ldr	r5, [r3, #0]
 800d356:	6862      	ldr	r2, [r4, #4]
 800d358:	2100      	movs	r1, #0
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7f2 ff38 	bl	80001d0 <memchr>
 800d360:	b108      	cbz	r0, 800d366 <_printf_i+0x1ea>
 800d362:	1b40      	subs	r0, r0, r5
 800d364:	6060      	str	r0, [r4, #4]
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	2300      	movs	r3, #0
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d370:	e7aa      	b.n	800d2c8 <_printf_i+0x14c>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	462a      	mov	r2, r5
 800d376:	4649      	mov	r1, r9
 800d378:	4640      	mov	r0, r8
 800d37a:	47d0      	blx	sl
 800d37c:	3001      	adds	r0, #1
 800d37e:	d0ad      	beq.n	800d2dc <_printf_i+0x160>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	079b      	lsls	r3, r3, #30
 800d384:	d413      	bmi.n	800d3ae <_printf_i+0x232>
 800d386:	68e0      	ldr	r0, [r4, #12]
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	4298      	cmp	r0, r3
 800d38c:	bfb8      	it	lt
 800d38e:	4618      	movlt	r0, r3
 800d390:	e7a6      	b.n	800d2e0 <_printf_i+0x164>
 800d392:	2301      	movs	r3, #1
 800d394:	4632      	mov	r2, r6
 800d396:	4649      	mov	r1, r9
 800d398:	4640      	mov	r0, r8
 800d39a:	47d0      	blx	sl
 800d39c:	3001      	adds	r0, #1
 800d39e:	d09d      	beq.n	800d2dc <_printf_i+0x160>
 800d3a0:	3501      	adds	r5, #1
 800d3a2:	68e3      	ldr	r3, [r4, #12]
 800d3a4:	9903      	ldr	r1, [sp, #12]
 800d3a6:	1a5b      	subs	r3, r3, r1
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	dcf2      	bgt.n	800d392 <_printf_i+0x216>
 800d3ac:	e7eb      	b.n	800d386 <_printf_i+0x20a>
 800d3ae:	2500      	movs	r5, #0
 800d3b0:	f104 0619 	add.w	r6, r4, #25
 800d3b4:	e7f5      	b.n	800d3a2 <_printf_i+0x226>
 800d3b6:	bf00      	nop
 800d3b8:	0800fe2e 	.word	0x0800fe2e
 800d3bc:	0800fe3f 	.word	0x0800fe3f

0800d3c0 <std>:
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3ce:	6083      	str	r3, [r0, #8]
 800d3d0:	8181      	strh	r1, [r0, #12]
 800d3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800d3d4:	81c2      	strh	r2, [r0, #14]
 800d3d6:	6183      	str	r3, [r0, #24]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	2208      	movs	r2, #8
 800d3dc:	305c      	adds	r0, #92	; 0x5c
 800d3de:	f000 f926 	bl	800d62e <memset>
 800d3e2:	4b0d      	ldr	r3, [pc, #52]	; (800d418 <std+0x58>)
 800d3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	; (800d41c <std+0x5c>)
 800d3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	; (800d420 <std+0x60>)
 800d3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <std+0x64>)
 800d3f0:	6323      	str	r3, [r4, #48]	; 0x30
 800d3f2:	4b0d      	ldr	r3, [pc, #52]	; (800d428 <std+0x68>)
 800d3f4:	6224      	str	r4, [r4, #32]
 800d3f6:	429c      	cmp	r4, r3
 800d3f8:	d006      	beq.n	800d408 <std+0x48>
 800d3fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d3fe:	4294      	cmp	r4, r2
 800d400:	d002      	beq.n	800d408 <std+0x48>
 800d402:	33d0      	adds	r3, #208	; 0xd0
 800d404:	429c      	cmp	r4, r3
 800d406:	d105      	bne.n	800d414 <std+0x54>
 800d408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d410:	f000 b98a 	b.w	800d728 <__retarget_lock_init_recursive>
 800d414:	bd10      	pop	{r4, pc}
 800d416:	bf00      	nop
 800d418:	0800d5a9 	.word	0x0800d5a9
 800d41c:	0800d5cb 	.word	0x0800d5cb
 800d420:	0800d603 	.word	0x0800d603
 800d424:	0800d627 	.word	0x0800d627
 800d428:	2000f024 	.word	0x2000f024

0800d42c <stdio_exit_handler>:
 800d42c:	4a02      	ldr	r2, [pc, #8]	; (800d438 <stdio_exit_handler+0xc>)
 800d42e:	4903      	ldr	r1, [pc, #12]	; (800d43c <stdio_exit_handler+0x10>)
 800d430:	4803      	ldr	r0, [pc, #12]	; (800d440 <stdio_exit_handler+0x14>)
 800d432:	f000 b869 	b.w	800d508 <_fwalk_sglue>
 800d436:	bf00      	nop
 800d438:	20001288 	.word	0x20001288
 800d43c:	0800f361 	.word	0x0800f361
 800d440:	20001294 	.word	0x20001294

0800d444 <cleanup_stdio>:
 800d444:	6841      	ldr	r1, [r0, #4]
 800d446:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <cleanup_stdio+0x34>)
 800d448:	4299      	cmp	r1, r3
 800d44a:	b510      	push	{r4, lr}
 800d44c:	4604      	mov	r4, r0
 800d44e:	d001      	beq.n	800d454 <cleanup_stdio+0x10>
 800d450:	f001 ff86 	bl	800f360 <_fflush_r>
 800d454:	68a1      	ldr	r1, [r4, #8]
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <cleanup_stdio+0x38>)
 800d458:	4299      	cmp	r1, r3
 800d45a:	d002      	beq.n	800d462 <cleanup_stdio+0x1e>
 800d45c:	4620      	mov	r0, r4
 800d45e:	f001 ff7f 	bl	800f360 <_fflush_r>
 800d462:	68e1      	ldr	r1, [r4, #12]
 800d464:	4b06      	ldr	r3, [pc, #24]	; (800d480 <cleanup_stdio+0x3c>)
 800d466:	4299      	cmp	r1, r3
 800d468:	d004      	beq.n	800d474 <cleanup_stdio+0x30>
 800d46a:	4620      	mov	r0, r4
 800d46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d470:	f001 bf76 	b.w	800f360 <_fflush_r>
 800d474:	bd10      	pop	{r4, pc}
 800d476:	bf00      	nop
 800d478:	2000f024 	.word	0x2000f024
 800d47c:	2000f08c 	.word	0x2000f08c
 800d480:	2000f0f4 	.word	0x2000f0f4

0800d484 <global_stdio_init.part.0>:
 800d484:	b510      	push	{r4, lr}
 800d486:	4b0b      	ldr	r3, [pc, #44]	; (800d4b4 <global_stdio_init.part.0+0x30>)
 800d488:	4c0b      	ldr	r4, [pc, #44]	; (800d4b8 <global_stdio_init.part.0+0x34>)
 800d48a:	4a0c      	ldr	r2, [pc, #48]	; (800d4bc <global_stdio_init.part.0+0x38>)
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	4620      	mov	r0, r4
 800d490:	2200      	movs	r2, #0
 800d492:	2104      	movs	r1, #4
 800d494:	f7ff ff94 	bl	800d3c0 <std>
 800d498:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d49c:	2201      	movs	r2, #1
 800d49e:	2109      	movs	r1, #9
 800d4a0:	f7ff ff8e 	bl	800d3c0 <std>
 800d4a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ae:	2112      	movs	r1, #18
 800d4b0:	f7ff bf86 	b.w	800d3c0 <std>
 800d4b4:	2000f15c 	.word	0x2000f15c
 800d4b8:	2000f024 	.word	0x2000f024
 800d4bc:	0800d42d 	.word	0x0800d42d

0800d4c0 <__sfp_lock_acquire>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	; (800d4c8 <__sfp_lock_acquire+0x8>)
 800d4c2:	f000 b932 	b.w	800d72a <__retarget_lock_acquire_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	2000f165 	.word	0x2000f165

0800d4cc <__sfp_lock_release>:
 800d4cc:	4801      	ldr	r0, [pc, #4]	; (800d4d4 <__sfp_lock_release+0x8>)
 800d4ce:	f000 b92d 	b.w	800d72c <__retarget_lock_release_recursive>
 800d4d2:	bf00      	nop
 800d4d4:	2000f165 	.word	0x2000f165

0800d4d8 <__sinit>:
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	4604      	mov	r4, r0
 800d4dc:	f7ff fff0 	bl	800d4c0 <__sfp_lock_acquire>
 800d4e0:	6a23      	ldr	r3, [r4, #32]
 800d4e2:	b11b      	cbz	r3, 800d4ec <__sinit+0x14>
 800d4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e8:	f7ff bff0 	b.w	800d4cc <__sfp_lock_release>
 800d4ec:	4b04      	ldr	r3, [pc, #16]	; (800d500 <__sinit+0x28>)
 800d4ee:	6223      	str	r3, [r4, #32]
 800d4f0:	4b04      	ldr	r3, [pc, #16]	; (800d504 <__sinit+0x2c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f5      	bne.n	800d4e4 <__sinit+0xc>
 800d4f8:	f7ff ffc4 	bl	800d484 <global_stdio_init.part.0>
 800d4fc:	e7f2      	b.n	800d4e4 <__sinit+0xc>
 800d4fe:	bf00      	nop
 800d500:	0800d445 	.word	0x0800d445
 800d504:	2000f15c 	.word	0x2000f15c

0800d508 <_fwalk_sglue>:
 800d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	4607      	mov	r7, r0
 800d50e:	4688      	mov	r8, r1
 800d510:	4614      	mov	r4, r2
 800d512:	2600      	movs	r6, #0
 800d514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d518:	f1b9 0901 	subs.w	r9, r9, #1
 800d51c:	d505      	bpl.n	800d52a <_fwalk_sglue+0x22>
 800d51e:	6824      	ldr	r4, [r4, #0]
 800d520:	2c00      	cmp	r4, #0
 800d522:	d1f7      	bne.n	800d514 <_fwalk_sglue+0xc>
 800d524:	4630      	mov	r0, r6
 800d526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d907      	bls.n	800d540 <_fwalk_sglue+0x38>
 800d530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d534:	3301      	adds	r3, #1
 800d536:	d003      	beq.n	800d540 <_fwalk_sglue+0x38>
 800d538:	4629      	mov	r1, r5
 800d53a:	4638      	mov	r0, r7
 800d53c:	47c0      	blx	r8
 800d53e:	4306      	orrs	r6, r0
 800d540:	3568      	adds	r5, #104	; 0x68
 800d542:	e7e9      	b.n	800d518 <_fwalk_sglue+0x10>

0800d544 <iprintf>:
 800d544:	b40f      	push	{r0, r1, r2, r3}
 800d546:	b507      	push	{r0, r1, r2, lr}
 800d548:	4906      	ldr	r1, [pc, #24]	; (800d564 <iprintf+0x20>)
 800d54a:	ab04      	add	r3, sp, #16
 800d54c:	6808      	ldr	r0, [r1, #0]
 800d54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d552:	6881      	ldr	r1, [r0, #8]
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	f001 fd63 	bl	800f020 <_vfiprintf_r>
 800d55a:	b003      	add	sp, #12
 800d55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d560:	b004      	add	sp, #16
 800d562:	4770      	bx	lr
 800d564:	200012e0 	.word	0x200012e0

0800d568 <siprintf>:
 800d568:	b40e      	push	{r1, r2, r3}
 800d56a:	b500      	push	{lr}
 800d56c:	b09c      	sub	sp, #112	; 0x70
 800d56e:	ab1d      	add	r3, sp, #116	; 0x74
 800d570:	9002      	str	r0, [sp, #8]
 800d572:	9006      	str	r0, [sp, #24]
 800d574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d578:	4809      	ldr	r0, [pc, #36]	; (800d5a0 <siprintf+0x38>)
 800d57a:	9107      	str	r1, [sp, #28]
 800d57c:	9104      	str	r1, [sp, #16]
 800d57e:	4909      	ldr	r1, [pc, #36]	; (800d5a4 <siprintf+0x3c>)
 800d580:	f853 2b04 	ldr.w	r2, [r3], #4
 800d584:	9105      	str	r1, [sp, #20]
 800d586:	6800      	ldr	r0, [r0, #0]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	a902      	add	r1, sp, #8
 800d58c:	f001 fc20 	bl	800edd0 <_svfiprintf_r>
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	b01c      	add	sp, #112	; 0x70
 800d598:	f85d eb04 	ldr.w	lr, [sp], #4
 800d59c:	b003      	add	sp, #12
 800d59e:	4770      	bx	lr
 800d5a0:	200012e0 	.word	0x200012e0
 800d5a4:	ffff0208 	.word	0xffff0208

0800d5a8 <__sread>:
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b0:	f000 f86c 	bl	800d68c <_read_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	bfab      	itete	ge
 800d5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d5bc:	181b      	addge	r3, r3, r0
 800d5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5c2:	bfac      	ite	ge
 800d5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5c6:	81a3      	strhlt	r3, [r4, #12]
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <__swrite>:
 800d5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ce:	461f      	mov	r7, r3
 800d5d0:	898b      	ldrh	r3, [r1, #12]
 800d5d2:	05db      	lsls	r3, r3, #23
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	4616      	mov	r6, r2
 800d5da:	d505      	bpl.n	800d5e8 <__swrite+0x1e>
 800d5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f000 f840 	bl	800d668 <_lseek_r>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fe:	f000 b857 	b.w	800d6b0 <_write_r>

0800d602 <__sseek>:
 800d602:	b510      	push	{r4, lr}
 800d604:	460c      	mov	r4, r1
 800d606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60a:	f000 f82d 	bl	800d668 <_lseek_r>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	bf15      	itete	ne
 800d614:	6560      	strne	r0, [r4, #84]	; 0x54
 800d616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d61e:	81a3      	strheq	r3, [r4, #12]
 800d620:	bf18      	it	ne
 800d622:	81a3      	strhne	r3, [r4, #12]
 800d624:	bd10      	pop	{r4, pc}

0800d626 <__sclose>:
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 b80d 	b.w	800d648 <_close_r>

0800d62e <memset>:
 800d62e:	4402      	add	r2, r0
 800d630:	4603      	mov	r3, r0
 800d632:	4293      	cmp	r3, r2
 800d634:	d100      	bne.n	800d638 <memset+0xa>
 800d636:	4770      	bx	lr
 800d638:	f803 1b01 	strb.w	r1, [r3], #1
 800d63c:	e7f9      	b.n	800d632 <memset+0x4>
	...

0800d640 <_localeconv_r>:
 800d640:	4800      	ldr	r0, [pc, #0]	; (800d644 <_localeconv_r+0x4>)
 800d642:	4770      	bx	lr
 800d644:	200013d4 	.word	0x200013d4

0800d648 <_close_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d06      	ldr	r5, [pc, #24]	; (800d664 <_close_r+0x1c>)
 800d64c:	2300      	movs	r3, #0
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	602b      	str	r3, [r5, #0]
 800d654:	f7f6 f84f 	bl	80036f6 <_close>
 800d658:	1c43      	adds	r3, r0, #1
 800d65a:	d102      	bne.n	800d662 <_close_r+0x1a>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	b103      	cbz	r3, 800d662 <_close_r+0x1a>
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	bd38      	pop	{r3, r4, r5, pc}
 800d664:	2000f160 	.word	0x2000f160

0800d668 <_lseek_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4d07      	ldr	r5, [pc, #28]	; (800d688 <_lseek_r+0x20>)
 800d66c:	4604      	mov	r4, r0
 800d66e:	4608      	mov	r0, r1
 800d670:	4611      	mov	r1, r2
 800d672:	2200      	movs	r2, #0
 800d674:	602a      	str	r2, [r5, #0]
 800d676:	461a      	mov	r2, r3
 800d678:	f7f6 f864 	bl	8003744 <_lseek>
 800d67c:	1c43      	adds	r3, r0, #1
 800d67e:	d102      	bne.n	800d686 <_lseek_r+0x1e>
 800d680:	682b      	ldr	r3, [r5, #0]
 800d682:	b103      	cbz	r3, 800d686 <_lseek_r+0x1e>
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	bd38      	pop	{r3, r4, r5, pc}
 800d688:	2000f160 	.word	0x2000f160

0800d68c <_read_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4d07      	ldr	r5, [pc, #28]	; (800d6ac <_read_r+0x20>)
 800d690:	4604      	mov	r4, r0
 800d692:	4608      	mov	r0, r1
 800d694:	4611      	mov	r1, r2
 800d696:	2200      	movs	r2, #0
 800d698:	602a      	str	r2, [r5, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	f7f5 fff2 	bl	8003684 <_read>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d102      	bne.n	800d6aa <_read_r+0x1e>
 800d6a4:	682b      	ldr	r3, [r5, #0]
 800d6a6:	b103      	cbz	r3, 800d6aa <_read_r+0x1e>
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	bd38      	pop	{r3, r4, r5, pc}
 800d6ac:	2000f160 	.word	0x2000f160

0800d6b0 <_write_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4d07      	ldr	r5, [pc, #28]	; (800d6d0 <_write_r+0x20>)
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	4608      	mov	r0, r1
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	602a      	str	r2, [r5, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f7f5 fffd 	bl	80036be <_write>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d102      	bne.n	800d6ce <_write_r+0x1e>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	b103      	cbz	r3, 800d6ce <_write_r+0x1e>
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
 800d6d0:	2000f160 	.word	0x2000f160

0800d6d4 <__errno>:
 800d6d4:	4b01      	ldr	r3, [pc, #4]	; (800d6dc <__errno+0x8>)
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	200012e0 	.word	0x200012e0

0800d6e0 <__libc_init_array>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	4d0d      	ldr	r5, [pc, #52]	; (800d718 <__libc_init_array+0x38>)
 800d6e4:	4c0d      	ldr	r4, [pc, #52]	; (800d71c <__libc_init_array+0x3c>)
 800d6e6:	1b64      	subs	r4, r4, r5
 800d6e8:	10a4      	asrs	r4, r4, #2
 800d6ea:	2600      	movs	r6, #0
 800d6ec:	42a6      	cmp	r6, r4
 800d6ee:	d109      	bne.n	800d704 <__libc_init_array+0x24>
 800d6f0:	4d0b      	ldr	r5, [pc, #44]	; (800d720 <__libc_init_array+0x40>)
 800d6f2:	4c0c      	ldr	r4, [pc, #48]	; (800d724 <__libc_init_array+0x44>)
 800d6f4:	f002 f896 	bl	800f824 <_init>
 800d6f8:	1b64      	subs	r4, r4, r5
 800d6fa:	10a4      	asrs	r4, r4, #2
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	42a6      	cmp	r6, r4
 800d700:	d105      	bne.n	800d70e <__libc_init_array+0x2e>
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	f855 3b04 	ldr.w	r3, [r5], #4
 800d708:	4798      	blx	r3
 800d70a:	3601      	adds	r6, #1
 800d70c:	e7ee      	b.n	800d6ec <__libc_init_array+0xc>
 800d70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d712:	4798      	blx	r3
 800d714:	3601      	adds	r6, #1
 800d716:	e7f2      	b.n	800d6fe <__libc_init_array+0x1e>
 800d718:	08010194 	.word	0x08010194
 800d71c:	08010194 	.word	0x08010194
 800d720:	08010194 	.word	0x08010194
 800d724:	08010198 	.word	0x08010198

0800d728 <__retarget_lock_init_recursive>:
 800d728:	4770      	bx	lr

0800d72a <__retarget_lock_acquire_recursive>:
 800d72a:	4770      	bx	lr

0800d72c <__retarget_lock_release_recursive>:
 800d72c:	4770      	bx	lr

0800d72e <quorem>:
 800d72e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d732:	6903      	ldr	r3, [r0, #16]
 800d734:	690c      	ldr	r4, [r1, #16]
 800d736:	42a3      	cmp	r3, r4
 800d738:	4607      	mov	r7, r0
 800d73a:	db7e      	blt.n	800d83a <quorem+0x10c>
 800d73c:	3c01      	subs	r4, #1
 800d73e:	f101 0814 	add.w	r8, r1, #20
 800d742:	f100 0514 	add.w	r5, r0, #20
 800d746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d754:	3301      	adds	r3, #1
 800d756:	429a      	cmp	r2, r3
 800d758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d75c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d760:	fbb2 f6f3 	udiv	r6, r2, r3
 800d764:	d331      	bcc.n	800d7ca <quorem+0x9c>
 800d766:	f04f 0e00 	mov.w	lr, #0
 800d76a:	4640      	mov	r0, r8
 800d76c:	46ac      	mov	ip, r5
 800d76e:	46f2      	mov	sl, lr
 800d770:	f850 2b04 	ldr.w	r2, [r0], #4
 800d774:	b293      	uxth	r3, r2
 800d776:	fb06 e303 	mla	r3, r6, r3, lr
 800d77a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d77e:	0c1a      	lsrs	r2, r3, #16
 800d780:	b29b      	uxth	r3, r3
 800d782:	ebaa 0303 	sub.w	r3, sl, r3
 800d786:	f8dc a000 	ldr.w	sl, [ip]
 800d78a:	fa13 f38a 	uxtah	r3, r3, sl
 800d78e:	fb06 220e 	mla	r2, r6, lr, r2
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	9b00      	ldr	r3, [sp, #0]
 800d796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d79a:	b292      	uxth	r2, r2
 800d79c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7a8:	4581      	cmp	r9, r0
 800d7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7ae:	f84c 3b04 	str.w	r3, [ip], #4
 800d7b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7b6:	d2db      	bcs.n	800d770 <quorem+0x42>
 800d7b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7bc:	b92b      	cbnz	r3, 800d7ca <quorem+0x9c>
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	3b04      	subs	r3, #4
 800d7c2:	429d      	cmp	r5, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	d32c      	bcc.n	800d822 <quorem+0xf4>
 800d7c8:	613c      	str	r4, [r7, #16]
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f001 f9a6 	bl	800eb1c <__mcmp>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	db22      	blt.n	800d81a <quorem+0xec>
 800d7d4:	3601      	adds	r6, #1
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	2000      	movs	r0, #0
 800d7da:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7de:	f8d1 c000 	ldr.w	ip, [r1]
 800d7e2:	b293      	uxth	r3, r2
 800d7e4:	1ac3      	subs	r3, r0, r3
 800d7e6:	0c12      	lsrs	r2, r2, #16
 800d7e8:	fa13 f38c 	uxtah	r3, r3, ip
 800d7ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d7f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7fa:	45c1      	cmp	r9, r8
 800d7fc:	f841 3b04 	str.w	r3, [r1], #4
 800d800:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d804:	d2e9      	bcs.n	800d7da <quorem+0xac>
 800d806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d80a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d80e:	b922      	cbnz	r2, 800d81a <quorem+0xec>
 800d810:	3b04      	subs	r3, #4
 800d812:	429d      	cmp	r5, r3
 800d814:	461a      	mov	r2, r3
 800d816:	d30a      	bcc.n	800d82e <quorem+0x100>
 800d818:	613c      	str	r4, [r7, #16]
 800d81a:	4630      	mov	r0, r6
 800d81c:	b003      	add	sp, #12
 800d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d822:	6812      	ldr	r2, [r2, #0]
 800d824:	3b04      	subs	r3, #4
 800d826:	2a00      	cmp	r2, #0
 800d828:	d1ce      	bne.n	800d7c8 <quorem+0x9a>
 800d82a:	3c01      	subs	r4, #1
 800d82c:	e7c9      	b.n	800d7c2 <quorem+0x94>
 800d82e:	6812      	ldr	r2, [r2, #0]
 800d830:	3b04      	subs	r3, #4
 800d832:	2a00      	cmp	r2, #0
 800d834:	d1f0      	bne.n	800d818 <quorem+0xea>
 800d836:	3c01      	subs	r4, #1
 800d838:	e7eb      	b.n	800d812 <quorem+0xe4>
 800d83a:	2000      	movs	r0, #0
 800d83c:	e7ee      	b.n	800d81c <quorem+0xee>
	...

0800d840 <_dtoa_r>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	ed2d 8b04 	vpush	{d8-d9}
 800d848:	69c5      	ldr	r5, [r0, #28]
 800d84a:	b093      	sub	sp, #76	; 0x4c
 800d84c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d850:	ec57 6b10 	vmov	r6, r7, d0
 800d854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d858:	9107      	str	r1, [sp, #28]
 800d85a:	4604      	mov	r4, r0
 800d85c:	920a      	str	r2, [sp, #40]	; 0x28
 800d85e:	930d      	str	r3, [sp, #52]	; 0x34
 800d860:	b975      	cbnz	r5, 800d880 <_dtoa_r+0x40>
 800d862:	2010      	movs	r0, #16
 800d864:	f000 fe2a 	bl	800e4bc <malloc>
 800d868:	4602      	mov	r2, r0
 800d86a:	61e0      	str	r0, [r4, #28]
 800d86c:	b920      	cbnz	r0, 800d878 <_dtoa_r+0x38>
 800d86e:	4bae      	ldr	r3, [pc, #696]	; (800db28 <_dtoa_r+0x2e8>)
 800d870:	21ef      	movs	r1, #239	; 0xef
 800d872:	48ae      	ldr	r0, [pc, #696]	; (800db2c <_dtoa_r+0x2ec>)
 800d874:	f001 fe6a 	bl	800f54c <__assert_func>
 800d878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d87c:	6005      	str	r5, [r0, #0]
 800d87e:	60c5      	str	r5, [r0, #12]
 800d880:	69e3      	ldr	r3, [r4, #28]
 800d882:	6819      	ldr	r1, [r3, #0]
 800d884:	b151      	cbz	r1, 800d89c <_dtoa_r+0x5c>
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	604a      	str	r2, [r1, #4]
 800d88a:	2301      	movs	r3, #1
 800d88c:	4093      	lsls	r3, r2
 800d88e:	608b      	str	r3, [r1, #8]
 800d890:	4620      	mov	r0, r4
 800d892:	f000 ff07 	bl	800e6a4 <_Bfree>
 800d896:	69e3      	ldr	r3, [r4, #28]
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	1e3b      	subs	r3, r7, #0
 800d89e:	bfbb      	ittet	lt
 800d8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	9303      	strlt	r3, [sp, #12]
 800d8a6:	2300      	movge	r3, #0
 800d8a8:	2201      	movlt	r2, #1
 800d8aa:	bfac      	ite	ge
 800d8ac:	f8c8 3000 	strge.w	r3, [r8]
 800d8b0:	f8c8 2000 	strlt.w	r2, [r8]
 800d8b4:	4b9e      	ldr	r3, [pc, #632]	; (800db30 <_dtoa_r+0x2f0>)
 800d8b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d8ba:	ea33 0308 	bics.w	r3, r3, r8
 800d8be:	d11b      	bne.n	800d8f8 <_dtoa_r+0xb8>
 800d8c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d8cc:	4333      	orrs	r3, r6
 800d8ce:	f000 8593 	beq.w	800e3f8 <_dtoa_r+0xbb8>
 800d8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d4:	b963      	cbnz	r3, 800d8f0 <_dtoa_r+0xb0>
 800d8d6:	4b97      	ldr	r3, [pc, #604]	; (800db34 <_dtoa_r+0x2f4>)
 800d8d8:	e027      	b.n	800d92a <_dtoa_r+0xea>
 800d8da:	4b97      	ldr	r3, [pc, #604]	; (800db38 <_dtoa_r+0x2f8>)
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	9800      	ldr	r0, [sp, #0]
 800d8e6:	b013      	add	sp, #76	; 0x4c
 800d8e8:	ecbd 8b04 	vpop	{d8-d9}
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f0:	4b90      	ldr	r3, [pc, #576]	; (800db34 <_dtoa_r+0x2f4>)
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	3303      	adds	r3, #3
 800d8f6:	e7f3      	b.n	800d8e0 <_dtoa_r+0xa0>
 800d8f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	ec51 0b17 	vmov	r0, r1, d7
 800d902:	eeb0 8a47 	vmov.f32	s16, s14
 800d906:	eef0 8a67 	vmov.f32	s17, s15
 800d90a:	2300      	movs	r3, #0
 800d90c:	f7f3 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d910:	4681      	mov	r9, r0
 800d912:	b160      	cbz	r0, 800d92e <_dtoa_r+0xee>
 800d914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d916:	2301      	movs	r3, #1
 800d918:	6013      	str	r3, [r2, #0]
 800d91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 8568 	beq.w	800e3f2 <_dtoa_r+0xbb2>
 800d922:	4b86      	ldr	r3, [pc, #536]	; (800db3c <_dtoa_r+0x2fc>)
 800d924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d926:	6013      	str	r3, [r2, #0]
 800d928:	3b01      	subs	r3, #1
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	e7da      	b.n	800d8e4 <_dtoa_r+0xa4>
 800d92e:	aa10      	add	r2, sp, #64	; 0x40
 800d930:	a911      	add	r1, sp, #68	; 0x44
 800d932:	4620      	mov	r0, r4
 800d934:	eeb0 0a48 	vmov.f32	s0, s16
 800d938:	eef0 0a68 	vmov.f32	s1, s17
 800d93c:	f001 f994 	bl	800ec68 <__d2b>
 800d940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d944:	4682      	mov	sl, r0
 800d946:	2d00      	cmp	r5, #0
 800d948:	d07f      	beq.n	800da4a <_dtoa_r+0x20a>
 800d94a:	ee18 3a90 	vmov	r3, s17
 800d94e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d956:	ec51 0b18 	vmov	r0, r1, d8
 800d95a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d966:	4619      	mov	r1, r3
 800d968:	2200      	movs	r2, #0
 800d96a:	4b75      	ldr	r3, [pc, #468]	; (800db40 <_dtoa_r+0x300>)
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	a367      	add	r3, pc, #412	; (adr r3, 800db10 <_dtoa_r+0x2d0>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	a367      	add	r3, pc, #412	; (adr r3, 800db18 <_dtoa_r+0x2d8>)
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	f7f2 fc84 	bl	800028c <__adddf3>
 800d984:	4606      	mov	r6, r0
 800d986:	4628      	mov	r0, r5
 800d988:	460f      	mov	r7, r1
 800d98a:	f7f2 fdcb 	bl	8000524 <__aeabi_i2d>
 800d98e:	a364      	add	r3, pc, #400	; (adr r3, 800db20 <_dtoa_r+0x2e0>)
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	f7f2 fe30 	bl	80005f8 <__aeabi_dmul>
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 fc74 	bl	800028c <__adddf3>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	460f      	mov	r7, r1
 800d9a8:	f7f3 f8d6 	bl	8000b58 <__aeabi_d2iz>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4683      	mov	fp, r0
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	f7f3 f891 	bl	8000adc <__aeabi_dcmplt>
 800d9ba:	b148      	cbz	r0, 800d9d0 <_dtoa_r+0x190>
 800d9bc:	4658      	mov	r0, fp
 800d9be:	f7f2 fdb1 	bl	8000524 <__aeabi_i2d>
 800d9c2:	4632      	mov	r2, r6
 800d9c4:	463b      	mov	r3, r7
 800d9c6:	f7f3 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9ca:	b908      	cbnz	r0, 800d9d0 <_dtoa_r+0x190>
 800d9cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9d0:	f1bb 0f16 	cmp.w	fp, #22
 800d9d4:	d857      	bhi.n	800da86 <_dtoa_r+0x246>
 800d9d6:	4b5b      	ldr	r3, [pc, #364]	; (800db44 <_dtoa_r+0x304>)
 800d9d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e0:	ec51 0b18 	vmov	r0, r1, d8
 800d9e4:	f7f3 f87a 	bl	8000adc <__aeabi_dcmplt>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d04e      	beq.n	800da8a <_dtoa_r+0x24a>
 800d9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9f6:	1b5b      	subs	r3, r3, r5
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	bf45      	ittet	mi
 800d9fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800da00:	9305      	strmi	r3, [sp, #20]
 800da02:	2300      	movpl	r3, #0
 800da04:	2300      	movmi	r3, #0
 800da06:	9206      	str	r2, [sp, #24]
 800da08:	bf54      	ite	pl
 800da0a:	9305      	strpl	r3, [sp, #20]
 800da0c:	9306      	strmi	r3, [sp, #24]
 800da0e:	f1bb 0f00 	cmp.w	fp, #0
 800da12:	db3c      	blt.n	800da8e <_dtoa_r+0x24e>
 800da14:	9b06      	ldr	r3, [sp, #24]
 800da16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800da1a:	445b      	add	r3, fp
 800da1c:	9306      	str	r3, [sp, #24]
 800da1e:	2300      	movs	r3, #0
 800da20:	9308      	str	r3, [sp, #32]
 800da22:	9b07      	ldr	r3, [sp, #28]
 800da24:	2b09      	cmp	r3, #9
 800da26:	d868      	bhi.n	800dafa <_dtoa_r+0x2ba>
 800da28:	2b05      	cmp	r3, #5
 800da2a:	bfc4      	itt	gt
 800da2c:	3b04      	subgt	r3, #4
 800da2e:	9307      	strgt	r3, [sp, #28]
 800da30:	9b07      	ldr	r3, [sp, #28]
 800da32:	f1a3 0302 	sub.w	r3, r3, #2
 800da36:	bfcc      	ite	gt
 800da38:	2500      	movgt	r5, #0
 800da3a:	2501      	movle	r5, #1
 800da3c:	2b03      	cmp	r3, #3
 800da3e:	f200 8085 	bhi.w	800db4c <_dtoa_r+0x30c>
 800da42:	e8df f003 	tbb	[pc, r3]
 800da46:	3b2e      	.short	0x3b2e
 800da48:	5839      	.short	0x5839
 800da4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800da4e:	441d      	add	r5, r3
 800da50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da54:	2b20      	cmp	r3, #32
 800da56:	bfc1      	itttt	gt
 800da58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da5c:	fa08 f803 	lslgt.w	r8, r8, r3
 800da60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800da64:	fa26 f303 	lsrgt.w	r3, r6, r3
 800da68:	bfd6      	itet	le
 800da6a:	f1c3 0320 	rsble	r3, r3, #32
 800da6e:	ea48 0003 	orrgt.w	r0, r8, r3
 800da72:	fa06 f003 	lslle.w	r0, r6, r3
 800da76:	f7f2 fd45 	bl	8000504 <__aeabi_ui2d>
 800da7a:	2201      	movs	r2, #1
 800da7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800da80:	3d01      	subs	r5, #1
 800da82:	920e      	str	r2, [sp, #56]	; 0x38
 800da84:	e76f      	b.n	800d966 <_dtoa_r+0x126>
 800da86:	2301      	movs	r3, #1
 800da88:	e7b3      	b.n	800d9f2 <_dtoa_r+0x1b2>
 800da8a:	900c      	str	r0, [sp, #48]	; 0x30
 800da8c:	e7b2      	b.n	800d9f4 <_dtoa_r+0x1b4>
 800da8e:	9b05      	ldr	r3, [sp, #20]
 800da90:	eba3 030b 	sub.w	r3, r3, fp
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	f1cb 0300 	rsb	r3, fp, #0
 800da9a:	9308      	str	r3, [sp, #32]
 800da9c:	2300      	movs	r3, #0
 800da9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800daa0:	e7bf      	b.n	800da22 <_dtoa_r+0x1e2>
 800daa2:	2300      	movs	r3, #0
 800daa4:	9309      	str	r3, [sp, #36]	; 0x24
 800daa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dc52      	bgt.n	800db52 <_dtoa_r+0x312>
 800daac:	2301      	movs	r3, #1
 800daae:	9301      	str	r3, [sp, #4]
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	461a      	mov	r2, r3
 800dab4:	920a      	str	r2, [sp, #40]	; 0x28
 800dab6:	e00b      	b.n	800dad0 <_dtoa_r+0x290>
 800dab8:	2301      	movs	r3, #1
 800daba:	e7f3      	b.n	800daa4 <_dtoa_r+0x264>
 800dabc:	2300      	movs	r3, #0
 800dabe:	9309      	str	r3, [sp, #36]	; 0x24
 800dac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dac2:	445b      	add	r3, fp
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	3301      	adds	r3, #1
 800dac8:	2b01      	cmp	r3, #1
 800daca:	9304      	str	r3, [sp, #16]
 800dacc:	bfb8      	it	lt
 800dace:	2301      	movlt	r3, #1
 800dad0:	69e0      	ldr	r0, [r4, #28]
 800dad2:	2100      	movs	r1, #0
 800dad4:	2204      	movs	r2, #4
 800dad6:	f102 0614 	add.w	r6, r2, #20
 800dada:	429e      	cmp	r6, r3
 800dadc:	d93d      	bls.n	800db5a <_dtoa_r+0x31a>
 800dade:	6041      	str	r1, [r0, #4]
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 fd9f 	bl	800e624 <_Balloc>
 800dae6:	9000      	str	r0, [sp, #0]
 800dae8:	2800      	cmp	r0, #0
 800daea:	d139      	bne.n	800db60 <_dtoa_r+0x320>
 800daec:	4b16      	ldr	r3, [pc, #88]	; (800db48 <_dtoa_r+0x308>)
 800daee:	4602      	mov	r2, r0
 800daf0:	f240 11af 	movw	r1, #431	; 0x1af
 800daf4:	e6bd      	b.n	800d872 <_dtoa_r+0x32>
 800daf6:	2301      	movs	r3, #1
 800daf8:	e7e1      	b.n	800dabe <_dtoa_r+0x27e>
 800dafa:	2501      	movs	r5, #1
 800dafc:	2300      	movs	r3, #0
 800dafe:	9307      	str	r3, [sp, #28]
 800db00:	9509      	str	r5, [sp, #36]	; 0x24
 800db02:	f04f 33ff 	mov.w	r3, #4294967295
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	2200      	movs	r2, #0
 800db0c:	2312      	movs	r3, #18
 800db0e:	e7d1      	b.n	800dab4 <_dtoa_r+0x274>
 800db10:	636f4361 	.word	0x636f4361
 800db14:	3fd287a7 	.word	0x3fd287a7
 800db18:	8b60c8b3 	.word	0x8b60c8b3
 800db1c:	3fc68a28 	.word	0x3fc68a28
 800db20:	509f79fb 	.word	0x509f79fb
 800db24:	3fd34413 	.word	0x3fd34413
 800db28:	0800fe5d 	.word	0x0800fe5d
 800db2c:	0800fe74 	.word	0x0800fe74
 800db30:	7ff00000 	.word	0x7ff00000
 800db34:	0800fe59 	.word	0x0800fe59
 800db38:	0800fe50 	.word	0x0800fe50
 800db3c:	0800fe2d 	.word	0x0800fe2d
 800db40:	3ff80000 	.word	0x3ff80000
 800db44:	0800ff60 	.word	0x0800ff60
 800db48:	0800fecc 	.word	0x0800fecc
 800db4c:	2301      	movs	r3, #1
 800db4e:	9309      	str	r3, [sp, #36]	; 0x24
 800db50:	e7d7      	b.n	800db02 <_dtoa_r+0x2c2>
 800db52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	e7ba      	b.n	800dad0 <_dtoa_r+0x290>
 800db5a:	3101      	adds	r1, #1
 800db5c:	0052      	lsls	r2, r2, #1
 800db5e:	e7ba      	b.n	800dad6 <_dtoa_r+0x296>
 800db60:	69e3      	ldr	r3, [r4, #28]
 800db62:	9a00      	ldr	r2, [sp, #0]
 800db64:	601a      	str	r2, [r3, #0]
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	2b0e      	cmp	r3, #14
 800db6a:	f200 80a8 	bhi.w	800dcbe <_dtoa_r+0x47e>
 800db6e:	2d00      	cmp	r5, #0
 800db70:	f000 80a5 	beq.w	800dcbe <_dtoa_r+0x47e>
 800db74:	f1bb 0f00 	cmp.w	fp, #0
 800db78:	dd38      	ble.n	800dbec <_dtoa_r+0x3ac>
 800db7a:	4bc0      	ldr	r3, [pc, #768]	; (800de7c <_dtoa_r+0x63c>)
 800db7c:	f00b 020f 	and.w	r2, fp, #15
 800db80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800db88:	e9d3 6700 	ldrd	r6, r7, [r3]
 800db8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800db90:	d019      	beq.n	800dbc6 <_dtoa_r+0x386>
 800db92:	4bbb      	ldr	r3, [pc, #748]	; (800de80 <_dtoa_r+0x640>)
 800db94:	ec51 0b18 	vmov	r0, r1, d8
 800db98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db9c:	f7f2 fe56 	bl	800084c <__aeabi_ddiv>
 800dba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba4:	f008 080f 	and.w	r8, r8, #15
 800dba8:	2503      	movs	r5, #3
 800dbaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800de80 <_dtoa_r+0x640>
 800dbae:	f1b8 0f00 	cmp.w	r8, #0
 800dbb2:	d10a      	bne.n	800dbca <_dtoa_r+0x38a>
 800dbb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbb8:	4632      	mov	r2, r6
 800dbba:	463b      	mov	r3, r7
 800dbbc:	f7f2 fe46 	bl	800084c <__aeabi_ddiv>
 800dbc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbc4:	e02b      	b.n	800dc1e <_dtoa_r+0x3de>
 800dbc6:	2502      	movs	r5, #2
 800dbc8:	e7ef      	b.n	800dbaa <_dtoa_r+0x36a>
 800dbca:	f018 0f01 	tst.w	r8, #1
 800dbce:	d008      	beq.n	800dbe2 <_dtoa_r+0x3a2>
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dbd8:	f7f2 fd0e 	bl	80005f8 <__aeabi_dmul>
 800dbdc:	3501      	adds	r5, #1
 800dbde:	4606      	mov	r6, r0
 800dbe0:	460f      	mov	r7, r1
 800dbe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dbe6:	f109 0908 	add.w	r9, r9, #8
 800dbea:	e7e0      	b.n	800dbae <_dtoa_r+0x36e>
 800dbec:	f000 809f 	beq.w	800dd2e <_dtoa_r+0x4ee>
 800dbf0:	f1cb 0600 	rsb	r6, fp, #0
 800dbf4:	4ba1      	ldr	r3, [pc, #644]	; (800de7c <_dtoa_r+0x63c>)
 800dbf6:	4fa2      	ldr	r7, [pc, #648]	; (800de80 <_dtoa_r+0x640>)
 800dbf8:	f006 020f 	and.w	r2, r6, #15
 800dbfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	ec51 0b18 	vmov	r0, r1, d8
 800dc08:	f7f2 fcf6 	bl	80005f8 <__aeabi_dmul>
 800dc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc10:	1136      	asrs	r6, r6, #4
 800dc12:	2300      	movs	r3, #0
 800dc14:	2502      	movs	r5, #2
 800dc16:	2e00      	cmp	r6, #0
 800dc18:	d17e      	bne.n	800dd18 <_dtoa_r+0x4d8>
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1d0      	bne.n	800dbc0 <_dtoa_r+0x380>
 800dc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 8084 	beq.w	800dd32 <_dtoa_r+0x4f2>
 800dc2a:	4b96      	ldr	r3, [pc, #600]	; (800de84 <_dtoa_r+0x644>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4640      	mov	r0, r8
 800dc30:	4649      	mov	r1, r9
 800dc32:	f7f2 ff53 	bl	8000adc <__aeabi_dcmplt>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d07b      	beq.n	800dd32 <_dtoa_r+0x4f2>
 800dc3a:	9b04      	ldr	r3, [sp, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d078      	beq.n	800dd32 <_dtoa_r+0x4f2>
 800dc40:	9b01      	ldr	r3, [sp, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dd39      	ble.n	800dcba <_dtoa_r+0x47a>
 800dc46:	4b90      	ldr	r3, [pc, #576]	; (800de88 <_dtoa_r+0x648>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	f7f2 fcd3 	bl	80005f8 <__aeabi_dmul>
 800dc52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc56:	9e01      	ldr	r6, [sp, #4]
 800dc58:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc62:	4628      	mov	r0, r5
 800dc64:	f7f2 fc5e 	bl	8000524 <__aeabi_i2d>
 800dc68:	4642      	mov	r2, r8
 800dc6a:	464b      	mov	r3, r9
 800dc6c:	f7f2 fcc4 	bl	80005f8 <__aeabi_dmul>
 800dc70:	4b86      	ldr	r3, [pc, #536]	; (800de8c <_dtoa_r+0x64c>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	f7f2 fb0a 	bl	800028c <__adddf3>
 800dc78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc80:	9303      	str	r3, [sp, #12]
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	d158      	bne.n	800dd38 <_dtoa_r+0x4f8>
 800dc86:	4b82      	ldr	r3, [pc, #520]	; (800de90 <_dtoa_r+0x650>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	f7f2 fafb 	bl	8000288 <__aeabi_dsub>
 800dc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc96:	4680      	mov	r8, r0
 800dc98:	4689      	mov	r9, r1
 800dc9a:	f7f2 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f040 8296 	bne.w	800e1d0 <_dtoa_r+0x990>
 800dca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dca8:	4640      	mov	r0, r8
 800dcaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7f2 ff14 	bl	8000adc <__aeabi_dcmplt>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f040 8289 	bne.w	800e1cc <_dtoa_r+0x98c>
 800dcba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dcbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f2c0 814e 	blt.w	800df62 <_dtoa_r+0x722>
 800dcc6:	f1bb 0f0e 	cmp.w	fp, #14
 800dcca:	f300 814a 	bgt.w	800df62 <_dtoa_r+0x722>
 800dcce:	4b6b      	ldr	r3, [pc, #428]	; (800de7c <_dtoa_r+0x63c>)
 800dcd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dcd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f280 80dc 	bge.w	800de98 <_dtoa_r+0x658>
 800dce0:	9b04      	ldr	r3, [sp, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f300 80d8 	bgt.w	800de98 <_dtoa_r+0x658>
 800dce8:	f040 826f 	bne.w	800e1ca <_dtoa_r+0x98a>
 800dcec:	4b68      	ldr	r3, [pc, #416]	; (800de90 <_dtoa_r+0x650>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	f7f2 fc80 	bl	80005f8 <__aeabi_dmul>
 800dcf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcfc:	f7f2 ff02 	bl	8000b04 <__aeabi_dcmpge>
 800dd00:	9e04      	ldr	r6, [sp, #16]
 800dd02:	4637      	mov	r7, r6
 800dd04:	2800      	cmp	r0, #0
 800dd06:	f040 8245 	bne.w	800e194 <_dtoa_r+0x954>
 800dd0a:	9d00      	ldr	r5, [sp, #0]
 800dd0c:	2331      	movs	r3, #49	; 0x31
 800dd0e:	f805 3b01 	strb.w	r3, [r5], #1
 800dd12:	f10b 0b01 	add.w	fp, fp, #1
 800dd16:	e241      	b.n	800e19c <_dtoa_r+0x95c>
 800dd18:	07f2      	lsls	r2, r6, #31
 800dd1a:	d505      	bpl.n	800dd28 <_dtoa_r+0x4e8>
 800dd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd20:	f7f2 fc6a 	bl	80005f8 <__aeabi_dmul>
 800dd24:	3501      	adds	r5, #1
 800dd26:	2301      	movs	r3, #1
 800dd28:	1076      	asrs	r6, r6, #1
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	e773      	b.n	800dc16 <_dtoa_r+0x3d6>
 800dd2e:	2502      	movs	r5, #2
 800dd30:	e775      	b.n	800dc1e <_dtoa_r+0x3de>
 800dd32:	9e04      	ldr	r6, [sp, #16]
 800dd34:	465f      	mov	r7, fp
 800dd36:	e792      	b.n	800dc5e <_dtoa_r+0x41e>
 800dd38:	9900      	ldr	r1, [sp, #0]
 800dd3a:	4b50      	ldr	r3, [pc, #320]	; (800de7c <_dtoa_r+0x63c>)
 800dd3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd40:	4431      	add	r1, r6
 800dd42:	9102      	str	r1, [sp, #8]
 800dd44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd46:	eeb0 9a47 	vmov.f32	s18, s14
 800dd4a:	eef0 9a67 	vmov.f32	s19, s15
 800dd4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd56:	2900      	cmp	r1, #0
 800dd58:	d044      	beq.n	800dde4 <_dtoa_r+0x5a4>
 800dd5a:	494e      	ldr	r1, [pc, #312]	; (800de94 <_dtoa_r+0x654>)
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f7f2 fd75 	bl	800084c <__aeabi_ddiv>
 800dd62:	ec53 2b19 	vmov	r2, r3, d9
 800dd66:	f7f2 fa8f 	bl	8000288 <__aeabi_dsub>
 800dd6a:	9d00      	ldr	r5, [sp, #0]
 800dd6c:	ec41 0b19 	vmov	d9, r0, r1
 800dd70:	4649      	mov	r1, r9
 800dd72:	4640      	mov	r0, r8
 800dd74:	f7f2 fef0 	bl	8000b58 <__aeabi_d2iz>
 800dd78:	4606      	mov	r6, r0
 800dd7a:	f7f2 fbd3 	bl	8000524 <__aeabi_i2d>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4640      	mov	r0, r8
 800dd84:	4649      	mov	r1, r9
 800dd86:	f7f2 fa7f 	bl	8000288 <__aeabi_dsub>
 800dd8a:	3630      	adds	r6, #48	; 0x30
 800dd8c:	f805 6b01 	strb.w	r6, [r5], #1
 800dd90:	ec53 2b19 	vmov	r2, r3, d9
 800dd94:	4680      	mov	r8, r0
 800dd96:	4689      	mov	r9, r1
 800dd98:	f7f2 fea0 	bl	8000adc <__aeabi_dcmplt>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d164      	bne.n	800de6a <_dtoa_r+0x62a>
 800dda0:	4642      	mov	r2, r8
 800dda2:	464b      	mov	r3, r9
 800dda4:	4937      	ldr	r1, [pc, #220]	; (800de84 <_dtoa_r+0x644>)
 800dda6:	2000      	movs	r0, #0
 800dda8:	f7f2 fa6e 	bl	8000288 <__aeabi_dsub>
 800ddac:	ec53 2b19 	vmov	r2, r3, d9
 800ddb0:	f7f2 fe94 	bl	8000adc <__aeabi_dcmplt>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	f040 80b6 	bne.w	800df26 <_dtoa_r+0x6e6>
 800ddba:	9b02      	ldr	r3, [sp, #8]
 800ddbc:	429d      	cmp	r5, r3
 800ddbe:	f43f af7c 	beq.w	800dcba <_dtoa_r+0x47a>
 800ddc2:	4b31      	ldr	r3, [pc, #196]	; (800de88 <_dtoa_r+0x648>)
 800ddc4:	ec51 0b19 	vmov	r0, r1, d9
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f7f2 fc15 	bl	80005f8 <__aeabi_dmul>
 800ddce:	4b2e      	ldr	r3, [pc, #184]	; (800de88 <_dtoa_r+0x648>)
 800ddd0:	ec41 0b19 	vmov	d9, r0, r1
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4649      	mov	r1, r9
 800ddda:	f7f2 fc0d 	bl	80005f8 <__aeabi_dmul>
 800ddde:	4680      	mov	r8, r0
 800dde0:	4689      	mov	r9, r1
 800dde2:	e7c5      	b.n	800dd70 <_dtoa_r+0x530>
 800dde4:	ec51 0b17 	vmov	r0, r1, d7
 800dde8:	f7f2 fc06 	bl	80005f8 <__aeabi_dmul>
 800ddec:	9b02      	ldr	r3, [sp, #8]
 800ddee:	9d00      	ldr	r5, [sp, #0]
 800ddf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddf2:	ec41 0b19 	vmov	d9, r0, r1
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	4640      	mov	r0, r8
 800ddfa:	f7f2 fead 	bl	8000b58 <__aeabi_d2iz>
 800ddfe:	4606      	mov	r6, r0
 800de00:	f7f2 fb90 	bl	8000524 <__aeabi_i2d>
 800de04:	3630      	adds	r6, #48	; 0x30
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4640      	mov	r0, r8
 800de0c:	4649      	mov	r1, r9
 800de0e:	f7f2 fa3b 	bl	8000288 <__aeabi_dsub>
 800de12:	f805 6b01 	strb.w	r6, [r5], #1
 800de16:	9b02      	ldr	r3, [sp, #8]
 800de18:	429d      	cmp	r5, r3
 800de1a:	4680      	mov	r8, r0
 800de1c:	4689      	mov	r9, r1
 800de1e:	f04f 0200 	mov.w	r2, #0
 800de22:	d124      	bne.n	800de6e <_dtoa_r+0x62e>
 800de24:	4b1b      	ldr	r3, [pc, #108]	; (800de94 <_dtoa_r+0x654>)
 800de26:	ec51 0b19 	vmov	r0, r1, d9
 800de2a:	f7f2 fa2f 	bl	800028c <__adddf3>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	4640      	mov	r0, r8
 800de34:	4649      	mov	r1, r9
 800de36:	f7f2 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d173      	bne.n	800df26 <_dtoa_r+0x6e6>
 800de3e:	ec53 2b19 	vmov	r2, r3, d9
 800de42:	4914      	ldr	r1, [pc, #80]	; (800de94 <_dtoa_r+0x654>)
 800de44:	2000      	movs	r0, #0
 800de46:	f7f2 fa1f 	bl	8000288 <__aeabi_dsub>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 fe43 	bl	8000adc <__aeabi_dcmplt>
 800de56:	2800      	cmp	r0, #0
 800de58:	f43f af2f 	beq.w	800dcba <_dtoa_r+0x47a>
 800de5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800de5e:	1e6b      	subs	r3, r5, #1
 800de60:	930f      	str	r3, [sp, #60]	; 0x3c
 800de62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de66:	2b30      	cmp	r3, #48	; 0x30
 800de68:	d0f8      	beq.n	800de5c <_dtoa_r+0x61c>
 800de6a:	46bb      	mov	fp, r7
 800de6c:	e04a      	b.n	800df04 <_dtoa_r+0x6c4>
 800de6e:	4b06      	ldr	r3, [pc, #24]	; (800de88 <_dtoa_r+0x648>)
 800de70:	f7f2 fbc2 	bl	80005f8 <__aeabi_dmul>
 800de74:	4680      	mov	r8, r0
 800de76:	4689      	mov	r9, r1
 800de78:	e7bd      	b.n	800ddf6 <_dtoa_r+0x5b6>
 800de7a:	bf00      	nop
 800de7c:	0800ff60 	.word	0x0800ff60
 800de80:	0800ff38 	.word	0x0800ff38
 800de84:	3ff00000 	.word	0x3ff00000
 800de88:	40240000 	.word	0x40240000
 800de8c:	401c0000 	.word	0x401c0000
 800de90:	40140000 	.word	0x40140000
 800de94:	3fe00000 	.word	0x3fe00000
 800de98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de9c:	9d00      	ldr	r5, [sp, #0]
 800de9e:	4642      	mov	r2, r8
 800dea0:	464b      	mov	r3, r9
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fcd1 	bl	800084c <__aeabi_ddiv>
 800deaa:	f7f2 fe55 	bl	8000b58 <__aeabi_d2iz>
 800deae:	9001      	str	r0, [sp, #4]
 800deb0:	f7f2 fb38 	bl	8000524 <__aeabi_i2d>
 800deb4:	4642      	mov	r2, r8
 800deb6:	464b      	mov	r3, r9
 800deb8:	f7f2 fb9e 	bl	80005f8 <__aeabi_dmul>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 f9e0 	bl	8000288 <__aeabi_dsub>
 800dec8:	9e01      	ldr	r6, [sp, #4]
 800deca:	9f04      	ldr	r7, [sp, #16]
 800decc:	3630      	adds	r6, #48	; 0x30
 800dece:	f805 6b01 	strb.w	r6, [r5], #1
 800ded2:	9e00      	ldr	r6, [sp, #0]
 800ded4:	1bae      	subs	r6, r5, r6
 800ded6:	42b7      	cmp	r7, r6
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	d134      	bne.n	800df48 <_dtoa_r+0x708>
 800dede:	f7f2 f9d5 	bl	800028c <__adddf3>
 800dee2:	4642      	mov	r2, r8
 800dee4:	464b      	mov	r3, r9
 800dee6:	4606      	mov	r6, r0
 800dee8:	460f      	mov	r7, r1
 800deea:	f7f2 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 800deee:	b9c8      	cbnz	r0, 800df24 <_dtoa_r+0x6e4>
 800def0:	4642      	mov	r2, r8
 800def2:	464b      	mov	r3, r9
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 800defc:	b110      	cbz	r0, 800df04 <_dtoa_r+0x6c4>
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	07db      	lsls	r3, r3, #31
 800df02:	d40f      	bmi.n	800df24 <_dtoa_r+0x6e4>
 800df04:	4651      	mov	r1, sl
 800df06:	4620      	mov	r0, r4
 800df08:	f000 fbcc 	bl	800e6a4 <_Bfree>
 800df0c:	2300      	movs	r3, #0
 800df0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df10:	702b      	strb	r3, [r5, #0]
 800df12:	f10b 0301 	add.w	r3, fp, #1
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f43f ace2 	beq.w	800d8e4 <_dtoa_r+0xa4>
 800df20:	601d      	str	r5, [r3, #0]
 800df22:	e4df      	b.n	800d8e4 <_dtoa_r+0xa4>
 800df24:	465f      	mov	r7, fp
 800df26:	462b      	mov	r3, r5
 800df28:	461d      	mov	r5, r3
 800df2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df2e:	2a39      	cmp	r2, #57	; 0x39
 800df30:	d106      	bne.n	800df40 <_dtoa_r+0x700>
 800df32:	9a00      	ldr	r2, [sp, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	d1f7      	bne.n	800df28 <_dtoa_r+0x6e8>
 800df38:	9900      	ldr	r1, [sp, #0]
 800df3a:	2230      	movs	r2, #48	; 0x30
 800df3c:	3701      	adds	r7, #1
 800df3e:	700a      	strb	r2, [r1, #0]
 800df40:	781a      	ldrb	r2, [r3, #0]
 800df42:	3201      	adds	r2, #1
 800df44:	701a      	strb	r2, [r3, #0]
 800df46:	e790      	b.n	800de6a <_dtoa_r+0x62a>
 800df48:	4ba3      	ldr	r3, [pc, #652]	; (800e1d8 <_dtoa_r+0x998>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	f7f2 fb54 	bl	80005f8 <__aeabi_dmul>
 800df50:	2200      	movs	r2, #0
 800df52:	2300      	movs	r3, #0
 800df54:	4606      	mov	r6, r0
 800df56:	460f      	mov	r7, r1
 800df58:	f7f2 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d09e      	beq.n	800de9e <_dtoa_r+0x65e>
 800df60:	e7d0      	b.n	800df04 <_dtoa_r+0x6c4>
 800df62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df64:	2a00      	cmp	r2, #0
 800df66:	f000 80ca 	beq.w	800e0fe <_dtoa_r+0x8be>
 800df6a:	9a07      	ldr	r2, [sp, #28]
 800df6c:	2a01      	cmp	r2, #1
 800df6e:	f300 80ad 	bgt.w	800e0cc <_dtoa_r+0x88c>
 800df72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df74:	2a00      	cmp	r2, #0
 800df76:	f000 80a5 	beq.w	800e0c4 <_dtoa_r+0x884>
 800df7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df7e:	9e08      	ldr	r6, [sp, #32]
 800df80:	9d05      	ldr	r5, [sp, #20]
 800df82:	9a05      	ldr	r2, [sp, #20]
 800df84:	441a      	add	r2, r3
 800df86:	9205      	str	r2, [sp, #20]
 800df88:	9a06      	ldr	r2, [sp, #24]
 800df8a:	2101      	movs	r1, #1
 800df8c:	441a      	add	r2, r3
 800df8e:	4620      	mov	r0, r4
 800df90:	9206      	str	r2, [sp, #24]
 800df92:	f000 fc3d 	bl	800e810 <__i2b>
 800df96:	4607      	mov	r7, r0
 800df98:	b165      	cbz	r5, 800dfb4 <_dtoa_r+0x774>
 800df9a:	9b06      	ldr	r3, [sp, #24]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	dd09      	ble.n	800dfb4 <_dtoa_r+0x774>
 800dfa0:	42ab      	cmp	r3, r5
 800dfa2:	9a05      	ldr	r2, [sp, #20]
 800dfa4:	bfa8      	it	ge
 800dfa6:	462b      	movge	r3, r5
 800dfa8:	1ad2      	subs	r2, r2, r3
 800dfaa:	9205      	str	r2, [sp, #20]
 800dfac:	9a06      	ldr	r2, [sp, #24]
 800dfae:	1aed      	subs	r5, r5, r3
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	9306      	str	r3, [sp, #24]
 800dfb4:	9b08      	ldr	r3, [sp, #32]
 800dfb6:	b1f3      	cbz	r3, 800dff6 <_dtoa_r+0x7b6>
 800dfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 80a3 	beq.w	800e106 <_dtoa_r+0x8c6>
 800dfc0:	2e00      	cmp	r6, #0
 800dfc2:	dd10      	ble.n	800dfe6 <_dtoa_r+0x7a6>
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	4632      	mov	r2, r6
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 fce1 	bl	800e990 <__pow5mult>
 800dfce:	4652      	mov	r2, sl
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fc31 	bl	800e83c <__multiply>
 800dfda:	4651      	mov	r1, sl
 800dfdc:	4680      	mov	r8, r0
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fb60 	bl	800e6a4 <_Bfree>
 800dfe4:	46c2      	mov	sl, r8
 800dfe6:	9b08      	ldr	r3, [sp, #32]
 800dfe8:	1b9a      	subs	r2, r3, r6
 800dfea:	d004      	beq.n	800dff6 <_dtoa_r+0x7b6>
 800dfec:	4651      	mov	r1, sl
 800dfee:	4620      	mov	r0, r4
 800dff0:	f000 fcce 	bl	800e990 <__pow5mult>
 800dff4:	4682      	mov	sl, r0
 800dff6:	2101      	movs	r1, #1
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 fc09 	bl	800e810 <__i2b>
 800dffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e000:	2b00      	cmp	r3, #0
 800e002:	4606      	mov	r6, r0
 800e004:	f340 8081 	ble.w	800e10a <_dtoa_r+0x8ca>
 800e008:	461a      	mov	r2, r3
 800e00a:	4601      	mov	r1, r0
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 fcbf 	bl	800e990 <__pow5mult>
 800e012:	9b07      	ldr	r3, [sp, #28]
 800e014:	2b01      	cmp	r3, #1
 800e016:	4606      	mov	r6, r0
 800e018:	dd7a      	ble.n	800e110 <_dtoa_r+0x8d0>
 800e01a:	f04f 0800 	mov.w	r8, #0
 800e01e:	6933      	ldr	r3, [r6, #16]
 800e020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e024:	6918      	ldr	r0, [r3, #16]
 800e026:	f000 fba5 	bl	800e774 <__hi0bits>
 800e02a:	f1c0 0020 	rsb	r0, r0, #32
 800e02e:	9b06      	ldr	r3, [sp, #24]
 800e030:	4418      	add	r0, r3
 800e032:	f010 001f 	ands.w	r0, r0, #31
 800e036:	f000 8094 	beq.w	800e162 <_dtoa_r+0x922>
 800e03a:	f1c0 0320 	rsb	r3, r0, #32
 800e03e:	2b04      	cmp	r3, #4
 800e040:	f340 8085 	ble.w	800e14e <_dtoa_r+0x90e>
 800e044:	9b05      	ldr	r3, [sp, #20]
 800e046:	f1c0 001c 	rsb	r0, r0, #28
 800e04a:	4403      	add	r3, r0
 800e04c:	9305      	str	r3, [sp, #20]
 800e04e:	9b06      	ldr	r3, [sp, #24]
 800e050:	4403      	add	r3, r0
 800e052:	4405      	add	r5, r0
 800e054:	9306      	str	r3, [sp, #24]
 800e056:	9b05      	ldr	r3, [sp, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	dd05      	ble.n	800e068 <_dtoa_r+0x828>
 800e05c:	4651      	mov	r1, sl
 800e05e:	461a      	mov	r2, r3
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fcef 	bl	800ea44 <__lshift>
 800e066:	4682      	mov	sl, r0
 800e068:	9b06      	ldr	r3, [sp, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	dd05      	ble.n	800e07a <_dtoa_r+0x83a>
 800e06e:	4631      	mov	r1, r6
 800e070:	461a      	mov	r2, r3
 800e072:	4620      	mov	r0, r4
 800e074:	f000 fce6 	bl	800ea44 <__lshift>
 800e078:	4606      	mov	r6, r0
 800e07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d072      	beq.n	800e166 <_dtoa_r+0x926>
 800e080:	4631      	mov	r1, r6
 800e082:	4650      	mov	r0, sl
 800e084:	f000 fd4a 	bl	800eb1c <__mcmp>
 800e088:	2800      	cmp	r0, #0
 800e08a:	da6c      	bge.n	800e166 <_dtoa_r+0x926>
 800e08c:	2300      	movs	r3, #0
 800e08e:	4651      	mov	r1, sl
 800e090:	220a      	movs	r2, #10
 800e092:	4620      	mov	r0, r4
 800e094:	f000 fb28 	bl	800e6e8 <__multadd>
 800e098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e09e:	4682      	mov	sl, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 81b0 	beq.w	800e406 <_dtoa_r+0xbc6>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	220a      	movs	r2, #10
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f000 fb1b 	bl	800e6e8 <__multadd>
 800e0b2:	9b01      	ldr	r3, [sp, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	f300 8096 	bgt.w	800e1e8 <_dtoa_r+0x9a8>
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	dc59      	bgt.n	800e176 <_dtoa_r+0x936>
 800e0c2:	e091      	b.n	800e1e8 <_dtoa_r+0x9a8>
 800e0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e0ca:	e758      	b.n	800df7e <_dtoa_r+0x73e>
 800e0cc:	9b04      	ldr	r3, [sp, #16]
 800e0ce:	1e5e      	subs	r6, r3, #1
 800e0d0:	9b08      	ldr	r3, [sp, #32]
 800e0d2:	42b3      	cmp	r3, r6
 800e0d4:	bfbf      	itttt	lt
 800e0d6:	9b08      	ldrlt	r3, [sp, #32]
 800e0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e0da:	9608      	strlt	r6, [sp, #32]
 800e0dc:	1af3      	sublt	r3, r6, r3
 800e0de:	bfb4      	ite	lt
 800e0e0:	18d2      	addlt	r2, r2, r3
 800e0e2:	1b9e      	subge	r6, r3, r6
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	bfbc      	itt	lt
 800e0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e0ea:	2600      	movlt	r6, #0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	bfb7      	itett	lt
 800e0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e0f8:	1a9d      	sublt	r5, r3, r2
 800e0fa:	2300      	movlt	r3, #0
 800e0fc:	e741      	b.n	800df82 <_dtoa_r+0x742>
 800e0fe:	9e08      	ldr	r6, [sp, #32]
 800e100:	9d05      	ldr	r5, [sp, #20]
 800e102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e104:	e748      	b.n	800df98 <_dtoa_r+0x758>
 800e106:	9a08      	ldr	r2, [sp, #32]
 800e108:	e770      	b.n	800dfec <_dtoa_r+0x7ac>
 800e10a:	9b07      	ldr	r3, [sp, #28]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	dc19      	bgt.n	800e144 <_dtoa_r+0x904>
 800e110:	9b02      	ldr	r3, [sp, #8]
 800e112:	b9bb      	cbnz	r3, 800e144 <_dtoa_r+0x904>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e11a:	b99b      	cbnz	r3, 800e144 <_dtoa_r+0x904>
 800e11c:	9b03      	ldr	r3, [sp, #12]
 800e11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e122:	0d1b      	lsrs	r3, r3, #20
 800e124:	051b      	lsls	r3, r3, #20
 800e126:	b183      	cbz	r3, 800e14a <_dtoa_r+0x90a>
 800e128:	9b05      	ldr	r3, [sp, #20]
 800e12a:	3301      	adds	r3, #1
 800e12c:	9305      	str	r3, [sp, #20]
 800e12e:	9b06      	ldr	r3, [sp, #24]
 800e130:	3301      	adds	r3, #1
 800e132:	9306      	str	r3, [sp, #24]
 800e134:	f04f 0801 	mov.w	r8, #1
 800e138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f47f af6f 	bne.w	800e01e <_dtoa_r+0x7de>
 800e140:	2001      	movs	r0, #1
 800e142:	e774      	b.n	800e02e <_dtoa_r+0x7ee>
 800e144:	f04f 0800 	mov.w	r8, #0
 800e148:	e7f6      	b.n	800e138 <_dtoa_r+0x8f8>
 800e14a:	4698      	mov	r8, r3
 800e14c:	e7f4      	b.n	800e138 <_dtoa_r+0x8f8>
 800e14e:	d082      	beq.n	800e056 <_dtoa_r+0x816>
 800e150:	9a05      	ldr	r2, [sp, #20]
 800e152:	331c      	adds	r3, #28
 800e154:	441a      	add	r2, r3
 800e156:	9205      	str	r2, [sp, #20]
 800e158:	9a06      	ldr	r2, [sp, #24]
 800e15a:	441a      	add	r2, r3
 800e15c:	441d      	add	r5, r3
 800e15e:	9206      	str	r2, [sp, #24]
 800e160:	e779      	b.n	800e056 <_dtoa_r+0x816>
 800e162:	4603      	mov	r3, r0
 800e164:	e7f4      	b.n	800e150 <_dtoa_r+0x910>
 800e166:	9b04      	ldr	r3, [sp, #16]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	dc37      	bgt.n	800e1dc <_dtoa_r+0x99c>
 800e16c:	9b07      	ldr	r3, [sp, #28]
 800e16e:	2b02      	cmp	r3, #2
 800e170:	dd34      	ble.n	800e1dc <_dtoa_r+0x99c>
 800e172:	9b04      	ldr	r3, [sp, #16]
 800e174:	9301      	str	r3, [sp, #4]
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	b963      	cbnz	r3, 800e194 <_dtoa_r+0x954>
 800e17a:	4631      	mov	r1, r6
 800e17c:	2205      	movs	r2, #5
 800e17e:	4620      	mov	r0, r4
 800e180:	f000 fab2 	bl	800e6e8 <__multadd>
 800e184:	4601      	mov	r1, r0
 800e186:	4606      	mov	r6, r0
 800e188:	4650      	mov	r0, sl
 800e18a:	f000 fcc7 	bl	800eb1c <__mcmp>
 800e18e:	2800      	cmp	r0, #0
 800e190:	f73f adbb 	bgt.w	800dd0a <_dtoa_r+0x4ca>
 800e194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e196:	9d00      	ldr	r5, [sp, #0]
 800e198:	ea6f 0b03 	mvn.w	fp, r3
 800e19c:	f04f 0800 	mov.w	r8, #0
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f000 fa7e 	bl	800e6a4 <_Bfree>
 800e1a8:	2f00      	cmp	r7, #0
 800e1aa:	f43f aeab 	beq.w	800df04 <_dtoa_r+0x6c4>
 800e1ae:	f1b8 0f00 	cmp.w	r8, #0
 800e1b2:	d005      	beq.n	800e1c0 <_dtoa_r+0x980>
 800e1b4:	45b8      	cmp	r8, r7
 800e1b6:	d003      	beq.n	800e1c0 <_dtoa_r+0x980>
 800e1b8:	4641      	mov	r1, r8
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 fa72 	bl	800e6a4 <_Bfree>
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fa6e 	bl	800e6a4 <_Bfree>
 800e1c8:	e69c      	b.n	800df04 <_dtoa_r+0x6c4>
 800e1ca:	2600      	movs	r6, #0
 800e1cc:	4637      	mov	r7, r6
 800e1ce:	e7e1      	b.n	800e194 <_dtoa_r+0x954>
 800e1d0:	46bb      	mov	fp, r7
 800e1d2:	4637      	mov	r7, r6
 800e1d4:	e599      	b.n	800dd0a <_dtoa_r+0x4ca>
 800e1d6:	bf00      	nop
 800e1d8:	40240000 	.word	0x40240000
 800e1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80c8 	beq.w	800e374 <_dtoa_r+0xb34>
 800e1e4:	9b04      	ldr	r3, [sp, #16]
 800e1e6:	9301      	str	r3, [sp, #4]
 800e1e8:	2d00      	cmp	r5, #0
 800e1ea:	dd05      	ble.n	800e1f8 <_dtoa_r+0x9b8>
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	462a      	mov	r2, r5
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f000 fc27 	bl	800ea44 <__lshift>
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	f1b8 0f00 	cmp.w	r8, #0
 800e1fc:	d05b      	beq.n	800e2b6 <_dtoa_r+0xa76>
 800e1fe:	6879      	ldr	r1, [r7, #4]
 800e200:	4620      	mov	r0, r4
 800e202:	f000 fa0f 	bl	800e624 <_Balloc>
 800e206:	4605      	mov	r5, r0
 800e208:	b928      	cbnz	r0, 800e216 <_dtoa_r+0x9d6>
 800e20a:	4b83      	ldr	r3, [pc, #524]	; (800e418 <_dtoa_r+0xbd8>)
 800e20c:	4602      	mov	r2, r0
 800e20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e212:	f7ff bb2e 	b.w	800d872 <_dtoa_r+0x32>
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	3202      	adds	r2, #2
 800e21a:	0092      	lsls	r2, r2, #2
 800e21c:	f107 010c 	add.w	r1, r7, #12
 800e220:	300c      	adds	r0, #12
 800e222:	f001 f985 	bl	800f530 <memcpy>
 800e226:	2201      	movs	r2, #1
 800e228:	4629      	mov	r1, r5
 800e22a:	4620      	mov	r0, r4
 800e22c:	f000 fc0a 	bl	800ea44 <__lshift>
 800e230:	9b00      	ldr	r3, [sp, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e23a:	4413      	add	r3, r2
 800e23c:	9308      	str	r3, [sp, #32]
 800e23e:	9b02      	ldr	r3, [sp, #8]
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	46b8      	mov	r8, r7
 800e246:	9306      	str	r3, [sp, #24]
 800e248:	4607      	mov	r7, r0
 800e24a:	9b04      	ldr	r3, [sp, #16]
 800e24c:	4631      	mov	r1, r6
 800e24e:	3b01      	subs	r3, #1
 800e250:	4650      	mov	r0, sl
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	f7ff fa6b 	bl	800d72e <quorem>
 800e258:	4641      	mov	r1, r8
 800e25a:	9002      	str	r0, [sp, #8]
 800e25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e260:	4650      	mov	r0, sl
 800e262:	f000 fc5b 	bl	800eb1c <__mcmp>
 800e266:	463a      	mov	r2, r7
 800e268:	9005      	str	r0, [sp, #20]
 800e26a:	4631      	mov	r1, r6
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 fc71 	bl	800eb54 <__mdiff>
 800e272:	68c2      	ldr	r2, [r0, #12]
 800e274:	4605      	mov	r5, r0
 800e276:	bb02      	cbnz	r2, 800e2ba <_dtoa_r+0xa7a>
 800e278:	4601      	mov	r1, r0
 800e27a:	4650      	mov	r0, sl
 800e27c:	f000 fc4e 	bl	800eb1c <__mcmp>
 800e280:	4602      	mov	r2, r0
 800e282:	4629      	mov	r1, r5
 800e284:	4620      	mov	r0, r4
 800e286:	9209      	str	r2, [sp, #36]	; 0x24
 800e288:	f000 fa0c 	bl	800e6a4 <_Bfree>
 800e28c:	9b07      	ldr	r3, [sp, #28]
 800e28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e290:	9d04      	ldr	r5, [sp, #16]
 800e292:	ea43 0102 	orr.w	r1, r3, r2
 800e296:	9b06      	ldr	r3, [sp, #24]
 800e298:	4319      	orrs	r1, r3
 800e29a:	d110      	bne.n	800e2be <_dtoa_r+0xa7e>
 800e29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2a0:	d029      	beq.n	800e2f6 <_dtoa_r+0xab6>
 800e2a2:	9b05      	ldr	r3, [sp, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dd02      	ble.n	800e2ae <_dtoa_r+0xa6e>
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	f883 9000 	strb.w	r9, [r3]
 800e2b4:	e774      	b.n	800e1a0 <_dtoa_r+0x960>
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	e7ba      	b.n	800e230 <_dtoa_r+0x9f0>
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	e7e1      	b.n	800e282 <_dtoa_r+0xa42>
 800e2be:	9b05      	ldr	r3, [sp, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	db04      	blt.n	800e2ce <_dtoa_r+0xa8e>
 800e2c4:	9907      	ldr	r1, [sp, #28]
 800e2c6:	430b      	orrs	r3, r1
 800e2c8:	9906      	ldr	r1, [sp, #24]
 800e2ca:	430b      	orrs	r3, r1
 800e2cc:	d120      	bne.n	800e310 <_dtoa_r+0xad0>
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	dded      	ble.n	800e2ae <_dtoa_r+0xa6e>
 800e2d2:	4651      	mov	r1, sl
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 fbb4 	bl	800ea44 <__lshift>
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4682      	mov	sl, r0
 800e2e0:	f000 fc1c 	bl	800eb1c <__mcmp>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	dc03      	bgt.n	800e2f0 <_dtoa_r+0xab0>
 800e2e8:	d1e1      	bne.n	800e2ae <_dtoa_r+0xa6e>
 800e2ea:	f019 0f01 	tst.w	r9, #1
 800e2ee:	d0de      	beq.n	800e2ae <_dtoa_r+0xa6e>
 800e2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2f4:	d1d8      	bne.n	800e2a8 <_dtoa_r+0xa68>
 800e2f6:	9a01      	ldr	r2, [sp, #4]
 800e2f8:	2339      	movs	r3, #57	; 0x39
 800e2fa:	7013      	strb	r3, [r2, #0]
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	461d      	mov	r5, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e306:	2a39      	cmp	r2, #57	; 0x39
 800e308:	d06c      	beq.n	800e3e4 <_dtoa_r+0xba4>
 800e30a:	3201      	adds	r2, #1
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	e747      	b.n	800e1a0 <_dtoa_r+0x960>
 800e310:	2a00      	cmp	r2, #0
 800e312:	dd07      	ble.n	800e324 <_dtoa_r+0xae4>
 800e314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e318:	d0ed      	beq.n	800e2f6 <_dtoa_r+0xab6>
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	f109 0301 	add.w	r3, r9, #1
 800e320:	7013      	strb	r3, [r2, #0]
 800e322:	e73d      	b.n	800e1a0 <_dtoa_r+0x960>
 800e324:	9b04      	ldr	r3, [sp, #16]
 800e326:	9a08      	ldr	r2, [sp, #32]
 800e328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d043      	beq.n	800e3b8 <_dtoa_r+0xb78>
 800e330:	4651      	mov	r1, sl
 800e332:	2300      	movs	r3, #0
 800e334:	220a      	movs	r2, #10
 800e336:	4620      	mov	r0, r4
 800e338:	f000 f9d6 	bl	800e6e8 <__multadd>
 800e33c:	45b8      	cmp	r8, r7
 800e33e:	4682      	mov	sl, r0
 800e340:	f04f 0300 	mov.w	r3, #0
 800e344:	f04f 020a 	mov.w	r2, #10
 800e348:	4641      	mov	r1, r8
 800e34a:	4620      	mov	r0, r4
 800e34c:	d107      	bne.n	800e35e <_dtoa_r+0xb1e>
 800e34e:	f000 f9cb 	bl	800e6e8 <__multadd>
 800e352:	4680      	mov	r8, r0
 800e354:	4607      	mov	r7, r0
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	3301      	adds	r3, #1
 800e35a:	9304      	str	r3, [sp, #16]
 800e35c:	e775      	b.n	800e24a <_dtoa_r+0xa0a>
 800e35e:	f000 f9c3 	bl	800e6e8 <__multadd>
 800e362:	4639      	mov	r1, r7
 800e364:	4680      	mov	r8, r0
 800e366:	2300      	movs	r3, #0
 800e368:	220a      	movs	r2, #10
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 f9bc 	bl	800e6e8 <__multadd>
 800e370:	4607      	mov	r7, r0
 800e372:	e7f0      	b.n	800e356 <_dtoa_r+0xb16>
 800e374:	9b04      	ldr	r3, [sp, #16]
 800e376:	9301      	str	r3, [sp, #4]
 800e378:	9d00      	ldr	r5, [sp, #0]
 800e37a:	4631      	mov	r1, r6
 800e37c:	4650      	mov	r0, sl
 800e37e:	f7ff f9d6 	bl	800d72e <quorem>
 800e382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	f805 9b01 	strb.w	r9, [r5], #1
 800e38c:	1aea      	subs	r2, r5, r3
 800e38e:	9b01      	ldr	r3, [sp, #4]
 800e390:	4293      	cmp	r3, r2
 800e392:	dd07      	ble.n	800e3a4 <_dtoa_r+0xb64>
 800e394:	4651      	mov	r1, sl
 800e396:	2300      	movs	r3, #0
 800e398:	220a      	movs	r2, #10
 800e39a:	4620      	mov	r0, r4
 800e39c:	f000 f9a4 	bl	800e6e8 <__multadd>
 800e3a0:	4682      	mov	sl, r0
 800e3a2:	e7ea      	b.n	800e37a <_dtoa_r+0xb3a>
 800e3a4:	9b01      	ldr	r3, [sp, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	bfc8      	it	gt
 800e3aa:	461d      	movgt	r5, r3
 800e3ac:	9b00      	ldr	r3, [sp, #0]
 800e3ae:	bfd8      	it	le
 800e3b0:	2501      	movle	r5, #1
 800e3b2:	441d      	add	r5, r3
 800e3b4:	f04f 0800 	mov.w	r8, #0
 800e3b8:	4651      	mov	r1, sl
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fb41 	bl	800ea44 <__lshift>
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4682      	mov	sl, r0
 800e3c6:	f000 fba9 	bl	800eb1c <__mcmp>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	dc96      	bgt.n	800e2fc <_dtoa_r+0xabc>
 800e3ce:	d102      	bne.n	800e3d6 <_dtoa_r+0xb96>
 800e3d0:	f019 0f01 	tst.w	r9, #1
 800e3d4:	d192      	bne.n	800e2fc <_dtoa_r+0xabc>
 800e3d6:	462b      	mov	r3, r5
 800e3d8:	461d      	mov	r5, r3
 800e3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3de:	2a30      	cmp	r2, #48	; 0x30
 800e3e0:	d0fa      	beq.n	800e3d8 <_dtoa_r+0xb98>
 800e3e2:	e6dd      	b.n	800e1a0 <_dtoa_r+0x960>
 800e3e4:	9a00      	ldr	r2, [sp, #0]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d189      	bne.n	800e2fe <_dtoa_r+0xabe>
 800e3ea:	f10b 0b01 	add.w	fp, fp, #1
 800e3ee:	2331      	movs	r3, #49	; 0x31
 800e3f0:	e796      	b.n	800e320 <_dtoa_r+0xae0>
 800e3f2:	4b0a      	ldr	r3, [pc, #40]	; (800e41c <_dtoa_r+0xbdc>)
 800e3f4:	f7ff ba99 	b.w	800d92a <_dtoa_r+0xea>
 800e3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f47f aa6d 	bne.w	800d8da <_dtoa_r+0x9a>
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <_dtoa_r+0xbe0>)
 800e402:	f7ff ba92 	b.w	800d92a <_dtoa_r+0xea>
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dcb5      	bgt.n	800e378 <_dtoa_r+0xb38>
 800e40c:	9b07      	ldr	r3, [sp, #28]
 800e40e:	2b02      	cmp	r3, #2
 800e410:	f73f aeb1 	bgt.w	800e176 <_dtoa_r+0x936>
 800e414:	e7b0      	b.n	800e378 <_dtoa_r+0xb38>
 800e416:	bf00      	nop
 800e418:	0800fecc 	.word	0x0800fecc
 800e41c:	0800fe2c 	.word	0x0800fe2c
 800e420:	0800fe50 	.word	0x0800fe50

0800e424 <_free_r>:
 800e424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e426:	2900      	cmp	r1, #0
 800e428:	d044      	beq.n	800e4b4 <_free_r+0x90>
 800e42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e42e:	9001      	str	r0, [sp, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	f1a1 0404 	sub.w	r4, r1, #4
 800e436:	bfb8      	it	lt
 800e438:	18e4      	addlt	r4, r4, r3
 800e43a:	f000 f8e7 	bl	800e60c <__malloc_lock>
 800e43e:	4a1e      	ldr	r2, [pc, #120]	; (800e4b8 <_free_r+0x94>)
 800e440:	9801      	ldr	r0, [sp, #4]
 800e442:	6813      	ldr	r3, [r2, #0]
 800e444:	b933      	cbnz	r3, 800e454 <_free_r+0x30>
 800e446:	6063      	str	r3, [r4, #4]
 800e448:	6014      	str	r4, [r2, #0]
 800e44a:	b003      	add	sp, #12
 800e44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e450:	f000 b8e2 	b.w	800e618 <__malloc_unlock>
 800e454:	42a3      	cmp	r3, r4
 800e456:	d908      	bls.n	800e46a <_free_r+0x46>
 800e458:	6825      	ldr	r5, [r4, #0]
 800e45a:	1961      	adds	r1, r4, r5
 800e45c:	428b      	cmp	r3, r1
 800e45e:	bf01      	itttt	eq
 800e460:	6819      	ldreq	r1, [r3, #0]
 800e462:	685b      	ldreq	r3, [r3, #4]
 800e464:	1949      	addeq	r1, r1, r5
 800e466:	6021      	streq	r1, [r4, #0]
 800e468:	e7ed      	b.n	800e446 <_free_r+0x22>
 800e46a:	461a      	mov	r2, r3
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	b10b      	cbz	r3, 800e474 <_free_r+0x50>
 800e470:	42a3      	cmp	r3, r4
 800e472:	d9fa      	bls.n	800e46a <_free_r+0x46>
 800e474:	6811      	ldr	r1, [r2, #0]
 800e476:	1855      	adds	r5, r2, r1
 800e478:	42a5      	cmp	r5, r4
 800e47a:	d10b      	bne.n	800e494 <_free_r+0x70>
 800e47c:	6824      	ldr	r4, [r4, #0]
 800e47e:	4421      	add	r1, r4
 800e480:	1854      	adds	r4, r2, r1
 800e482:	42a3      	cmp	r3, r4
 800e484:	6011      	str	r1, [r2, #0]
 800e486:	d1e0      	bne.n	800e44a <_free_r+0x26>
 800e488:	681c      	ldr	r4, [r3, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	6053      	str	r3, [r2, #4]
 800e48e:	440c      	add	r4, r1
 800e490:	6014      	str	r4, [r2, #0]
 800e492:	e7da      	b.n	800e44a <_free_r+0x26>
 800e494:	d902      	bls.n	800e49c <_free_r+0x78>
 800e496:	230c      	movs	r3, #12
 800e498:	6003      	str	r3, [r0, #0]
 800e49a:	e7d6      	b.n	800e44a <_free_r+0x26>
 800e49c:	6825      	ldr	r5, [r4, #0]
 800e49e:	1961      	adds	r1, r4, r5
 800e4a0:	428b      	cmp	r3, r1
 800e4a2:	bf04      	itt	eq
 800e4a4:	6819      	ldreq	r1, [r3, #0]
 800e4a6:	685b      	ldreq	r3, [r3, #4]
 800e4a8:	6063      	str	r3, [r4, #4]
 800e4aa:	bf04      	itt	eq
 800e4ac:	1949      	addeq	r1, r1, r5
 800e4ae:	6021      	streq	r1, [r4, #0]
 800e4b0:	6054      	str	r4, [r2, #4]
 800e4b2:	e7ca      	b.n	800e44a <_free_r+0x26>
 800e4b4:	b003      	add	sp, #12
 800e4b6:	bd30      	pop	{r4, r5, pc}
 800e4b8:	2000f168 	.word	0x2000f168

0800e4bc <malloc>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <malloc+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f000 b823 	b.w	800e50c <_malloc_r>
 800e4c6:	bf00      	nop
 800e4c8:	200012e0 	.word	0x200012e0

0800e4cc <sbrk_aligned>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4e0e      	ldr	r6, [pc, #56]	; (800e508 <sbrk_aligned+0x3c>)
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	6831      	ldr	r1, [r6, #0]
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	b911      	cbnz	r1, 800e4de <sbrk_aligned+0x12>
 800e4d8:	f001 f81a 	bl	800f510 <_sbrk_r>
 800e4dc:	6030      	str	r0, [r6, #0]
 800e4de:	4621      	mov	r1, r4
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f001 f815 	bl	800f510 <_sbrk_r>
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	d00a      	beq.n	800e500 <sbrk_aligned+0x34>
 800e4ea:	1cc4      	adds	r4, r0, #3
 800e4ec:	f024 0403 	bic.w	r4, r4, #3
 800e4f0:	42a0      	cmp	r0, r4
 800e4f2:	d007      	beq.n	800e504 <sbrk_aligned+0x38>
 800e4f4:	1a21      	subs	r1, r4, r0
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f001 f80a 	bl	800f510 <_sbrk_r>
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	d101      	bne.n	800e504 <sbrk_aligned+0x38>
 800e500:	f04f 34ff 	mov.w	r4, #4294967295
 800e504:	4620      	mov	r0, r4
 800e506:	bd70      	pop	{r4, r5, r6, pc}
 800e508:	2000f16c 	.word	0x2000f16c

0800e50c <_malloc_r>:
 800e50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e510:	1ccd      	adds	r5, r1, #3
 800e512:	f025 0503 	bic.w	r5, r5, #3
 800e516:	3508      	adds	r5, #8
 800e518:	2d0c      	cmp	r5, #12
 800e51a:	bf38      	it	cc
 800e51c:	250c      	movcc	r5, #12
 800e51e:	2d00      	cmp	r5, #0
 800e520:	4607      	mov	r7, r0
 800e522:	db01      	blt.n	800e528 <_malloc_r+0x1c>
 800e524:	42a9      	cmp	r1, r5
 800e526:	d905      	bls.n	800e534 <_malloc_r+0x28>
 800e528:	230c      	movs	r3, #12
 800e52a:	603b      	str	r3, [r7, #0]
 800e52c:	2600      	movs	r6, #0
 800e52e:	4630      	mov	r0, r6
 800e530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e608 <_malloc_r+0xfc>
 800e538:	f000 f868 	bl	800e60c <__malloc_lock>
 800e53c:	f8d8 3000 	ldr.w	r3, [r8]
 800e540:	461c      	mov	r4, r3
 800e542:	bb5c      	cbnz	r4, 800e59c <_malloc_r+0x90>
 800e544:	4629      	mov	r1, r5
 800e546:	4638      	mov	r0, r7
 800e548:	f7ff ffc0 	bl	800e4cc <sbrk_aligned>
 800e54c:	1c43      	adds	r3, r0, #1
 800e54e:	4604      	mov	r4, r0
 800e550:	d155      	bne.n	800e5fe <_malloc_r+0xf2>
 800e552:	f8d8 4000 	ldr.w	r4, [r8]
 800e556:	4626      	mov	r6, r4
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d145      	bne.n	800e5e8 <_malloc_r+0xdc>
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	d048      	beq.n	800e5f2 <_malloc_r+0xe6>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	4631      	mov	r1, r6
 800e564:	4638      	mov	r0, r7
 800e566:	eb04 0903 	add.w	r9, r4, r3
 800e56a:	f000 ffd1 	bl	800f510 <_sbrk_r>
 800e56e:	4581      	cmp	r9, r0
 800e570:	d13f      	bne.n	800e5f2 <_malloc_r+0xe6>
 800e572:	6821      	ldr	r1, [r4, #0]
 800e574:	1a6d      	subs	r5, r5, r1
 800e576:	4629      	mov	r1, r5
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ffa7 	bl	800e4cc <sbrk_aligned>
 800e57e:	3001      	adds	r0, #1
 800e580:	d037      	beq.n	800e5f2 <_malloc_r+0xe6>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	442b      	add	r3, r5
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	f8d8 3000 	ldr.w	r3, [r8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d038      	beq.n	800e602 <_malloc_r+0xf6>
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	42a2      	cmp	r2, r4
 800e594:	d12b      	bne.n	800e5ee <_malloc_r+0xe2>
 800e596:	2200      	movs	r2, #0
 800e598:	605a      	str	r2, [r3, #4]
 800e59a:	e00f      	b.n	800e5bc <_malloc_r+0xb0>
 800e59c:	6822      	ldr	r2, [r4, #0]
 800e59e:	1b52      	subs	r2, r2, r5
 800e5a0:	d41f      	bmi.n	800e5e2 <_malloc_r+0xd6>
 800e5a2:	2a0b      	cmp	r2, #11
 800e5a4:	d917      	bls.n	800e5d6 <_malloc_r+0xca>
 800e5a6:	1961      	adds	r1, r4, r5
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	6025      	str	r5, [r4, #0]
 800e5ac:	bf18      	it	ne
 800e5ae:	6059      	strne	r1, [r3, #4]
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	bf08      	it	eq
 800e5b4:	f8c8 1000 	streq.w	r1, [r8]
 800e5b8:	5162      	str	r2, [r4, r5]
 800e5ba:	604b      	str	r3, [r1, #4]
 800e5bc:	4638      	mov	r0, r7
 800e5be:	f104 060b 	add.w	r6, r4, #11
 800e5c2:	f000 f829 	bl	800e618 <__malloc_unlock>
 800e5c6:	f026 0607 	bic.w	r6, r6, #7
 800e5ca:	1d23      	adds	r3, r4, #4
 800e5cc:	1af2      	subs	r2, r6, r3
 800e5ce:	d0ae      	beq.n	800e52e <_malloc_r+0x22>
 800e5d0:	1b9b      	subs	r3, r3, r6
 800e5d2:	50a3      	str	r3, [r4, r2]
 800e5d4:	e7ab      	b.n	800e52e <_malloc_r+0x22>
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	6862      	ldr	r2, [r4, #4]
 800e5da:	d1dd      	bne.n	800e598 <_malloc_r+0x8c>
 800e5dc:	f8c8 2000 	str.w	r2, [r8]
 800e5e0:	e7ec      	b.n	800e5bc <_malloc_r+0xb0>
 800e5e2:	4623      	mov	r3, r4
 800e5e4:	6864      	ldr	r4, [r4, #4]
 800e5e6:	e7ac      	b.n	800e542 <_malloc_r+0x36>
 800e5e8:	4634      	mov	r4, r6
 800e5ea:	6876      	ldr	r6, [r6, #4]
 800e5ec:	e7b4      	b.n	800e558 <_malloc_r+0x4c>
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	e7cc      	b.n	800e58c <_malloc_r+0x80>
 800e5f2:	230c      	movs	r3, #12
 800e5f4:	603b      	str	r3, [r7, #0]
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f000 f80e 	bl	800e618 <__malloc_unlock>
 800e5fc:	e797      	b.n	800e52e <_malloc_r+0x22>
 800e5fe:	6025      	str	r5, [r4, #0]
 800e600:	e7dc      	b.n	800e5bc <_malloc_r+0xb0>
 800e602:	605b      	str	r3, [r3, #4]
 800e604:	deff      	udf	#255	; 0xff
 800e606:	bf00      	nop
 800e608:	2000f168 	.word	0x2000f168

0800e60c <__malloc_lock>:
 800e60c:	4801      	ldr	r0, [pc, #4]	; (800e614 <__malloc_lock+0x8>)
 800e60e:	f7ff b88c 	b.w	800d72a <__retarget_lock_acquire_recursive>
 800e612:	bf00      	nop
 800e614:	2000f164 	.word	0x2000f164

0800e618 <__malloc_unlock>:
 800e618:	4801      	ldr	r0, [pc, #4]	; (800e620 <__malloc_unlock+0x8>)
 800e61a:	f7ff b887 	b.w	800d72c <__retarget_lock_release_recursive>
 800e61e:	bf00      	nop
 800e620:	2000f164 	.word	0x2000f164

0800e624 <_Balloc>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	69c6      	ldr	r6, [r0, #28]
 800e628:	4604      	mov	r4, r0
 800e62a:	460d      	mov	r5, r1
 800e62c:	b976      	cbnz	r6, 800e64c <_Balloc+0x28>
 800e62e:	2010      	movs	r0, #16
 800e630:	f7ff ff44 	bl	800e4bc <malloc>
 800e634:	4602      	mov	r2, r0
 800e636:	61e0      	str	r0, [r4, #28]
 800e638:	b920      	cbnz	r0, 800e644 <_Balloc+0x20>
 800e63a:	4b18      	ldr	r3, [pc, #96]	; (800e69c <_Balloc+0x78>)
 800e63c:	4818      	ldr	r0, [pc, #96]	; (800e6a0 <_Balloc+0x7c>)
 800e63e:	216b      	movs	r1, #107	; 0x6b
 800e640:	f000 ff84 	bl	800f54c <__assert_func>
 800e644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e648:	6006      	str	r6, [r0, #0]
 800e64a:	60c6      	str	r6, [r0, #12]
 800e64c:	69e6      	ldr	r6, [r4, #28]
 800e64e:	68f3      	ldr	r3, [r6, #12]
 800e650:	b183      	cbz	r3, 800e674 <_Balloc+0x50>
 800e652:	69e3      	ldr	r3, [r4, #28]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e65a:	b9b8      	cbnz	r0, 800e68c <_Balloc+0x68>
 800e65c:	2101      	movs	r1, #1
 800e65e:	fa01 f605 	lsl.w	r6, r1, r5
 800e662:	1d72      	adds	r2, r6, #5
 800e664:	0092      	lsls	r2, r2, #2
 800e666:	4620      	mov	r0, r4
 800e668:	f000 ff8e 	bl	800f588 <_calloc_r>
 800e66c:	b160      	cbz	r0, 800e688 <_Balloc+0x64>
 800e66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e672:	e00e      	b.n	800e692 <_Balloc+0x6e>
 800e674:	2221      	movs	r2, #33	; 0x21
 800e676:	2104      	movs	r1, #4
 800e678:	4620      	mov	r0, r4
 800e67a:	f000 ff85 	bl	800f588 <_calloc_r>
 800e67e:	69e3      	ldr	r3, [r4, #28]
 800e680:	60f0      	str	r0, [r6, #12]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1e4      	bne.n	800e652 <_Balloc+0x2e>
 800e688:	2000      	movs	r0, #0
 800e68a:	bd70      	pop	{r4, r5, r6, pc}
 800e68c:	6802      	ldr	r2, [r0, #0]
 800e68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e692:	2300      	movs	r3, #0
 800e694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e698:	e7f7      	b.n	800e68a <_Balloc+0x66>
 800e69a:	bf00      	nop
 800e69c:	0800fe5d 	.word	0x0800fe5d
 800e6a0:	0800fedd 	.word	0x0800fedd

0800e6a4 <_Bfree>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	69c6      	ldr	r6, [r0, #28]
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	b976      	cbnz	r6, 800e6cc <_Bfree+0x28>
 800e6ae:	2010      	movs	r0, #16
 800e6b0:	f7ff ff04 	bl	800e4bc <malloc>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	61e8      	str	r0, [r5, #28]
 800e6b8:	b920      	cbnz	r0, 800e6c4 <_Bfree+0x20>
 800e6ba:	4b09      	ldr	r3, [pc, #36]	; (800e6e0 <_Bfree+0x3c>)
 800e6bc:	4809      	ldr	r0, [pc, #36]	; (800e6e4 <_Bfree+0x40>)
 800e6be:	218f      	movs	r1, #143	; 0x8f
 800e6c0:	f000 ff44 	bl	800f54c <__assert_func>
 800e6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6c8:	6006      	str	r6, [r0, #0]
 800e6ca:	60c6      	str	r6, [r0, #12]
 800e6cc:	b13c      	cbz	r4, 800e6de <_Bfree+0x3a>
 800e6ce:	69eb      	ldr	r3, [r5, #28]
 800e6d0:	6862      	ldr	r2, [r4, #4]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6d8:	6021      	str	r1, [r4, #0]
 800e6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
 800e6e0:	0800fe5d 	.word	0x0800fe5d
 800e6e4:	0800fedd 	.word	0x0800fedd

0800e6e8 <__multadd>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	690d      	ldr	r5, [r1, #16]
 800e6ee:	4607      	mov	r7, r0
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	461e      	mov	r6, r3
 800e6f4:	f101 0c14 	add.w	ip, r1, #20
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e6fe:	b299      	uxth	r1, r3
 800e700:	fb02 6101 	mla	r1, r2, r1, r6
 800e704:	0c1e      	lsrs	r6, r3, #16
 800e706:	0c0b      	lsrs	r3, r1, #16
 800e708:	fb02 3306 	mla	r3, r2, r6, r3
 800e70c:	b289      	uxth	r1, r1
 800e70e:	3001      	adds	r0, #1
 800e710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e714:	4285      	cmp	r5, r0
 800e716:	f84c 1b04 	str.w	r1, [ip], #4
 800e71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e71e:	dcec      	bgt.n	800e6fa <__multadd+0x12>
 800e720:	b30e      	cbz	r6, 800e766 <__multadd+0x7e>
 800e722:	68a3      	ldr	r3, [r4, #8]
 800e724:	42ab      	cmp	r3, r5
 800e726:	dc19      	bgt.n	800e75c <__multadd+0x74>
 800e728:	6861      	ldr	r1, [r4, #4]
 800e72a:	4638      	mov	r0, r7
 800e72c:	3101      	adds	r1, #1
 800e72e:	f7ff ff79 	bl	800e624 <_Balloc>
 800e732:	4680      	mov	r8, r0
 800e734:	b928      	cbnz	r0, 800e742 <__multadd+0x5a>
 800e736:	4602      	mov	r2, r0
 800e738:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <__multadd+0x84>)
 800e73a:	480d      	ldr	r0, [pc, #52]	; (800e770 <__multadd+0x88>)
 800e73c:	21ba      	movs	r1, #186	; 0xba
 800e73e:	f000 ff05 	bl	800f54c <__assert_func>
 800e742:	6922      	ldr	r2, [r4, #16]
 800e744:	3202      	adds	r2, #2
 800e746:	f104 010c 	add.w	r1, r4, #12
 800e74a:	0092      	lsls	r2, r2, #2
 800e74c:	300c      	adds	r0, #12
 800e74e:	f000 feef 	bl	800f530 <memcpy>
 800e752:	4621      	mov	r1, r4
 800e754:	4638      	mov	r0, r7
 800e756:	f7ff ffa5 	bl	800e6a4 <_Bfree>
 800e75a:	4644      	mov	r4, r8
 800e75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e760:	3501      	adds	r5, #1
 800e762:	615e      	str	r6, [r3, #20]
 800e764:	6125      	str	r5, [r4, #16]
 800e766:	4620      	mov	r0, r4
 800e768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76c:	0800fecc 	.word	0x0800fecc
 800e770:	0800fedd 	.word	0x0800fedd

0800e774 <__hi0bits>:
 800e774:	0c03      	lsrs	r3, r0, #16
 800e776:	041b      	lsls	r3, r3, #16
 800e778:	b9d3      	cbnz	r3, 800e7b0 <__hi0bits+0x3c>
 800e77a:	0400      	lsls	r0, r0, #16
 800e77c:	2310      	movs	r3, #16
 800e77e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e782:	bf04      	itt	eq
 800e784:	0200      	lsleq	r0, r0, #8
 800e786:	3308      	addeq	r3, #8
 800e788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e78c:	bf04      	itt	eq
 800e78e:	0100      	lsleq	r0, r0, #4
 800e790:	3304      	addeq	r3, #4
 800e792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e796:	bf04      	itt	eq
 800e798:	0080      	lsleq	r0, r0, #2
 800e79a:	3302      	addeq	r3, #2
 800e79c:	2800      	cmp	r0, #0
 800e79e:	db05      	blt.n	800e7ac <__hi0bits+0x38>
 800e7a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e7a4:	f103 0301 	add.w	r3, r3, #1
 800e7a8:	bf08      	it	eq
 800e7aa:	2320      	moveq	r3, #32
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	4770      	bx	lr
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e7e4      	b.n	800e77e <__hi0bits+0xa>

0800e7b4 <__lo0bits>:
 800e7b4:	6803      	ldr	r3, [r0, #0]
 800e7b6:	f013 0207 	ands.w	r2, r3, #7
 800e7ba:	d00c      	beq.n	800e7d6 <__lo0bits+0x22>
 800e7bc:	07d9      	lsls	r1, r3, #31
 800e7be:	d422      	bmi.n	800e806 <__lo0bits+0x52>
 800e7c0:	079a      	lsls	r2, r3, #30
 800e7c2:	bf49      	itett	mi
 800e7c4:	085b      	lsrmi	r3, r3, #1
 800e7c6:	089b      	lsrpl	r3, r3, #2
 800e7c8:	6003      	strmi	r3, [r0, #0]
 800e7ca:	2201      	movmi	r2, #1
 800e7cc:	bf5c      	itt	pl
 800e7ce:	6003      	strpl	r3, [r0, #0]
 800e7d0:	2202      	movpl	r2, #2
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	4770      	bx	lr
 800e7d6:	b299      	uxth	r1, r3
 800e7d8:	b909      	cbnz	r1, 800e7de <__lo0bits+0x2a>
 800e7da:	0c1b      	lsrs	r3, r3, #16
 800e7dc:	2210      	movs	r2, #16
 800e7de:	b2d9      	uxtb	r1, r3
 800e7e0:	b909      	cbnz	r1, 800e7e6 <__lo0bits+0x32>
 800e7e2:	3208      	adds	r2, #8
 800e7e4:	0a1b      	lsrs	r3, r3, #8
 800e7e6:	0719      	lsls	r1, r3, #28
 800e7e8:	bf04      	itt	eq
 800e7ea:	091b      	lsreq	r3, r3, #4
 800e7ec:	3204      	addeq	r2, #4
 800e7ee:	0799      	lsls	r1, r3, #30
 800e7f0:	bf04      	itt	eq
 800e7f2:	089b      	lsreq	r3, r3, #2
 800e7f4:	3202      	addeq	r2, #2
 800e7f6:	07d9      	lsls	r1, r3, #31
 800e7f8:	d403      	bmi.n	800e802 <__lo0bits+0x4e>
 800e7fa:	085b      	lsrs	r3, r3, #1
 800e7fc:	f102 0201 	add.w	r2, r2, #1
 800e800:	d003      	beq.n	800e80a <__lo0bits+0x56>
 800e802:	6003      	str	r3, [r0, #0]
 800e804:	e7e5      	b.n	800e7d2 <__lo0bits+0x1e>
 800e806:	2200      	movs	r2, #0
 800e808:	e7e3      	b.n	800e7d2 <__lo0bits+0x1e>
 800e80a:	2220      	movs	r2, #32
 800e80c:	e7e1      	b.n	800e7d2 <__lo0bits+0x1e>
	...

0800e810 <__i2b>:
 800e810:	b510      	push	{r4, lr}
 800e812:	460c      	mov	r4, r1
 800e814:	2101      	movs	r1, #1
 800e816:	f7ff ff05 	bl	800e624 <_Balloc>
 800e81a:	4602      	mov	r2, r0
 800e81c:	b928      	cbnz	r0, 800e82a <__i2b+0x1a>
 800e81e:	4b05      	ldr	r3, [pc, #20]	; (800e834 <__i2b+0x24>)
 800e820:	4805      	ldr	r0, [pc, #20]	; (800e838 <__i2b+0x28>)
 800e822:	f240 1145 	movw	r1, #325	; 0x145
 800e826:	f000 fe91 	bl	800f54c <__assert_func>
 800e82a:	2301      	movs	r3, #1
 800e82c:	6144      	str	r4, [r0, #20]
 800e82e:	6103      	str	r3, [r0, #16]
 800e830:	bd10      	pop	{r4, pc}
 800e832:	bf00      	nop
 800e834:	0800fecc 	.word	0x0800fecc
 800e838:	0800fedd 	.word	0x0800fedd

0800e83c <__multiply>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	4691      	mov	r9, r2
 800e842:	690a      	ldr	r2, [r1, #16]
 800e844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e848:	429a      	cmp	r2, r3
 800e84a:	bfb8      	it	lt
 800e84c:	460b      	movlt	r3, r1
 800e84e:	460c      	mov	r4, r1
 800e850:	bfbc      	itt	lt
 800e852:	464c      	movlt	r4, r9
 800e854:	4699      	movlt	r9, r3
 800e856:	6927      	ldr	r7, [r4, #16]
 800e858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e85c:	68a3      	ldr	r3, [r4, #8]
 800e85e:	6861      	ldr	r1, [r4, #4]
 800e860:	eb07 060a 	add.w	r6, r7, sl
 800e864:	42b3      	cmp	r3, r6
 800e866:	b085      	sub	sp, #20
 800e868:	bfb8      	it	lt
 800e86a:	3101      	addlt	r1, #1
 800e86c:	f7ff feda 	bl	800e624 <_Balloc>
 800e870:	b930      	cbnz	r0, 800e880 <__multiply+0x44>
 800e872:	4602      	mov	r2, r0
 800e874:	4b44      	ldr	r3, [pc, #272]	; (800e988 <__multiply+0x14c>)
 800e876:	4845      	ldr	r0, [pc, #276]	; (800e98c <__multiply+0x150>)
 800e878:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e87c:	f000 fe66 	bl	800f54c <__assert_func>
 800e880:	f100 0514 	add.w	r5, r0, #20
 800e884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e888:	462b      	mov	r3, r5
 800e88a:	2200      	movs	r2, #0
 800e88c:	4543      	cmp	r3, r8
 800e88e:	d321      	bcc.n	800e8d4 <__multiply+0x98>
 800e890:	f104 0314 	add.w	r3, r4, #20
 800e894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e898:	f109 0314 	add.w	r3, r9, #20
 800e89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e8a0:	9202      	str	r2, [sp, #8]
 800e8a2:	1b3a      	subs	r2, r7, r4
 800e8a4:	3a15      	subs	r2, #21
 800e8a6:	f022 0203 	bic.w	r2, r2, #3
 800e8aa:	3204      	adds	r2, #4
 800e8ac:	f104 0115 	add.w	r1, r4, #21
 800e8b0:	428f      	cmp	r7, r1
 800e8b2:	bf38      	it	cc
 800e8b4:	2204      	movcc	r2, #4
 800e8b6:	9201      	str	r2, [sp, #4]
 800e8b8:	9a02      	ldr	r2, [sp, #8]
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d80c      	bhi.n	800e8da <__multiply+0x9e>
 800e8c0:	2e00      	cmp	r6, #0
 800e8c2:	dd03      	ble.n	800e8cc <__multiply+0x90>
 800e8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d05b      	beq.n	800e984 <__multiply+0x148>
 800e8cc:	6106      	str	r6, [r0, #16]
 800e8ce:	b005      	add	sp, #20
 800e8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d4:	f843 2b04 	str.w	r2, [r3], #4
 800e8d8:	e7d8      	b.n	800e88c <__multiply+0x50>
 800e8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8de:	f1ba 0f00 	cmp.w	sl, #0
 800e8e2:	d024      	beq.n	800e92e <__multiply+0xf2>
 800e8e4:	f104 0e14 	add.w	lr, r4, #20
 800e8e8:	46a9      	mov	r9, r5
 800e8ea:	f04f 0c00 	mov.w	ip, #0
 800e8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800e8f6:	fa1f fb82 	uxth.w	fp, r2
 800e8fa:	b289      	uxth	r1, r1
 800e8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e904:	f8d9 2000 	ldr.w	r2, [r9]
 800e908:	4461      	add	r1, ip
 800e90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e916:	b289      	uxth	r1, r1
 800e918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e91c:	4577      	cmp	r7, lr
 800e91e:	f849 1b04 	str.w	r1, [r9], #4
 800e922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e926:	d8e2      	bhi.n	800e8ee <__multiply+0xb2>
 800e928:	9a01      	ldr	r2, [sp, #4]
 800e92a:	f845 c002 	str.w	ip, [r5, r2]
 800e92e:	9a03      	ldr	r2, [sp, #12]
 800e930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e934:	3304      	adds	r3, #4
 800e936:	f1b9 0f00 	cmp.w	r9, #0
 800e93a:	d021      	beq.n	800e980 <__multiply+0x144>
 800e93c:	6829      	ldr	r1, [r5, #0]
 800e93e:	f104 0c14 	add.w	ip, r4, #20
 800e942:	46ae      	mov	lr, r5
 800e944:	f04f 0a00 	mov.w	sl, #0
 800e948:	f8bc b000 	ldrh.w	fp, [ip]
 800e94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e950:	fb09 220b 	mla	r2, r9, fp, r2
 800e954:	4452      	add	r2, sl
 800e956:	b289      	uxth	r1, r1
 800e958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e95c:	f84e 1b04 	str.w	r1, [lr], #4
 800e960:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e968:	f8be 1000 	ldrh.w	r1, [lr]
 800e96c:	fb09 110a 	mla	r1, r9, sl, r1
 800e970:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e974:	4567      	cmp	r7, ip
 800e976:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e97a:	d8e5      	bhi.n	800e948 <__multiply+0x10c>
 800e97c:	9a01      	ldr	r2, [sp, #4]
 800e97e:	50a9      	str	r1, [r5, r2]
 800e980:	3504      	adds	r5, #4
 800e982:	e799      	b.n	800e8b8 <__multiply+0x7c>
 800e984:	3e01      	subs	r6, #1
 800e986:	e79b      	b.n	800e8c0 <__multiply+0x84>
 800e988:	0800fecc 	.word	0x0800fecc
 800e98c:	0800fedd 	.word	0x0800fedd

0800e990 <__pow5mult>:
 800e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e994:	4615      	mov	r5, r2
 800e996:	f012 0203 	ands.w	r2, r2, #3
 800e99a:	4606      	mov	r6, r0
 800e99c:	460f      	mov	r7, r1
 800e99e:	d007      	beq.n	800e9b0 <__pow5mult+0x20>
 800e9a0:	4c25      	ldr	r4, [pc, #148]	; (800ea38 <__pow5mult+0xa8>)
 800e9a2:	3a01      	subs	r2, #1
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9aa:	f7ff fe9d 	bl	800e6e8 <__multadd>
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	10ad      	asrs	r5, r5, #2
 800e9b2:	d03d      	beq.n	800ea30 <__pow5mult+0xa0>
 800e9b4:	69f4      	ldr	r4, [r6, #28]
 800e9b6:	b97c      	cbnz	r4, 800e9d8 <__pow5mult+0x48>
 800e9b8:	2010      	movs	r0, #16
 800e9ba:	f7ff fd7f 	bl	800e4bc <malloc>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	61f0      	str	r0, [r6, #28]
 800e9c2:	b928      	cbnz	r0, 800e9d0 <__pow5mult+0x40>
 800e9c4:	4b1d      	ldr	r3, [pc, #116]	; (800ea3c <__pow5mult+0xac>)
 800e9c6:	481e      	ldr	r0, [pc, #120]	; (800ea40 <__pow5mult+0xb0>)
 800e9c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e9cc:	f000 fdbe 	bl	800f54c <__assert_func>
 800e9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9d4:	6004      	str	r4, [r0, #0]
 800e9d6:	60c4      	str	r4, [r0, #12]
 800e9d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9e0:	b94c      	cbnz	r4, 800e9f6 <__pow5mult+0x66>
 800e9e2:	f240 2171 	movw	r1, #625	; 0x271
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f7ff ff12 	bl	800e810 <__i2b>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	6003      	str	r3, [r0, #0]
 800e9f6:	f04f 0900 	mov.w	r9, #0
 800e9fa:	07eb      	lsls	r3, r5, #31
 800e9fc:	d50a      	bpl.n	800ea14 <__pow5mult+0x84>
 800e9fe:	4639      	mov	r1, r7
 800ea00:	4622      	mov	r2, r4
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7ff ff1a 	bl	800e83c <__multiply>
 800ea08:	4639      	mov	r1, r7
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f7ff fe49 	bl	800e6a4 <_Bfree>
 800ea12:	4647      	mov	r7, r8
 800ea14:	106d      	asrs	r5, r5, #1
 800ea16:	d00b      	beq.n	800ea30 <__pow5mult+0xa0>
 800ea18:	6820      	ldr	r0, [r4, #0]
 800ea1a:	b938      	cbnz	r0, 800ea2c <__pow5mult+0x9c>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff ff0b 	bl	800e83c <__multiply>
 800ea26:	6020      	str	r0, [r4, #0]
 800ea28:	f8c0 9000 	str.w	r9, [r0]
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	e7e4      	b.n	800e9fa <__pow5mult+0x6a>
 800ea30:	4638      	mov	r0, r7
 800ea32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea36:	bf00      	nop
 800ea38:	08010028 	.word	0x08010028
 800ea3c:	0800fe5d 	.word	0x0800fe5d
 800ea40:	0800fedd 	.word	0x0800fedd

0800ea44 <__lshift>:
 800ea44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea48:	460c      	mov	r4, r1
 800ea4a:	6849      	ldr	r1, [r1, #4]
 800ea4c:	6923      	ldr	r3, [r4, #16]
 800ea4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea52:	68a3      	ldr	r3, [r4, #8]
 800ea54:	4607      	mov	r7, r0
 800ea56:	4691      	mov	r9, r2
 800ea58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea5c:	f108 0601 	add.w	r6, r8, #1
 800ea60:	42b3      	cmp	r3, r6
 800ea62:	db0b      	blt.n	800ea7c <__lshift+0x38>
 800ea64:	4638      	mov	r0, r7
 800ea66:	f7ff fddd 	bl	800e624 <_Balloc>
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	b948      	cbnz	r0, 800ea82 <__lshift+0x3e>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	4b28      	ldr	r3, [pc, #160]	; (800eb14 <__lshift+0xd0>)
 800ea72:	4829      	ldr	r0, [pc, #164]	; (800eb18 <__lshift+0xd4>)
 800ea74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea78:	f000 fd68 	bl	800f54c <__assert_func>
 800ea7c:	3101      	adds	r1, #1
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	e7ee      	b.n	800ea60 <__lshift+0x1c>
 800ea82:	2300      	movs	r3, #0
 800ea84:	f100 0114 	add.w	r1, r0, #20
 800ea88:	f100 0210 	add.w	r2, r0, #16
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	4553      	cmp	r3, sl
 800ea90:	db33      	blt.n	800eafa <__lshift+0xb6>
 800ea92:	6920      	ldr	r0, [r4, #16]
 800ea94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea98:	f104 0314 	add.w	r3, r4, #20
 800ea9c:	f019 091f 	ands.w	r9, r9, #31
 800eaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eaa8:	d02b      	beq.n	800eb02 <__lshift+0xbe>
 800eaaa:	f1c9 0e20 	rsb	lr, r9, #32
 800eaae:	468a      	mov	sl, r1
 800eab0:	2200      	movs	r2, #0
 800eab2:	6818      	ldr	r0, [r3, #0]
 800eab4:	fa00 f009 	lsl.w	r0, r0, r9
 800eab8:	4310      	orrs	r0, r2
 800eaba:	f84a 0b04 	str.w	r0, [sl], #4
 800eabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800eac2:	459c      	cmp	ip, r3
 800eac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eac8:	d8f3      	bhi.n	800eab2 <__lshift+0x6e>
 800eaca:	ebac 0304 	sub.w	r3, ip, r4
 800eace:	3b15      	subs	r3, #21
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	3304      	adds	r3, #4
 800ead6:	f104 0015 	add.w	r0, r4, #21
 800eada:	4584      	cmp	ip, r0
 800eadc:	bf38      	it	cc
 800eade:	2304      	movcc	r3, #4
 800eae0:	50ca      	str	r2, [r1, r3]
 800eae2:	b10a      	cbz	r2, 800eae8 <__lshift+0xa4>
 800eae4:	f108 0602 	add.w	r6, r8, #2
 800eae8:	3e01      	subs	r6, #1
 800eaea:	4638      	mov	r0, r7
 800eaec:	612e      	str	r6, [r5, #16]
 800eaee:	4621      	mov	r1, r4
 800eaf0:	f7ff fdd8 	bl	800e6a4 <_Bfree>
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800eafe:	3301      	adds	r3, #1
 800eb00:	e7c5      	b.n	800ea8e <__lshift+0x4a>
 800eb02:	3904      	subs	r1, #4
 800eb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb08:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb0c:	459c      	cmp	ip, r3
 800eb0e:	d8f9      	bhi.n	800eb04 <__lshift+0xc0>
 800eb10:	e7ea      	b.n	800eae8 <__lshift+0xa4>
 800eb12:	bf00      	nop
 800eb14:	0800fecc 	.word	0x0800fecc
 800eb18:	0800fedd 	.word	0x0800fedd

0800eb1c <__mcmp>:
 800eb1c:	b530      	push	{r4, r5, lr}
 800eb1e:	6902      	ldr	r2, [r0, #16]
 800eb20:	690c      	ldr	r4, [r1, #16]
 800eb22:	1b12      	subs	r2, r2, r4
 800eb24:	d10e      	bne.n	800eb44 <__mcmp+0x28>
 800eb26:	f100 0314 	add.w	r3, r0, #20
 800eb2a:	3114      	adds	r1, #20
 800eb2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb3c:	42a5      	cmp	r5, r4
 800eb3e:	d003      	beq.n	800eb48 <__mcmp+0x2c>
 800eb40:	d305      	bcc.n	800eb4e <__mcmp+0x32>
 800eb42:	2201      	movs	r2, #1
 800eb44:	4610      	mov	r0, r2
 800eb46:	bd30      	pop	{r4, r5, pc}
 800eb48:	4283      	cmp	r3, r0
 800eb4a:	d3f3      	bcc.n	800eb34 <__mcmp+0x18>
 800eb4c:	e7fa      	b.n	800eb44 <__mcmp+0x28>
 800eb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb52:	e7f7      	b.n	800eb44 <__mcmp+0x28>

0800eb54 <__mdiff>:
 800eb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb58:	460c      	mov	r4, r1
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4620      	mov	r0, r4
 800eb60:	4690      	mov	r8, r2
 800eb62:	f7ff ffdb 	bl	800eb1c <__mcmp>
 800eb66:	1e05      	subs	r5, r0, #0
 800eb68:	d110      	bne.n	800eb8c <__mdiff+0x38>
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	f7ff fd59 	bl	800e624 <_Balloc>
 800eb72:	b930      	cbnz	r0, 800eb82 <__mdiff+0x2e>
 800eb74:	4b3a      	ldr	r3, [pc, #232]	; (800ec60 <__mdiff+0x10c>)
 800eb76:	4602      	mov	r2, r0
 800eb78:	f240 2137 	movw	r1, #567	; 0x237
 800eb7c:	4839      	ldr	r0, [pc, #228]	; (800ec64 <__mdiff+0x110>)
 800eb7e:	f000 fce5 	bl	800f54c <__assert_func>
 800eb82:	2301      	movs	r3, #1
 800eb84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	bfa4      	itt	ge
 800eb8e:	4643      	movge	r3, r8
 800eb90:	46a0      	movge	r8, r4
 800eb92:	4630      	mov	r0, r6
 800eb94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb98:	bfa6      	itte	ge
 800eb9a:	461c      	movge	r4, r3
 800eb9c:	2500      	movge	r5, #0
 800eb9e:	2501      	movlt	r5, #1
 800eba0:	f7ff fd40 	bl	800e624 <_Balloc>
 800eba4:	b920      	cbnz	r0, 800ebb0 <__mdiff+0x5c>
 800eba6:	4b2e      	ldr	r3, [pc, #184]	; (800ec60 <__mdiff+0x10c>)
 800eba8:	4602      	mov	r2, r0
 800ebaa:	f240 2145 	movw	r1, #581	; 0x245
 800ebae:	e7e5      	b.n	800eb7c <__mdiff+0x28>
 800ebb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ebb4:	6926      	ldr	r6, [r4, #16]
 800ebb6:	60c5      	str	r5, [r0, #12]
 800ebb8:	f104 0914 	add.w	r9, r4, #20
 800ebbc:	f108 0514 	add.w	r5, r8, #20
 800ebc0:	f100 0e14 	add.w	lr, r0, #20
 800ebc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ebc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ebcc:	f108 0210 	add.w	r2, r8, #16
 800ebd0:	46f2      	mov	sl, lr
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebdc:	fa11 f88b 	uxtah	r8, r1, fp
 800ebe0:	b299      	uxth	r1, r3
 800ebe2:	0c1b      	lsrs	r3, r3, #16
 800ebe4:	eba8 0801 	sub.w	r8, r8, r1
 800ebe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebf0:	fa1f f888 	uxth.w	r8, r8
 800ebf4:	1419      	asrs	r1, r3, #16
 800ebf6:	454e      	cmp	r6, r9
 800ebf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebfc:	f84a 3b04 	str.w	r3, [sl], #4
 800ec00:	d8e8      	bhi.n	800ebd4 <__mdiff+0x80>
 800ec02:	1b33      	subs	r3, r6, r4
 800ec04:	3b15      	subs	r3, #21
 800ec06:	f023 0303 	bic.w	r3, r3, #3
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	3415      	adds	r4, #21
 800ec0e:	42a6      	cmp	r6, r4
 800ec10:	bf38      	it	cc
 800ec12:	2304      	movcc	r3, #4
 800ec14:	441d      	add	r5, r3
 800ec16:	4473      	add	r3, lr
 800ec18:	469e      	mov	lr, r3
 800ec1a:	462e      	mov	r6, r5
 800ec1c:	4566      	cmp	r6, ip
 800ec1e:	d30e      	bcc.n	800ec3e <__mdiff+0xea>
 800ec20:	f10c 0203 	add.w	r2, ip, #3
 800ec24:	1b52      	subs	r2, r2, r5
 800ec26:	f022 0203 	bic.w	r2, r2, #3
 800ec2a:	3d03      	subs	r5, #3
 800ec2c:	45ac      	cmp	ip, r5
 800ec2e:	bf38      	it	cc
 800ec30:	2200      	movcc	r2, #0
 800ec32:	4413      	add	r3, r2
 800ec34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec38:	b17a      	cbz	r2, 800ec5a <__mdiff+0x106>
 800ec3a:	6107      	str	r7, [r0, #16]
 800ec3c:	e7a4      	b.n	800eb88 <__mdiff+0x34>
 800ec3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec42:	fa11 f288 	uxtah	r2, r1, r8
 800ec46:	1414      	asrs	r4, r2, #16
 800ec48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec4c:	b292      	uxth	r2, r2
 800ec4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec52:	f84e 2b04 	str.w	r2, [lr], #4
 800ec56:	1421      	asrs	r1, r4, #16
 800ec58:	e7e0      	b.n	800ec1c <__mdiff+0xc8>
 800ec5a:	3f01      	subs	r7, #1
 800ec5c:	e7ea      	b.n	800ec34 <__mdiff+0xe0>
 800ec5e:	bf00      	nop
 800ec60:	0800fecc 	.word	0x0800fecc
 800ec64:	0800fedd 	.word	0x0800fedd

0800ec68 <__d2b>:
 800ec68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	2101      	movs	r1, #1
 800ec70:	ec59 8b10 	vmov	r8, r9, d0
 800ec74:	4616      	mov	r6, r2
 800ec76:	f7ff fcd5 	bl	800e624 <_Balloc>
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	b930      	cbnz	r0, 800ec8c <__d2b+0x24>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	4b24      	ldr	r3, [pc, #144]	; (800ed14 <__d2b+0xac>)
 800ec82:	4825      	ldr	r0, [pc, #148]	; (800ed18 <__d2b+0xb0>)
 800ec84:	f240 310f 	movw	r1, #783	; 0x30f
 800ec88:	f000 fc60 	bl	800f54c <__assert_func>
 800ec8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec94:	bb2d      	cbnz	r5, 800ece2 <__d2b+0x7a>
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	f1b8 0300 	subs.w	r3, r8, #0
 800ec9c:	d026      	beq.n	800ecec <__d2b+0x84>
 800ec9e:	4668      	mov	r0, sp
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	f7ff fd87 	bl	800e7b4 <__lo0bits>
 800eca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ecaa:	b1e8      	cbz	r0, 800ece8 <__d2b+0x80>
 800ecac:	f1c0 0320 	rsb	r3, r0, #32
 800ecb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecb4:	430b      	orrs	r3, r1
 800ecb6:	40c2      	lsrs	r2, r0
 800ecb8:	6163      	str	r3, [r4, #20]
 800ecba:	9201      	str	r2, [sp, #4]
 800ecbc:	9b01      	ldr	r3, [sp, #4]
 800ecbe:	61a3      	str	r3, [r4, #24]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	bf14      	ite	ne
 800ecc4:	2202      	movne	r2, #2
 800ecc6:	2201      	moveq	r2, #1
 800ecc8:	6122      	str	r2, [r4, #16]
 800ecca:	b1bd      	cbz	r5, 800ecfc <__d2b+0x94>
 800eccc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecd0:	4405      	add	r5, r0
 800ecd2:	603d      	str	r5, [r7, #0]
 800ecd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecd8:	6030      	str	r0, [r6, #0]
 800ecda:	4620      	mov	r0, r4
 800ecdc:	b003      	add	sp, #12
 800ecde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ece2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ece6:	e7d6      	b.n	800ec96 <__d2b+0x2e>
 800ece8:	6161      	str	r1, [r4, #20]
 800ecea:	e7e7      	b.n	800ecbc <__d2b+0x54>
 800ecec:	a801      	add	r0, sp, #4
 800ecee:	f7ff fd61 	bl	800e7b4 <__lo0bits>
 800ecf2:	9b01      	ldr	r3, [sp, #4]
 800ecf4:	6163      	str	r3, [r4, #20]
 800ecf6:	3020      	adds	r0, #32
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	e7e5      	b.n	800ecc8 <__d2b+0x60>
 800ecfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed04:	6038      	str	r0, [r7, #0]
 800ed06:	6918      	ldr	r0, [r3, #16]
 800ed08:	f7ff fd34 	bl	800e774 <__hi0bits>
 800ed0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed10:	e7e2      	b.n	800ecd8 <__d2b+0x70>
 800ed12:	bf00      	nop
 800ed14:	0800fecc 	.word	0x0800fecc
 800ed18:	0800fedd 	.word	0x0800fedd

0800ed1c <__ssputs_r>:
 800ed1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed20:	688e      	ldr	r6, [r1, #8]
 800ed22:	461f      	mov	r7, r3
 800ed24:	42be      	cmp	r6, r7
 800ed26:	680b      	ldr	r3, [r1, #0]
 800ed28:	4682      	mov	sl, r0
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	4690      	mov	r8, r2
 800ed2e:	d82c      	bhi.n	800ed8a <__ssputs_r+0x6e>
 800ed30:	898a      	ldrh	r2, [r1, #12]
 800ed32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed36:	d026      	beq.n	800ed86 <__ssputs_r+0x6a>
 800ed38:	6965      	ldr	r5, [r4, #20]
 800ed3a:	6909      	ldr	r1, [r1, #16]
 800ed3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed40:	eba3 0901 	sub.w	r9, r3, r1
 800ed44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed48:	1c7b      	adds	r3, r7, #1
 800ed4a:	444b      	add	r3, r9
 800ed4c:	106d      	asrs	r5, r5, #1
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	bf38      	it	cc
 800ed52:	461d      	movcc	r5, r3
 800ed54:	0553      	lsls	r3, r2, #21
 800ed56:	d527      	bpl.n	800eda8 <__ssputs_r+0x8c>
 800ed58:	4629      	mov	r1, r5
 800ed5a:	f7ff fbd7 	bl	800e50c <_malloc_r>
 800ed5e:	4606      	mov	r6, r0
 800ed60:	b360      	cbz	r0, 800edbc <__ssputs_r+0xa0>
 800ed62:	6921      	ldr	r1, [r4, #16]
 800ed64:	464a      	mov	r2, r9
 800ed66:	f000 fbe3 	bl	800f530 <memcpy>
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed74:	81a3      	strh	r3, [r4, #12]
 800ed76:	6126      	str	r6, [r4, #16]
 800ed78:	6165      	str	r5, [r4, #20]
 800ed7a:	444e      	add	r6, r9
 800ed7c:	eba5 0509 	sub.w	r5, r5, r9
 800ed80:	6026      	str	r6, [r4, #0]
 800ed82:	60a5      	str	r5, [r4, #8]
 800ed84:	463e      	mov	r6, r7
 800ed86:	42be      	cmp	r6, r7
 800ed88:	d900      	bls.n	800ed8c <__ssputs_r+0x70>
 800ed8a:	463e      	mov	r6, r7
 800ed8c:	6820      	ldr	r0, [r4, #0]
 800ed8e:	4632      	mov	r2, r6
 800ed90:	4641      	mov	r1, r8
 800ed92:	f000 fba3 	bl	800f4dc <memmove>
 800ed96:	68a3      	ldr	r3, [r4, #8]
 800ed98:	1b9b      	subs	r3, r3, r6
 800ed9a:	60a3      	str	r3, [r4, #8]
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	4433      	add	r3, r6
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	2000      	movs	r0, #0
 800eda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda8:	462a      	mov	r2, r5
 800edaa:	f000 fc15 	bl	800f5d8 <_realloc_r>
 800edae:	4606      	mov	r6, r0
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d1e0      	bne.n	800ed76 <__ssputs_r+0x5a>
 800edb4:	6921      	ldr	r1, [r4, #16]
 800edb6:	4650      	mov	r0, sl
 800edb8:	f7ff fb34 	bl	800e424 <_free_r>
 800edbc:	230c      	movs	r3, #12
 800edbe:	f8ca 3000 	str.w	r3, [sl]
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edc8:	81a3      	strh	r3, [r4, #12]
 800edca:	f04f 30ff 	mov.w	r0, #4294967295
 800edce:	e7e9      	b.n	800eda4 <__ssputs_r+0x88>

0800edd0 <_svfiprintf_r>:
 800edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	4698      	mov	r8, r3
 800edd6:	898b      	ldrh	r3, [r1, #12]
 800edd8:	061b      	lsls	r3, r3, #24
 800edda:	b09d      	sub	sp, #116	; 0x74
 800eddc:	4607      	mov	r7, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	4614      	mov	r4, r2
 800ede2:	d50e      	bpl.n	800ee02 <_svfiprintf_r+0x32>
 800ede4:	690b      	ldr	r3, [r1, #16]
 800ede6:	b963      	cbnz	r3, 800ee02 <_svfiprintf_r+0x32>
 800ede8:	2140      	movs	r1, #64	; 0x40
 800edea:	f7ff fb8f 	bl	800e50c <_malloc_r>
 800edee:	6028      	str	r0, [r5, #0]
 800edf0:	6128      	str	r0, [r5, #16]
 800edf2:	b920      	cbnz	r0, 800edfe <_svfiprintf_r+0x2e>
 800edf4:	230c      	movs	r3, #12
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	f04f 30ff 	mov.w	r0, #4294967295
 800edfc:	e0d0      	b.n	800efa0 <_svfiprintf_r+0x1d0>
 800edfe:	2340      	movs	r3, #64	; 0x40
 800ee00:	616b      	str	r3, [r5, #20]
 800ee02:	2300      	movs	r3, #0
 800ee04:	9309      	str	r3, [sp, #36]	; 0x24
 800ee06:	2320      	movs	r3, #32
 800ee08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee10:	2330      	movs	r3, #48	; 0x30
 800ee12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800efb8 <_svfiprintf_r+0x1e8>
 800ee16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee1a:	f04f 0901 	mov.w	r9, #1
 800ee1e:	4623      	mov	r3, r4
 800ee20:	469a      	mov	sl, r3
 800ee22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee26:	b10a      	cbz	r2, 800ee2c <_svfiprintf_r+0x5c>
 800ee28:	2a25      	cmp	r2, #37	; 0x25
 800ee2a:	d1f9      	bne.n	800ee20 <_svfiprintf_r+0x50>
 800ee2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee30:	d00b      	beq.n	800ee4a <_svfiprintf_r+0x7a>
 800ee32:	465b      	mov	r3, fp
 800ee34:	4622      	mov	r2, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	4638      	mov	r0, r7
 800ee3a:	f7ff ff6f 	bl	800ed1c <__ssputs_r>
 800ee3e:	3001      	adds	r0, #1
 800ee40:	f000 80a9 	beq.w	800ef96 <_svfiprintf_r+0x1c6>
 800ee44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee46:	445a      	add	r2, fp
 800ee48:	9209      	str	r2, [sp, #36]	; 0x24
 800ee4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 80a1 	beq.w	800ef96 <_svfiprintf_r+0x1c6>
 800ee54:	2300      	movs	r3, #0
 800ee56:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee5e:	f10a 0a01 	add.w	sl, sl, #1
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	9307      	str	r3, [sp, #28]
 800ee66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ee6c:	4654      	mov	r4, sl
 800ee6e:	2205      	movs	r2, #5
 800ee70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee74:	4850      	ldr	r0, [pc, #320]	; (800efb8 <_svfiprintf_r+0x1e8>)
 800ee76:	f7f1 f9ab 	bl	80001d0 <memchr>
 800ee7a:	9a04      	ldr	r2, [sp, #16]
 800ee7c:	b9d8      	cbnz	r0, 800eeb6 <_svfiprintf_r+0xe6>
 800ee7e:	06d0      	lsls	r0, r2, #27
 800ee80:	bf44      	itt	mi
 800ee82:	2320      	movmi	r3, #32
 800ee84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee88:	0711      	lsls	r1, r2, #28
 800ee8a:	bf44      	itt	mi
 800ee8c:	232b      	movmi	r3, #43	; 0x2b
 800ee8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee92:	f89a 3000 	ldrb.w	r3, [sl]
 800ee96:	2b2a      	cmp	r3, #42	; 0x2a
 800ee98:	d015      	beq.n	800eec6 <_svfiprintf_r+0xf6>
 800ee9a:	9a07      	ldr	r2, [sp, #28]
 800ee9c:	4654      	mov	r4, sl
 800ee9e:	2000      	movs	r0, #0
 800eea0:	f04f 0c0a 	mov.w	ip, #10
 800eea4:	4621      	mov	r1, r4
 800eea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeaa:	3b30      	subs	r3, #48	; 0x30
 800eeac:	2b09      	cmp	r3, #9
 800eeae:	d94d      	bls.n	800ef4c <_svfiprintf_r+0x17c>
 800eeb0:	b1b0      	cbz	r0, 800eee0 <_svfiprintf_r+0x110>
 800eeb2:	9207      	str	r2, [sp, #28]
 800eeb4:	e014      	b.n	800eee0 <_svfiprintf_r+0x110>
 800eeb6:	eba0 0308 	sub.w	r3, r0, r8
 800eeba:	fa09 f303 	lsl.w	r3, r9, r3
 800eebe:	4313      	orrs	r3, r2
 800eec0:	9304      	str	r3, [sp, #16]
 800eec2:	46a2      	mov	sl, r4
 800eec4:	e7d2      	b.n	800ee6c <_svfiprintf_r+0x9c>
 800eec6:	9b03      	ldr	r3, [sp, #12]
 800eec8:	1d19      	adds	r1, r3, #4
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	9103      	str	r1, [sp, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	bfbb      	ittet	lt
 800eed2:	425b      	neglt	r3, r3
 800eed4:	f042 0202 	orrlt.w	r2, r2, #2
 800eed8:	9307      	strge	r3, [sp, #28]
 800eeda:	9307      	strlt	r3, [sp, #28]
 800eedc:	bfb8      	it	lt
 800eede:	9204      	strlt	r2, [sp, #16]
 800eee0:	7823      	ldrb	r3, [r4, #0]
 800eee2:	2b2e      	cmp	r3, #46	; 0x2e
 800eee4:	d10c      	bne.n	800ef00 <_svfiprintf_r+0x130>
 800eee6:	7863      	ldrb	r3, [r4, #1]
 800eee8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeea:	d134      	bne.n	800ef56 <_svfiprintf_r+0x186>
 800eeec:	9b03      	ldr	r3, [sp, #12]
 800eeee:	1d1a      	adds	r2, r3, #4
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	9203      	str	r2, [sp, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	bfb8      	it	lt
 800eef8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eefc:	3402      	adds	r4, #2
 800eefe:	9305      	str	r3, [sp, #20]
 800ef00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800efc8 <_svfiprintf_r+0x1f8>
 800ef04:	7821      	ldrb	r1, [r4, #0]
 800ef06:	2203      	movs	r2, #3
 800ef08:	4650      	mov	r0, sl
 800ef0a:	f7f1 f961 	bl	80001d0 <memchr>
 800ef0e:	b138      	cbz	r0, 800ef20 <_svfiprintf_r+0x150>
 800ef10:	9b04      	ldr	r3, [sp, #16]
 800ef12:	eba0 000a 	sub.w	r0, r0, sl
 800ef16:	2240      	movs	r2, #64	; 0x40
 800ef18:	4082      	lsls	r2, r0
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	3401      	adds	r4, #1
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef24:	4825      	ldr	r0, [pc, #148]	; (800efbc <_svfiprintf_r+0x1ec>)
 800ef26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef2a:	2206      	movs	r2, #6
 800ef2c:	f7f1 f950 	bl	80001d0 <memchr>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d038      	beq.n	800efa6 <_svfiprintf_r+0x1d6>
 800ef34:	4b22      	ldr	r3, [pc, #136]	; (800efc0 <_svfiprintf_r+0x1f0>)
 800ef36:	bb1b      	cbnz	r3, 800ef80 <_svfiprintf_r+0x1b0>
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	3307      	adds	r3, #7
 800ef3c:	f023 0307 	bic.w	r3, r3, #7
 800ef40:	3308      	adds	r3, #8
 800ef42:	9303      	str	r3, [sp, #12]
 800ef44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef46:	4433      	add	r3, r6
 800ef48:	9309      	str	r3, [sp, #36]	; 0x24
 800ef4a:	e768      	b.n	800ee1e <_svfiprintf_r+0x4e>
 800ef4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef50:	460c      	mov	r4, r1
 800ef52:	2001      	movs	r0, #1
 800ef54:	e7a6      	b.n	800eea4 <_svfiprintf_r+0xd4>
 800ef56:	2300      	movs	r3, #0
 800ef58:	3401      	adds	r4, #1
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f04f 0c0a 	mov.w	ip, #10
 800ef62:	4620      	mov	r0, r4
 800ef64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef68:	3a30      	subs	r2, #48	; 0x30
 800ef6a:	2a09      	cmp	r2, #9
 800ef6c:	d903      	bls.n	800ef76 <_svfiprintf_r+0x1a6>
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d0c6      	beq.n	800ef00 <_svfiprintf_r+0x130>
 800ef72:	9105      	str	r1, [sp, #20]
 800ef74:	e7c4      	b.n	800ef00 <_svfiprintf_r+0x130>
 800ef76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e7f0      	b.n	800ef62 <_svfiprintf_r+0x192>
 800ef80:	ab03      	add	r3, sp, #12
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	462a      	mov	r2, r5
 800ef86:	4b0f      	ldr	r3, [pc, #60]	; (800efc4 <_svfiprintf_r+0x1f4>)
 800ef88:	a904      	add	r1, sp, #16
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	f7fd fe52 	bl	800cc34 <_printf_float>
 800ef90:	1c42      	adds	r2, r0, #1
 800ef92:	4606      	mov	r6, r0
 800ef94:	d1d6      	bne.n	800ef44 <_svfiprintf_r+0x174>
 800ef96:	89ab      	ldrh	r3, [r5, #12]
 800ef98:	065b      	lsls	r3, r3, #25
 800ef9a:	f53f af2d 	bmi.w	800edf8 <_svfiprintf_r+0x28>
 800ef9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efa0:	b01d      	add	sp, #116	; 0x74
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	ab03      	add	r3, sp, #12
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	462a      	mov	r2, r5
 800efac:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <_svfiprintf_r+0x1f4>)
 800efae:	a904      	add	r1, sp, #16
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7fe f8e3 	bl	800d17c <_printf_i>
 800efb6:	e7eb      	b.n	800ef90 <_svfiprintf_r+0x1c0>
 800efb8:	08010034 	.word	0x08010034
 800efbc:	0801003e 	.word	0x0801003e
 800efc0:	0800cc35 	.word	0x0800cc35
 800efc4:	0800ed1d 	.word	0x0800ed1d
 800efc8:	0801003a 	.word	0x0801003a

0800efcc <__sfputc_r>:
 800efcc:	6893      	ldr	r3, [r2, #8]
 800efce:	3b01      	subs	r3, #1
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	b410      	push	{r4}
 800efd4:	6093      	str	r3, [r2, #8]
 800efd6:	da08      	bge.n	800efea <__sfputc_r+0x1e>
 800efd8:	6994      	ldr	r4, [r2, #24]
 800efda:	42a3      	cmp	r3, r4
 800efdc:	db01      	blt.n	800efe2 <__sfputc_r+0x16>
 800efde:	290a      	cmp	r1, #10
 800efe0:	d103      	bne.n	800efea <__sfputc_r+0x1e>
 800efe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efe6:	f000 b9e3 	b.w	800f3b0 <__swbuf_r>
 800efea:	6813      	ldr	r3, [r2, #0]
 800efec:	1c58      	adds	r0, r3, #1
 800efee:	6010      	str	r0, [r2, #0]
 800eff0:	7019      	strb	r1, [r3, #0]
 800eff2:	4608      	mov	r0, r1
 800eff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <__sfputs_r>:
 800effa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effc:	4606      	mov	r6, r0
 800effe:	460f      	mov	r7, r1
 800f000:	4614      	mov	r4, r2
 800f002:	18d5      	adds	r5, r2, r3
 800f004:	42ac      	cmp	r4, r5
 800f006:	d101      	bne.n	800f00c <__sfputs_r+0x12>
 800f008:	2000      	movs	r0, #0
 800f00a:	e007      	b.n	800f01c <__sfputs_r+0x22>
 800f00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f010:	463a      	mov	r2, r7
 800f012:	4630      	mov	r0, r6
 800f014:	f7ff ffda 	bl	800efcc <__sfputc_r>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d1f3      	bne.n	800f004 <__sfputs_r+0xa>
 800f01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f020 <_vfiprintf_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	460d      	mov	r5, r1
 800f026:	b09d      	sub	sp, #116	; 0x74
 800f028:	4614      	mov	r4, r2
 800f02a:	4698      	mov	r8, r3
 800f02c:	4606      	mov	r6, r0
 800f02e:	b118      	cbz	r0, 800f038 <_vfiprintf_r+0x18>
 800f030:	6a03      	ldr	r3, [r0, #32]
 800f032:	b90b      	cbnz	r3, 800f038 <_vfiprintf_r+0x18>
 800f034:	f7fe fa50 	bl	800d4d8 <__sinit>
 800f038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f03a:	07d9      	lsls	r1, r3, #31
 800f03c:	d405      	bmi.n	800f04a <_vfiprintf_r+0x2a>
 800f03e:	89ab      	ldrh	r3, [r5, #12]
 800f040:	059a      	lsls	r2, r3, #22
 800f042:	d402      	bmi.n	800f04a <_vfiprintf_r+0x2a>
 800f044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f046:	f7fe fb70 	bl	800d72a <__retarget_lock_acquire_recursive>
 800f04a:	89ab      	ldrh	r3, [r5, #12]
 800f04c:	071b      	lsls	r3, r3, #28
 800f04e:	d501      	bpl.n	800f054 <_vfiprintf_r+0x34>
 800f050:	692b      	ldr	r3, [r5, #16]
 800f052:	b99b      	cbnz	r3, 800f07c <_vfiprintf_r+0x5c>
 800f054:	4629      	mov	r1, r5
 800f056:	4630      	mov	r0, r6
 800f058:	f000 f9e8 	bl	800f42c <__swsetup_r>
 800f05c:	b170      	cbz	r0, 800f07c <_vfiprintf_r+0x5c>
 800f05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f060:	07dc      	lsls	r4, r3, #31
 800f062:	d504      	bpl.n	800f06e <_vfiprintf_r+0x4e>
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	b01d      	add	sp, #116	; 0x74
 800f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06e:	89ab      	ldrh	r3, [r5, #12]
 800f070:	0598      	lsls	r0, r3, #22
 800f072:	d4f7      	bmi.n	800f064 <_vfiprintf_r+0x44>
 800f074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f076:	f7fe fb59 	bl	800d72c <__retarget_lock_release_recursive>
 800f07a:	e7f3      	b.n	800f064 <_vfiprintf_r+0x44>
 800f07c:	2300      	movs	r3, #0
 800f07e:	9309      	str	r3, [sp, #36]	; 0x24
 800f080:	2320      	movs	r3, #32
 800f082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f086:	f8cd 800c 	str.w	r8, [sp, #12]
 800f08a:	2330      	movs	r3, #48	; 0x30
 800f08c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f240 <_vfiprintf_r+0x220>
 800f090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f094:	f04f 0901 	mov.w	r9, #1
 800f098:	4623      	mov	r3, r4
 800f09a:	469a      	mov	sl, r3
 800f09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0a0:	b10a      	cbz	r2, 800f0a6 <_vfiprintf_r+0x86>
 800f0a2:	2a25      	cmp	r2, #37	; 0x25
 800f0a4:	d1f9      	bne.n	800f09a <_vfiprintf_r+0x7a>
 800f0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0aa:	d00b      	beq.n	800f0c4 <_vfiprintf_r+0xa4>
 800f0ac:	465b      	mov	r3, fp
 800f0ae:	4622      	mov	r2, r4
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f7ff ffa1 	bl	800effa <__sfputs_r>
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	f000 80a9 	beq.w	800f210 <_vfiprintf_r+0x1f0>
 800f0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0c0:	445a      	add	r2, fp
 800f0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80a1 	beq.w	800f210 <_vfiprintf_r+0x1f0>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d8:	f10a 0a01 	add.w	sl, sl, #1
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	9307      	str	r3, [sp, #28]
 800f0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0e4:	931a      	str	r3, [sp, #104]	; 0x68
 800f0e6:	4654      	mov	r4, sl
 800f0e8:	2205      	movs	r2, #5
 800f0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ee:	4854      	ldr	r0, [pc, #336]	; (800f240 <_vfiprintf_r+0x220>)
 800f0f0:	f7f1 f86e 	bl	80001d0 <memchr>
 800f0f4:	9a04      	ldr	r2, [sp, #16]
 800f0f6:	b9d8      	cbnz	r0, 800f130 <_vfiprintf_r+0x110>
 800f0f8:	06d1      	lsls	r1, r2, #27
 800f0fa:	bf44      	itt	mi
 800f0fc:	2320      	movmi	r3, #32
 800f0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f102:	0713      	lsls	r3, r2, #28
 800f104:	bf44      	itt	mi
 800f106:	232b      	movmi	r3, #43	; 0x2b
 800f108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f10c:	f89a 3000 	ldrb.w	r3, [sl]
 800f110:	2b2a      	cmp	r3, #42	; 0x2a
 800f112:	d015      	beq.n	800f140 <_vfiprintf_r+0x120>
 800f114:	9a07      	ldr	r2, [sp, #28]
 800f116:	4654      	mov	r4, sl
 800f118:	2000      	movs	r0, #0
 800f11a:	f04f 0c0a 	mov.w	ip, #10
 800f11e:	4621      	mov	r1, r4
 800f120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f124:	3b30      	subs	r3, #48	; 0x30
 800f126:	2b09      	cmp	r3, #9
 800f128:	d94d      	bls.n	800f1c6 <_vfiprintf_r+0x1a6>
 800f12a:	b1b0      	cbz	r0, 800f15a <_vfiprintf_r+0x13a>
 800f12c:	9207      	str	r2, [sp, #28]
 800f12e:	e014      	b.n	800f15a <_vfiprintf_r+0x13a>
 800f130:	eba0 0308 	sub.w	r3, r0, r8
 800f134:	fa09 f303 	lsl.w	r3, r9, r3
 800f138:	4313      	orrs	r3, r2
 800f13a:	9304      	str	r3, [sp, #16]
 800f13c:	46a2      	mov	sl, r4
 800f13e:	e7d2      	b.n	800f0e6 <_vfiprintf_r+0xc6>
 800f140:	9b03      	ldr	r3, [sp, #12]
 800f142:	1d19      	adds	r1, r3, #4
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	9103      	str	r1, [sp, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bfbb      	ittet	lt
 800f14c:	425b      	neglt	r3, r3
 800f14e:	f042 0202 	orrlt.w	r2, r2, #2
 800f152:	9307      	strge	r3, [sp, #28]
 800f154:	9307      	strlt	r3, [sp, #28]
 800f156:	bfb8      	it	lt
 800f158:	9204      	strlt	r2, [sp, #16]
 800f15a:	7823      	ldrb	r3, [r4, #0]
 800f15c:	2b2e      	cmp	r3, #46	; 0x2e
 800f15e:	d10c      	bne.n	800f17a <_vfiprintf_r+0x15a>
 800f160:	7863      	ldrb	r3, [r4, #1]
 800f162:	2b2a      	cmp	r3, #42	; 0x2a
 800f164:	d134      	bne.n	800f1d0 <_vfiprintf_r+0x1b0>
 800f166:	9b03      	ldr	r3, [sp, #12]
 800f168:	1d1a      	adds	r2, r3, #4
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	9203      	str	r2, [sp, #12]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	bfb8      	it	lt
 800f172:	f04f 33ff 	movlt.w	r3, #4294967295
 800f176:	3402      	adds	r4, #2
 800f178:	9305      	str	r3, [sp, #20]
 800f17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f250 <_vfiprintf_r+0x230>
 800f17e:	7821      	ldrb	r1, [r4, #0]
 800f180:	2203      	movs	r2, #3
 800f182:	4650      	mov	r0, sl
 800f184:	f7f1 f824 	bl	80001d0 <memchr>
 800f188:	b138      	cbz	r0, 800f19a <_vfiprintf_r+0x17a>
 800f18a:	9b04      	ldr	r3, [sp, #16]
 800f18c:	eba0 000a 	sub.w	r0, r0, sl
 800f190:	2240      	movs	r2, #64	; 0x40
 800f192:	4082      	lsls	r2, r0
 800f194:	4313      	orrs	r3, r2
 800f196:	3401      	adds	r4, #1
 800f198:	9304      	str	r3, [sp, #16]
 800f19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f19e:	4829      	ldr	r0, [pc, #164]	; (800f244 <_vfiprintf_r+0x224>)
 800f1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1a4:	2206      	movs	r2, #6
 800f1a6:	f7f1 f813 	bl	80001d0 <memchr>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d03f      	beq.n	800f22e <_vfiprintf_r+0x20e>
 800f1ae:	4b26      	ldr	r3, [pc, #152]	; (800f248 <_vfiprintf_r+0x228>)
 800f1b0:	bb1b      	cbnz	r3, 800f1fa <_vfiprintf_r+0x1da>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	3307      	adds	r3, #7
 800f1b6:	f023 0307 	bic.w	r3, r3, #7
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	9303      	str	r3, [sp, #12]
 800f1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c0:	443b      	add	r3, r7
 800f1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c4:	e768      	b.n	800f098 <_vfiprintf_r+0x78>
 800f1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	e7a6      	b.n	800f11e <_vfiprintf_r+0xfe>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	3401      	adds	r4, #1
 800f1d4:	9305      	str	r3, [sp, #20]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	f04f 0c0a 	mov.w	ip, #10
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1e2:	3a30      	subs	r2, #48	; 0x30
 800f1e4:	2a09      	cmp	r2, #9
 800f1e6:	d903      	bls.n	800f1f0 <_vfiprintf_r+0x1d0>
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d0c6      	beq.n	800f17a <_vfiprintf_r+0x15a>
 800f1ec:	9105      	str	r1, [sp, #20]
 800f1ee:	e7c4      	b.n	800f17a <_vfiprintf_r+0x15a>
 800f1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e7f0      	b.n	800f1dc <_vfiprintf_r+0x1bc>
 800f1fa:	ab03      	add	r3, sp, #12
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	462a      	mov	r2, r5
 800f200:	4b12      	ldr	r3, [pc, #72]	; (800f24c <_vfiprintf_r+0x22c>)
 800f202:	a904      	add	r1, sp, #16
 800f204:	4630      	mov	r0, r6
 800f206:	f7fd fd15 	bl	800cc34 <_printf_float>
 800f20a:	4607      	mov	r7, r0
 800f20c:	1c78      	adds	r0, r7, #1
 800f20e:	d1d6      	bne.n	800f1be <_vfiprintf_r+0x19e>
 800f210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f212:	07d9      	lsls	r1, r3, #31
 800f214:	d405      	bmi.n	800f222 <_vfiprintf_r+0x202>
 800f216:	89ab      	ldrh	r3, [r5, #12]
 800f218:	059a      	lsls	r2, r3, #22
 800f21a:	d402      	bmi.n	800f222 <_vfiprintf_r+0x202>
 800f21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f21e:	f7fe fa85 	bl	800d72c <__retarget_lock_release_recursive>
 800f222:	89ab      	ldrh	r3, [r5, #12]
 800f224:	065b      	lsls	r3, r3, #25
 800f226:	f53f af1d 	bmi.w	800f064 <_vfiprintf_r+0x44>
 800f22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f22c:	e71c      	b.n	800f068 <_vfiprintf_r+0x48>
 800f22e:	ab03      	add	r3, sp, #12
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	462a      	mov	r2, r5
 800f234:	4b05      	ldr	r3, [pc, #20]	; (800f24c <_vfiprintf_r+0x22c>)
 800f236:	a904      	add	r1, sp, #16
 800f238:	4630      	mov	r0, r6
 800f23a:	f7fd ff9f 	bl	800d17c <_printf_i>
 800f23e:	e7e4      	b.n	800f20a <_vfiprintf_r+0x1ea>
 800f240:	08010034 	.word	0x08010034
 800f244:	0801003e 	.word	0x0801003e
 800f248:	0800cc35 	.word	0x0800cc35
 800f24c:	0800effb 	.word	0x0800effb
 800f250:	0801003a 	.word	0x0801003a

0800f254 <__sflush_r>:
 800f254:	898a      	ldrh	r2, [r1, #12]
 800f256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f25a:	4605      	mov	r5, r0
 800f25c:	0710      	lsls	r0, r2, #28
 800f25e:	460c      	mov	r4, r1
 800f260:	d458      	bmi.n	800f314 <__sflush_r+0xc0>
 800f262:	684b      	ldr	r3, [r1, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	dc05      	bgt.n	800f274 <__sflush_r+0x20>
 800f268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	dc02      	bgt.n	800f274 <__sflush_r+0x20>
 800f26e:	2000      	movs	r0, #0
 800f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f276:	2e00      	cmp	r6, #0
 800f278:	d0f9      	beq.n	800f26e <__sflush_r+0x1a>
 800f27a:	2300      	movs	r3, #0
 800f27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f280:	682f      	ldr	r7, [r5, #0]
 800f282:	6a21      	ldr	r1, [r4, #32]
 800f284:	602b      	str	r3, [r5, #0]
 800f286:	d032      	beq.n	800f2ee <__sflush_r+0x9a>
 800f288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	075a      	lsls	r2, r3, #29
 800f28e:	d505      	bpl.n	800f29c <__sflush_r+0x48>
 800f290:	6863      	ldr	r3, [r4, #4]
 800f292:	1ac0      	subs	r0, r0, r3
 800f294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f296:	b10b      	cbz	r3, 800f29c <__sflush_r+0x48>
 800f298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f29a:	1ac0      	subs	r0, r0, r3
 800f29c:	2300      	movs	r3, #0
 800f29e:	4602      	mov	r2, r0
 800f2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a2:	6a21      	ldr	r1, [r4, #32]
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b0      	blx	r6
 800f2a8:	1c43      	adds	r3, r0, #1
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	d106      	bne.n	800f2bc <__sflush_r+0x68>
 800f2ae:	6829      	ldr	r1, [r5, #0]
 800f2b0:	291d      	cmp	r1, #29
 800f2b2:	d82b      	bhi.n	800f30c <__sflush_r+0xb8>
 800f2b4:	4a29      	ldr	r2, [pc, #164]	; (800f35c <__sflush_r+0x108>)
 800f2b6:	410a      	asrs	r2, r1
 800f2b8:	07d6      	lsls	r6, r2, #31
 800f2ba:	d427      	bmi.n	800f30c <__sflush_r+0xb8>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	6062      	str	r2, [r4, #4]
 800f2c0:	04d9      	lsls	r1, r3, #19
 800f2c2:	6922      	ldr	r2, [r4, #16]
 800f2c4:	6022      	str	r2, [r4, #0]
 800f2c6:	d504      	bpl.n	800f2d2 <__sflush_r+0x7e>
 800f2c8:	1c42      	adds	r2, r0, #1
 800f2ca:	d101      	bne.n	800f2d0 <__sflush_r+0x7c>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b903      	cbnz	r3, 800f2d2 <__sflush_r+0x7e>
 800f2d0:	6560      	str	r0, [r4, #84]	; 0x54
 800f2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2d4:	602f      	str	r7, [r5, #0]
 800f2d6:	2900      	cmp	r1, #0
 800f2d8:	d0c9      	beq.n	800f26e <__sflush_r+0x1a>
 800f2da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2de:	4299      	cmp	r1, r3
 800f2e0:	d002      	beq.n	800f2e8 <__sflush_r+0x94>
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f7ff f89e 	bl	800e424 <_free_r>
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	6360      	str	r0, [r4, #52]	; 0x34
 800f2ec:	e7c0      	b.n	800f270 <__sflush_r+0x1c>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	47b0      	blx	r6
 800f2f4:	1c41      	adds	r1, r0, #1
 800f2f6:	d1c8      	bne.n	800f28a <__sflush_r+0x36>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0c5      	beq.n	800f28a <__sflush_r+0x36>
 800f2fe:	2b1d      	cmp	r3, #29
 800f300:	d001      	beq.n	800f306 <__sflush_r+0xb2>
 800f302:	2b16      	cmp	r3, #22
 800f304:	d101      	bne.n	800f30a <__sflush_r+0xb6>
 800f306:	602f      	str	r7, [r5, #0]
 800f308:	e7b1      	b.n	800f26e <__sflush_r+0x1a>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f310:	81a3      	strh	r3, [r4, #12]
 800f312:	e7ad      	b.n	800f270 <__sflush_r+0x1c>
 800f314:	690f      	ldr	r7, [r1, #16]
 800f316:	2f00      	cmp	r7, #0
 800f318:	d0a9      	beq.n	800f26e <__sflush_r+0x1a>
 800f31a:	0793      	lsls	r3, r2, #30
 800f31c:	680e      	ldr	r6, [r1, #0]
 800f31e:	bf08      	it	eq
 800f320:	694b      	ldreq	r3, [r1, #20]
 800f322:	600f      	str	r7, [r1, #0]
 800f324:	bf18      	it	ne
 800f326:	2300      	movne	r3, #0
 800f328:	eba6 0807 	sub.w	r8, r6, r7
 800f32c:	608b      	str	r3, [r1, #8]
 800f32e:	f1b8 0f00 	cmp.w	r8, #0
 800f332:	dd9c      	ble.n	800f26e <__sflush_r+0x1a>
 800f334:	6a21      	ldr	r1, [r4, #32]
 800f336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f338:	4643      	mov	r3, r8
 800f33a:	463a      	mov	r2, r7
 800f33c:	4628      	mov	r0, r5
 800f33e:	47b0      	blx	r6
 800f340:	2800      	cmp	r0, #0
 800f342:	dc06      	bgt.n	800f352 <__sflush_r+0xfe>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f34a:	81a3      	strh	r3, [r4, #12]
 800f34c:	f04f 30ff 	mov.w	r0, #4294967295
 800f350:	e78e      	b.n	800f270 <__sflush_r+0x1c>
 800f352:	4407      	add	r7, r0
 800f354:	eba8 0800 	sub.w	r8, r8, r0
 800f358:	e7e9      	b.n	800f32e <__sflush_r+0xda>
 800f35a:	bf00      	nop
 800f35c:	dfbffffe 	.word	0xdfbffffe

0800f360 <_fflush_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	690b      	ldr	r3, [r1, #16]
 800f364:	4605      	mov	r5, r0
 800f366:	460c      	mov	r4, r1
 800f368:	b913      	cbnz	r3, 800f370 <_fflush_r+0x10>
 800f36a:	2500      	movs	r5, #0
 800f36c:	4628      	mov	r0, r5
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	b118      	cbz	r0, 800f37a <_fflush_r+0x1a>
 800f372:	6a03      	ldr	r3, [r0, #32]
 800f374:	b90b      	cbnz	r3, 800f37a <_fflush_r+0x1a>
 800f376:	f7fe f8af 	bl	800d4d8 <__sinit>
 800f37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d0f3      	beq.n	800f36a <_fflush_r+0xa>
 800f382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f384:	07d0      	lsls	r0, r2, #31
 800f386:	d404      	bmi.n	800f392 <_fflush_r+0x32>
 800f388:	0599      	lsls	r1, r3, #22
 800f38a:	d402      	bmi.n	800f392 <_fflush_r+0x32>
 800f38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f38e:	f7fe f9cc 	bl	800d72a <__retarget_lock_acquire_recursive>
 800f392:	4628      	mov	r0, r5
 800f394:	4621      	mov	r1, r4
 800f396:	f7ff ff5d 	bl	800f254 <__sflush_r>
 800f39a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f39c:	07da      	lsls	r2, r3, #31
 800f39e:	4605      	mov	r5, r0
 800f3a0:	d4e4      	bmi.n	800f36c <_fflush_r+0xc>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	059b      	lsls	r3, r3, #22
 800f3a6:	d4e1      	bmi.n	800f36c <_fflush_r+0xc>
 800f3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3aa:	f7fe f9bf 	bl	800d72c <__retarget_lock_release_recursive>
 800f3ae:	e7dd      	b.n	800f36c <_fflush_r+0xc>

0800f3b0 <__swbuf_r>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	460e      	mov	r6, r1
 800f3b4:	4614      	mov	r4, r2
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	b118      	cbz	r0, 800f3c2 <__swbuf_r+0x12>
 800f3ba:	6a03      	ldr	r3, [r0, #32]
 800f3bc:	b90b      	cbnz	r3, 800f3c2 <__swbuf_r+0x12>
 800f3be:	f7fe f88b 	bl	800d4d8 <__sinit>
 800f3c2:	69a3      	ldr	r3, [r4, #24]
 800f3c4:	60a3      	str	r3, [r4, #8]
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	071a      	lsls	r2, r3, #28
 800f3ca:	d525      	bpl.n	800f418 <__swbuf_r+0x68>
 800f3cc:	6923      	ldr	r3, [r4, #16]
 800f3ce:	b31b      	cbz	r3, 800f418 <__swbuf_r+0x68>
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	6922      	ldr	r2, [r4, #16]
 800f3d4:	1a98      	subs	r0, r3, r2
 800f3d6:	6963      	ldr	r3, [r4, #20]
 800f3d8:	b2f6      	uxtb	r6, r6
 800f3da:	4283      	cmp	r3, r0
 800f3dc:	4637      	mov	r7, r6
 800f3de:	dc04      	bgt.n	800f3ea <__swbuf_r+0x3a>
 800f3e0:	4621      	mov	r1, r4
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f7ff ffbc 	bl	800f360 <_fflush_r>
 800f3e8:	b9e0      	cbnz	r0, 800f424 <__swbuf_r+0x74>
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	60a3      	str	r3, [r4, #8]
 800f3f0:	6823      	ldr	r3, [r4, #0]
 800f3f2:	1c5a      	adds	r2, r3, #1
 800f3f4:	6022      	str	r2, [r4, #0]
 800f3f6:	701e      	strb	r6, [r3, #0]
 800f3f8:	6962      	ldr	r2, [r4, #20]
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d004      	beq.n	800f40a <__swbuf_r+0x5a>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	07db      	lsls	r3, r3, #31
 800f404:	d506      	bpl.n	800f414 <__swbuf_r+0x64>
 800f406:	2e0a      	cmp	r6, #10
 800f408:	d104      	bne.n	800f414 <__swbuf_r+0x64>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4628      	mov	r0, r5
 800f40e:	f7ff ffa7 	bl	800f360 <_fflush_r>
 800f412:	b938      	cbnz	r0, 800f424 <__swbuf_r+0x74>
 800f414:	4638      	mov	r0, r7
 800f416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f418:	4621      	mov	r1, r4
 800f41a:	4628      	mov	r0, r5
 800f41c:	f000 f806 	bl	800f42c <__swsetup_r>
 800f420:	2800      	cmp	r0, #0
 800f422:	d0d5      	beq.n	800f3d0 <__swbuf_r+0x20>
 800f424:	f04f 37ff 	mov.w	r7, #4294967295
 800f428:	e7f4      	b.n	800f414 <__swbuf_r+0x64>
	...

0800f42c <__swsetup_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	4b2a      	ldr	r3, [pc, #168]	; (800f4d8 <__swsetup_r+0xac>)
 800f430:	4605      	mov	r5, r0
 800f432:	6818      	ldr	r0, [r3, #0]
 800f434:	460c      	mov	r4, r1
 800f436:	b118      	cbz	r0, 800f440 <__swsetup_r+0x14>
 800f438:	6a03      	ldr	r3, [r0, #32]
 800f43a:	b90b      	cbnz	r3, 800f440 <__swsetup_r+0x14>
 800f43c:	f7fe f84c 	bl	800d4d8 <__sinit>
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f446:	0718      	lsls	r0, r3, #28
 800f448:	d422      	bmi.n	800f490 <__swsetup_r+0x64>
 800f44a:	06d9      	lsls	r1, r3, #27
 800f44c:	d407      	bmi.n	800f45e <__swsetup_r+0x32>
 800f44e:	2309      	movs	r3, #9
 800f450:	602b      	str	r3, [r5, #0]
 800f452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	f04f 30ff 	mov.w	r0, #4294967295
 800f45c:	e034      	b.n	800f4c8 <__swsetup_r+0x9c>
 800f45e:	0758      	lsls	r0, r3, #29
 800f460:	d512      	bpl.n	800f488 <__swsetup_r+0x5c>
 800f462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f464:	b141      	cbz	r1, 800f478 <__swsetup_r+0x4c>
 800f466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f46a:	4299      	cmp	r1, r3
 800f46c:	d002      	beq.n	800f474 <__swsetup_r+0x48>
 800f46e:	4628      	mov	r0, r5
 800f470:	f7fe ffd8 	bl	800e424 <_free_r>
 800f474:	2300      	movs	r3, #0
 800f476:	6363      	str	r3, [r4, #52]	; 0x34
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f47e:	81a3      	strh	r3, [r4, #12]
 800f480:	2300      	movs	r3, #0
 800f482:	6063      	str	r3, [r4, #4]
 800f484:	6923      	ldr	r3, [r4, #16]
 800f486:	6023      	str	r3, [r4, #0]
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	f043 0308 	orr.w	r3, r3, #8
 800f48e:	81a3      	strh	r3, [r4, #12]
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	b94b      	cbnz	r3, 800f4a8 <__swsetup_r+0x7c>
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f49e:	d003      	beq.n	800f4a8 <__swsetup_r+0x7c>
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f000 f90c 	bl	800f6c0 <__smakebuf_r>
 800f4a8:	89a0      	ldrh	r0, [r4, #12]
 800f4aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4ae:	f010 0301 	ands.w	r3, r0, #1
 800f4b2:	d00a      	beq.n	800f4ca <__swsetup_r+0x9e>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	60a3      	str	r3, [r4, #8]
 800f4b8:	6963      	ldr	r3, [r4, #20]
 800f4ba:	425b      	negs	r3, r3
 800f4bc:	61a3      	str	r3, [r4, #24]
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	b943      	cbnz	r3, 800f4d4 <__swsetup_r+0xa8>
 800f4c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4c6:	d1c4      	bne.n	800f452 <__swsetup_r+0x26>
 800f4c8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ca:	0781      	lsls	r1, r0, #30
 800f4cc:	bf58      	it	pl
 800f4ce:	6963      	ldrpl	r3, [r4, #20]
 800f4d0:	60a3      	str	r3, [r4, #8]
 800f4d2:	e7f4      	b.n	800f4be <__swsetup_r+0x92>
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	e7f7      	b.n	800f4c8 <__swsetup_r+0x9c>
 800f4d8:	200012e0 	.word	0x200012e0

0800f4dc <memmove>:
 800f4dc:	4288      	cmp	r0, r1
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	eb01 0402 	add.w	r4, r1, r2
 800f4e4:	d902      	bls.n	800f4ec <memmove+0x10>
 800f4e6:	4284      	cmp	r4, r0
 800f4e8:	4623      	mov	r3, r4
 800f4ea:	d807      	bhi.n	800f4fc <memmove+0x20>
 800f4ec:	1e43      	subs	r3, r0, #1
 800f4ee:	42a1      	cmp	r1, r4
 800f4f0:	d008      	beq.n	800f504 <memmove+0x28>
 800f4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4fa:	e7f8      	b.n	800f4ee <memmove+0x12>
 800f4fc:	4402      	add	r2, r0
 800f4fe:	4601      	mov	r1, r0
 800f500:	428a      	cmp	r2, r1
 800f502:	d100      	bne.n	800f506 <memmove+0x2a>
 800f504:	bd10      	pop	{r4, pc}
 800f506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f50e:	e7f7      	b.n	800f500 <memmove+0x24>

0800f510 <_sbrk_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d06      	ldr	r5, [pc, #24]	; (800f52c <_sbrk_r+0x1c>)
 800f514:	2300      	movs	r3, #0
 800f516:	4604      	mov	r4, r0
 800f518:	4608      	mov	r0, r1
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	f7f4 f920 	bl	8003760 <_sbrk>
 800f520:	1c43      	adds	r3, r0, #1
 800f522:	d102      	bne.n	800f52a <_sbrk_r+0x1a>
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	b103      	cbz	r3, 800f52a <_sbrk_r+0x1a>
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	2000f160 	.word	0x2000f160

0800f530 <memcpy>:
 800f530:	440a      	add	r2, r1
 800f532:	4291      	cmp	r1, r2
 800f534:	f100 33ff 	add.w	r3, r0, #4294967295
 800f538:	d100      	bne.n	800f53c <memcpy+0xc>
 800f53a:	4770      	bx	lr
 800f53c:	b510      	push	{r4, lr}
 800f53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f542:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f546:	4291      	cmp	r1, r2
 800f548:	d1f9      	bne.n	800f53e <memcpy+0xe>
 800f54a:	bd10      	pop	{r4, pc}

0800f54c <__assert_func>:
 800f54c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f54e:	4614      	mov	r4, r2
 800f550:	461a      	mov	r2, r3
 800f552:	4b09      	ldr	r3, [pc, #36]	; (800f578 <__assert_func+0x2c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4605      	mov	r5, r0
 800f558:	68d8      	ldr	r0, [r3, #12]
 800f55a:	b14c      	cbz	r4, 800f570 <__assert_func+0x24>
 800f55c:	4b07      	ldr	r3, [pc, #28]	; (800f57c <__assert_func+0x30>)
 800f55e:	9100      	str	r1, [sp, #0]
 800f560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f564:	4906      	ldr	r1, [pc, #24]	; (800f580 <__assert_func+0x34>)
 800f566:	462b      	mov	r3, r5
 800f568:	f000 f872 	bl	800f650 <fiprintf>
 800f56c:	f000 f906 	bl	800f77c <abort>
 800f570:	4b04      	ldr	r3, [pc, #16]	; (800f584 <__assert_func+0x38>)
 800f572:	461c      	mov	r4, r3
 800f574:	e7f3      	b.n	800f55e <__assert_func+0x12>
 800f576:	bf00      	nop
 800f578:	200012e0 	.word	0x200012e0
 800f57c:	0801004f 	.word	0x0801004f
 800f580:	0801005c 	.word	0x0801005c
 800f584:	0801008a 	.word	0x0801008a

0800f588 <_calloc_r>:
 800f588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f58a:	fba1 2402 	umull	r2, r4, r1, r2
 800f58e:	b94c      	cbnz	r4, 800f5a4 <_calloc_r+0x1c>
 800f590:	4611      	mov	r1, r2
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	f7fe ffba 	bl	800e50c <_malloc_r>
 800f598:	9a01      	ldr	r2, [sp, #4]
 800f59a:	4605      	mov	r5, r0
 800f59c:	b930      	cbnz	r0, 800f5ac <_calloc_r+0x24>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	b003      	add	sp, #12
 800f5a2:	bd30      	pop	{r4, r5, pc}
 800f5a4:	220c      	movs	r2, #12
 800f5a6:	6002      	str	r2, [r0, #0]
 800f5a8:	2500      	movs	r5, #0
 800f5aa:	e7f8      	b.n	800f59e <_calloc_r+0x16>
 800f5ac:	4621      	mov	r1, r4
 800f5ae:	f7fe f83e 	bl	800d62e <memset>
 800f5b2:	e7f4      	b.n	800f59e <_calloc_r+0x16>

0800f5b4 <__ascii_mbtowc>:
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	b901      	cbnz	r1, 800f5ba <__ascii_mbtowc+0x6>
 800f5b8:	a901      	add	r1, sp, #4
 800f5ba:	b142      	cbz	r2, 800f5ce <__ascii_mbtowc+0x1a>
 800f5bc:	b14b      	cbz	r3, 800f5d2 <__ascii_mbtowc+0x1e>
 800f5be:	7813      	ldrb	r3, [r2, #0]
 800f5c0:	600b      	str	r3, [r1, #0]
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	1e10      	subs	r0, r2, #0
 800f5c6:	bf18      	it	ne
 800f5c8:	2001      	movne	r0, #1
 800f5ca:	b002      	add	sp, #8
 800f5cc:	4770      	bx	lr
 800f5ce:	4610      	mov	r0, r2
 800f5d0:	e7fb      	b.n	800f5ca <__ascii_mbtowc+0x16>
 800f5d2:	f06f 0001 	mvn.w	r0, #1
 800f5d6:	e7f8      	b.n	800f5ca <__ascii_mbtowc+0x16>

0800f5d8 <_realloc_r>:
 800f5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5dc:	4680      	mov	r8, r0
 800f5de:	4614      	mov	r4, r2
 800f5e0:	460e      	mov	r6, r1
 800f5e2:	b921      	cbnz	r1, 800f5ee <_realloc_r+0x16>
 800f5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	4611      	mov	r1, r2
 800f5ea:	f7fe bf8f 	b.w	800e50c <_malloc_r>
 800f5ee:	b92a      	cbnz	r2, 800f5fc <_realloc_r+0x24>
 800f5f0:	f7fe ff18 	bl	800e424 <_free_r>
 800f5f4:	4625      	mov	r5, r4
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5fc:	f000 f8c5 	bl	800f78a <_malloc_usable_size_r>
 800f600:	4284      	cmp	r4, r0
 800f602:	4607      	mov	r7, r0
 800f604:	d802      	bhi.n	800f60c <_realloc_r+0x34>
 800f606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f60a:	d812      	bhi.n	800f632 <_realloc_r+0x5a>
 800f60c:	4621      	mov	r1, r4
 800f60e:	4640      	mov	r0, r8
 800f610:	f7fe ff7c 	bl	800e50c <_malloc_r>
 800f614:	4605      	mov	r5, r0
 800f616:	2800      	cmp	r0, #0
 800f618:	d0ed      	beq.n	800f5f6 <_realloc_r+0x1e>
 800f61a:	42bc      	cmp	r4, r7
 800f61c:	4622      	mov	r2, r4
 800f61e:	4631      	mov	r1, r6
 800f620:	bf28      	it	cs
 800f622:	463a      	movcs	r2, r7
 800f624:	f7ff ff84 	bl	800f530 <memcpy>
 800f628:	4631      	mov	r1, r6
 800f62a:	4640      	mov	r0, r8
 800f62c:	f7fe fefa 	bl	800e424 <_free_r>
 800f630:	e7e1      	b.n	800f5f6 <_realloc_r+0x1e>
 800f632:	4635      	mov	r5, r6
 800f634:	e7df      	b.n	800f5f6 <_realloc_r+0x1e>

0800f636 <__ascii_wctomb>:
 800f636:	b149      	cbz	r1, 800f64c <__ascii_wctomb+0x16>
 800f638:	2aff      	cmp	r2, #255	; 0xff
 800f63a:	bf85      	ittet	hi
 800f63c:	238a      	movhi	r3, #138	; 0x8a
 800f63e:	6003      	strhi	r3, [r0, #0]
 800f640:	700a      	strbls	r2, [r1, #0]
 800f642:	f04f 30ff 	movhi.w	r0, #4294967295
 800f646:	bf98      	it	ls
 800f648:	2001      	movls	r0, #1
 800f64a:	4770      	bx	lr
 800f64c:	4608      	mov	r0, r1
 800f64e:	4770      	bx	lr

0800f650 <fiprintf>:
 800f650:	b40e      	push	{r1, r2, r3}
 800f652:	b503      	push	{r0, r1, lr}
 800f654:	4601      	mov	r1, r0
 800f656:	ab03      	add	r3, sp, #12
 800f658:	4805      	ldr	r0, [pc, #20]	; (800f670 <fiprintf+0x20>)
 800f65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65e:	6800      	ldr	r0, [r0, #0]
 800f660:	9301      	str	r3, [sp, #4]
 800f662:	f7ff fcdd 	bl	800f020 <_vfiprintf_r>
 800f666:	b002      	add	sp, #8
 800f668:	f85d eb04 	ldr.w	lr, [sp], #4
 800f66c:	b003      	add	sp, #12
 800f66e:	4770      	bx	lr
 800f670:	200012e0 	.word	0x200012e0

0800f674 <__swhatbuf_r>:
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	460c      	mov	r4, r1
 800f678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f67c:	2900      	cmp	r1, #0
 800f67e:	b096      	sub	sp, #88	; 0x58
 800f680:	4615      	mov	r5, r2
 800f682:	461e      	mov	r6, r3
 800f684:	da0d      	bge.n	800f6a2 <__swhatbuf_r+0x2e>
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f68c:	f04f 0100 	mov.w	r1, #0
 800f690:	bf0c      	ite	eq
 800f692:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f696:	2340      	movne	r3, #64	; 0x40
 800f698:	2000      	movs	r0, #0
 800f69a:	6031      	str	r1, [r6, #0]
 800f69c:	602b      	str	r3, [r5, #0]
 800f69e:	b016      	add	sp, #88	; 0x58
 800f6a0:	bd70      	pop	{r4, r5, r6, pc}
 800f6a2:	466a      	mov	r2, sp
 800f6a4:	f000 f848 	bl	800f738 <_fstat_r>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	dbec      	blt.n	800f686 <__swhatbuf_r+0x12>
 800f6ac:	9901      	ldr	r1, [sp, #4]
 800f6ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f6b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f6b6:	4259      	negs	r1, r3
 800f6b8:	4159      	adcs	r1, r3
 800f6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6be:	e7eb      	b.n	800f698 <__swhatbuf_r+0x24>

0800f6c0 <__smakebuf_r>:
 800f6c0:	898b      	ldrh	r3, [r1, #12]
 800f6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6c4:	079d      	lsls	r5, r3, #30
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	d507      	bpl.n	800f6dc <__smakebuf_r+0x1c>
 800f6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	6123      	str	r3, [r4, #16]
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	6163      	str	r3, [r4, #20]
 800f6d8:	b002      	add	sp, #8
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	ab01      	add	r3, sp, #4
 800f6de:	466a      	mov	r2, sp
 800f6e0:	f7ff ffc8 	bl	800f674 <__swhatbuf_r>
 800f6e4:	9900      	ldr	r1, [sp, #0]
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7fe ff0f 	bl	800e50c <_malloc_r>
 800f6ee:	b948      	cbnz	r0, 800f704 <__smakebuf_r+0x44>
 800f6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f4:	059a      	lsls	r2, r3, #22
 800f6f6:	d4ef      	bmi.n	800f6d8 <__smakebuf_r+0x18>
 800f6f8:	f023 0303 	bic.w	r3, r3, #3
 800f6fc:	f043 0302 	orr.w	r3, r3, #2
 800f700:	81a3      	strh	r3, [r4, #12]
 800f702:	e7e3      	b.n	800f6cc <__smakebuf_r+0xc>
 800f704:	89a3      	ldrh	r3, [r4, #12]
 800f706:	6020      	str	r0, [r4, #0]
 800f708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f70c:	81a3      	strh	r3, [r4, #12]
 800f70e:	9b00      	ldr	r3, [sp, #0]
 800f710:	6163      	str	r3, [r4, #20]
 800f712:	9b01      	ldr	r3, [sp, #4]
 800f714:	6120      	str	r0, [r4, #16]
 800f716:	b15b      	cbz	r3, 800f730 <__smakebuf_r+0x70>
 800f718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f71c:	4630      	mov	r0, r6
 800f71e:	f000 f81d 	bl	800f75c <_isatty_r>
 800f722:	b128      	cbz	r0, 800f730 <__smakebuf_r+0x70>
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	f023 0303 	bic.w	r3, r3, #3
 800f72a:	f043 0301 	orr.w	r3, r3, #1
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	431d      	orrs	r5, r3
 800f734:	81a5      	strh	r5, [r4, #12]
 800f736:	e7cf      	b.n	800f6d8 <__smakebuf_r+0x18>

0800f738 <_fstat_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d07      	ldr	r5, [pc, #28]	; (800f758 <_fstat_r+0x20>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4604      	mov	r4, r0
 800f740:	4608      	mov	r0, r1
 800f742:	4611      	mov	r1, r2
 800f744:	602b      	str	r3, [r5, #0]
 800f746:	f7f3 ffe2 	bl	800370e <_fstat>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d102      	bne.n	800f754 <_fstat_r+0x1c>
 800f74e:	682b      	ldr	r3, [r5, #0]
 800f750:	b103      	cbz	r3, 800f754 <_fstat_r+0x1c>
 800f752:	6023      	str	r3, [r4, #0]
 800f754:	bd38      	pop	{r3, r4, r5, pc}
 800f756:	bf00      	nop
 800f758:	2000f160 	.word	0x2000f160

0800f75c <_isatty_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4d06      	ldr	r5, [pc, #24]	; (800f778 <_isatty_r+0x1c>)
 800f760:	2300      	movs	r3, #0
 800f762:	4604      	mov	r4, r0
 800f764:	4608      	mov	r0, r1
 800f766:	602b      	str	r3, [r5, #0]
 800f768:	f7f3 ffe1 	bl	800372e <_isatty>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d102      	bne.n	800f776 <_isatty_r+0x1a>
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	b103      	cbz	r3, 800f776 <_isatty_r+0x1a>
 800f774:	6023      	str	r3, [r4, #0]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	2000f160 	.word	0x2000f160

0800f77c <abort>:
 800f77c:	b508      	push	{r3, lr}
 800f77e:	2006      	movs	r0, #6
 800f780:	f000 f834 	bl	800f7ec <raise>
 800f784:	2001      	movs	r0, #1
 800f786:	f7f3 ff73 	bl	8003670 <_exit>

0800f78a <_malloc_usable_size_r>:
 800f78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f78e:	1f18      	subs	r0, r3, #4
 800f790:	2b00      	cmp	r3, #0
 800f792:	bfbc      	itt	lt
 800f794:	580b      	ldrlt	r3, [r1, r0]
 800f796:	18c0      	addlt	r0, r0, r3
 800f798:	4770      	bx	lr

0800f79a <_raise_r>:
 800f79a:	291f      	cmp	r1, #31
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4604      	mov	r4, r0
 800f7a0:	460d      	mov	r5, r1
 800f7a2:	d904      	bls.n	800f7ae <_raise_r+0x14>
 800f7a4:	2316      	movs	r3, #22
 800f7a6:	6003      	str	r3, [r0, #0]
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	bd38      	pop	{r3, r4, r5, pc}
 800f7ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f7b0:	b112      	cbz	r2, 800f7b8 <_raise_r+0x1e>
 800f7b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7b6:	b94b      	cbnz	r3, 800f7cc <_raise_r+0x32>
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 f831 	bl	800f820 <_getpid_r>
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c8:	f000 b818 	b.w	800f7fc <_kill_r>
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d00a      	beq.n	800f7e6 <_raise_r+0x4c>
 800f7d0:	1c59      	adds	r1, r3, #1
 800f7d2:	d103      	bne.n	800f7dc <_raise_r+0x42>
 800f7d4:	2316      	movs	r3, #22
 800f7d6:	6003      	str	r3, [r0, #0]
 800f7d8:	2001      	movs	r0, #1
 800f7da:	e7e7      	b.n	800f7ac <_raise_r+0x12>
 800f7dc:	2400      	movs	r4, #0
 800f7de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	4798      	blx	r3
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	e7e0      	b.n	800f7ac <_raise_r+0x12>
	...

0800f7ec <raise>:
 800f7ec:	4b02      	ldr	r3, [pc, #8]	; (800f7f8 <raise+0xc>)
 800f7ee:	4601      	mov	r1, r0
 800f7f0:	6818      	ldr	r0, [r3, #0]
 800f7f2:	f7ff bfd2 	b.w	800f79a <_raise_r>
 800f7f6:	bf00      	nop
 800f7f8:	200012e0 	.word	0x200012e0

0800f7fc <_kill_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4d07      	ldr	r5, [pc, #28]	; (800f81c <_kill_r+0x20>)
 800f800:	2300      	movs	r3, #0
 800f802:	4604      	mov	r4, r0
 800f804:	4608      	mov	r0, r1
 800f806:	4611      	mov	r1, r2
 800f808:	602b      	str	r3, [r5, #0]
 800f80a:	f7f3 ff21 	bl	8003650 <_kill>
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	d102      	bne.n	800f818 <_kill_r+0x1c>
 800f812:	682b      	ldr	r3, [r5, #0]
 800f814:	b103      	cbz	r3, 800f818 <_kill_r+0x1c>
 800f816:	6023      	str	r3, [r4, #0]
 800f818:	bd38      	pop	{r3, r4, r5, pc}
 800f81a:	bf00      	nop
 800f81c:	2000f160 	.word	0x2000f160

0800f820 <_getpid_r>:
 800f820:	f7f3 bf0e 	b.w	8003640 <_getpid>

0800f824 <_init>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	bf00      	nop
 800f828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82a:	bc08      	pop	{r3}
 800f82c:	469e      	mov	lr, r3
 800f82e:	4770      	bx	lr

0800f830 <_fini>:
 800f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f832:	bf00      	nop
 800f834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f836:	bc08      	pop	{r3}
 800f838:	469e      	mov	lr, r3
 800f83a:	4770      	bx	lr
